
#include "karaok_prog.h"
#include "common/common.h"
void *karaok_prog_scene_create(karaok_prog_create_para_t *create_para)
{
	__gui_framewincreate_para_t framewin_para;
	karaok_prog_scene_t *sence_para;
	karaok_prog_uipara_t *ui_para;
	sence_para = (karaok_prog_scene_t *)esMEMS_Balloc(sizeof(karaok_prog_scene_t));
	if(!sence_para)
	{
		__msg("mem not enough...\n");
		return NULL;
	}
	eLIBs_memset(sence_para, 0, sizeof(karaok_prog_scene_t));
	sence_para->hlyr = create_para->hlyr;
	sence_para->hparent = create_para->hparent;
	sence_para->scene_id = create_para->scene_id;
	ui_para = (karaok_prog_uipara_t *)karaok_prog_get_uipara(GUI_GetScnDir());
	if(NULL == ui_para)
	{
		esMEMS_Bfree(sence_para, sizeof(karaok_prog_scene_t));
		sence_para = NULL;
		__msg("karaok_prog_get_uipara fail...\n");
		return NULL;
	}
	eLIBs_memset(&framewin_para, 0, sizeof(__gui_framewincreate_para_t));
	framewin_para.name			= "karaok_prog_win",
	framewin_para.dwExStyle		= WS_EX_NONE;
	framewin_para.dwStyle		= WS_NONE | WS_VISIBLE;
	framewin_para.spCaption		= NULL;
	framewin_para.hOwner		= NULL;
	framewin_para.id			= sence_para->scene_id;
	framewin_para.hHosting		=  sence_para->hparent;
	framewin_para.FrameWinProc	= (__pGUI_WIN_CB)esKRNL_GetCallBack((__pCBK_t)karaok_prog_proc);
	framewin_para.rect.x		= ui_para->uipara_frm.x;
	framewin_para.rect.y		= ui_para->uipara_frm.y;
	framewin_para.rect.width	= ui_para->uipara_frm.w;
	framewin_para.rect.height	= ui_para->uipara_frm.h;
	framewin_para.BkColor.alpha = 0;
	framewin_para.BkColor.red	= 0;
	framewin_para.BkColor.green = 0;
	framewin_para.BkColor.blue	= 0;
	framewin_para.attr			= (void *)sence_para;
	framewin_para.hLayer		= sence_para->hlyr;
	sence_para->hfrm = GUI_FrmWinCreate(&framewin_para);
	if(NULL == sence_para->hfrm)
	{
		esMEMS_Bfree(sence_para, sizeof(karaok_prog_scene_t));
		sence_para = NULL;
		__msg("GUI_FrmWinCreate fail...\n");
		return NULL;
	}
	return sence_para;
}

__s32 karaok_prog_scene_delete(void *handle)
{
	karaok_prog_scene_t *scene_para;
	scene_para = (karaok_prog_scene_t *)handle;
	if(NULL == handle)
	{
		__wrn("invalid para..\n");
		return EPDK_FAIL;
	}

	if(!scene_para->hfrm)
	{
		__wrn("invalid para..\n");
		return EPDK_FAIL;
	}

	GUI_FrmWinDelete(scene_para->hfrm);
	eLIBs_memset(scene_para, 0, sizeof(karaok_prog_scene_t));
	esMEMS_Bfree(scene_para, sizeof(karaok_prog_scene_t));
	return EPDK_OK;
}


static void __time2time(__u32 ms, karaok_prog_cuckoo_time_t *format_time)
{
	__u32  total_minute;
	__u32 second_time;
	second_time = ms / 1000;
	total_minute = second_time / 60;
	format_time->data1.second = second_time % 60;
	format_time->data1.minute = total_minute % 60;
	format_time->data1.hour   = total_minute / 60;
}

static __s32 karaok_prog_init_ui(void)
{
	karaok_prog_uipara_t *ui_para;	
	__s32 i,j;
	ui_para = (karaok_prog_uipara_t *)karaok_prog_get_uipara(GUI_GetScnDir());
	if(NULL == ui_para)
	{
		__msg("karaok_prog_get_uipara fail...\n");
		return EPDK_FAIL;
	}
	for(i = 0 ; i < karaok_prog_icon_num ; i++)
	{
		for(j = 0 ; j < KARAOK_PROG_MAX_ICON_RES_NUM ; j++)
		{
			if(ui_para->uipara_icon[i].res_id[j])
			{
				ui_para->uipara_icon[i].res_hdl[j] = dsk_theme_open(ui_para->uipara_icon[i].res_id[j]);
				if(!ui_para->uipara_icon[i].res_hdl[j])
				{
					__wrn("--spsc prog init theme open fail\n");
				}
			}
		}
	}
	for(j = 0 ; j < KARAOK_PROG_MAX_ICON_RES_NUM ; j++)
	{
		if(ui_para->uipara_bg.res_id[j])
		{
			ui_para->uipara_bg.res_hdl[j] = dsk_theme_open(ui_para->uipara_bg.res_id[j]);
			if(!ui_para->uipara_bg.res_hdl[j])
			{		
				__wrn("--spsc prog init theme open fail\n");				
			}
		}
	}
	return EPDK_OK;
}

static __s32 karaok_prog_proc(__gui_msg_t *msg)
{
	switch(msg->id)
	{
		case GUI_MSG_CREATE:
		{
			karaok_prog_scene_t *scene_para;
			scene_para = GUI_WinGetAttr(msg->h_deswin);
			if(!scene_para)
			{
				__wrn("invalid para...\n");
				return EPDK_FAIL;
			}
			scene_para->hfrm 			  = msg->h_deswin;
			scene_para->cur_time_index 	  = -1;
			scene_para->prog_timmer_id 	  = 0x14;
			scene_para->proglyr_timmer_id = 0x15;
			scene_para->prog_lyr_status = karaok_prog_lyrshow;
			eLIBs_memset(&scene_para->cur_time, 0, sizeof(karaok_prog_cuckoo_time_t));	
			gscene_hbar_set_state(HBAR_ST_SHOW);			
			karaok_prog_init_ui();
			karaok_prog_install_timmer(scene_para);
			return EPDK_OK;
		}
		case GUI_MSG_DESTROY:
		{
			karaok_prog_scene_t *scene_para;
			scene_para = GUI_WinGetAttr(msg->h_deswin);		
			gscene_hbar_set_state(HBAR_ST_HIDE);
			if(!scene_para)
			{
				__wrn("invalid para...\n");
				return EPDK_FAIL;
			}	
			karaok_prog_uninstall_timmer(scene_para);
			karaok_prog_deinit_ui();
			return EPDK_OK;
		}
		case GUI_MSG_KEY:
		{		
			return EPDK_OK;
		}
		case GUI_MSG_TOUCH:
		{
			karaok_prog_touch(msg);
			return EPDK_OK;
		}
		case GUI_MSG_PAINT:
		{
			karaok_prog_scene_t *scene_para;
			scene_para = GUI_WinGetAttr(msg->h_deswin);
			if(!scene_para)
			{
				__wrn("invalid para...\n");
				return EPDK_FAIL;
			}
			if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(scene_para->hlyr) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(scene_para->hlyr)))
			{
				Funprintf("--lyr fail--\n");
				return EPDK_FAIL;
			}
			GUI_LyrWinSel(scene_para->hlyr);
			karaok_prog_draw(scene_para);
			karaok_prog_paint(scene_para, KARAOK_PROG_UI_TYPE_ALL);
			return EPDK_OK;
		}
		case GUI_MSG_TIMER:
		{
			karaok_prog_scene_t *scene_para;
			scene_para = GUI_WinGetAttr(msg->h_deswin);
			if(scene_para)
			{
				if(LOWORD(msg->dwAddData1) == scene_para->prog_timmer_id)
				{
					if(karaok_prog_need_jump)
					{
						break;
					}
					karaok_prog_paint(scene_para, KARAOK_PROG_UI_TYPE_ALL);
					return EPDK_OK;
				}
				else if(LOWORD(msg->dwAddData1) == scene_para->proglyr_timmer_id)
				{
					Funprintf("--prog timer lyr = %d--\n",scene_para->prog_lyr_status);
					if(karaok_prog_lyrshow == scene_para->prog_lyr_status)
					{
						scene_para->prog_lyr_status = karaok_prog_lyrhide;
						karaok_prog_scene_movelayer(scene_para);
						return EPDK_OK;
					}
				}
			}
		}
		break;
		case GUI_MSG_CLOSE:
		{
			break;
		}
		default:
		{
			break;
		}
	}
	return GUI_FrmWinDefaultProc(msg);
}

static __s32 karaok_prog_deinit_ui(void)
{
	karaok_prog_uipara_t *ui_para;
	__u32 i = 0,j = 0;
	ui_para = (karaok_prog_uipara_t *)karaok_prog_get_uipara(GUI_GetScnDir());
	if(NULL == ui_para)
	{
		__wrn("--spsc prog deinit uipara is NULL--\n");
		return EPDK_FAIL;
	}
	for(j = 0 ; j < KARAOK_PROG_MAX_ICON_RES_NUM ; j++)
	{
		if(ui_para->uipara_bg.res_hdl[j])
		{
			dsk_theme_close(ui_para->uipara_bg.res_hdl[j]);
			ui_para->uipara_bg.res_hdl[j] = NULL;
		}
	}
	for(i = 0 ; i < karaok_prog_icon_num ; i++)
	{
		for(j = 0 ; j < KARAOK_PROG_MAX_ICON_RES_NUM ; j++)
		{
			if(ui_para->uipara_icon[i].res_hdl[j])
			{
				dsk_theme_close(ui_para->uipara_icon[i].res_hdl[j]);
				ui_para->uipara_icon[i].res_hdl[j] = NULL;
			}
		}
	}	
	return EPDK_OK;
}

static __s32 karaok_prog_install_timmer(karaok_prog_scene_t *scene_para)
{
	if(!scene_para)
	{
		__wrn("invalid para...\n");
		return EPDK_FAIL;
	}
	if(!GUI_IsTimerInstalled(scene_para->hfrm, scene_para->prog_timmer_id))
	{
		GUI_SetTimer(scene_para->hfrm, scene_para->prog_timmer_id,100, NULL); 
	}
	else
	{
		GUI_ResetTimer(scene_para->hfrm, scene_para->prog_timmer_id,100, NULL);
		return EPDK_FAIL;
	}
	if(!GUI_IsTimerInstalled(scene_para->hfrm,scene_para->proglyr_timmer_id))
	{
		GUI_SetTimer(scene_para->hfrm,scene_para->proglyr_timmer_id,500,NULL);
	}
	return EPDK_OK;
}
static __s32 karaok_prog_reset_timer(karaok_prog_scene_t *scene_para)
{
	if(!GUI_IsTimerInstalled(scene_para->hfrm,scene_para->proglyr_timmer_id))
	{
		GUI_SetTimer(scene_para->hfrm,scene_para->proglyr_timmer_id,500,NULL);
	}
	else
	{
		GUI_ResetTimer(scene_para->hfrm, scene_para->proglyr_timmer_id,500, NULL);
		return EPDK_FAIL;
	}
	return EPDK_OK;
}
static __s32 karaok_prog_uninstall_timmer(karaok_prog_scene_t *scene_para)
{
	if(!scene_para)
	{
		__wrn("invalid para...\n");
		return EPDK_FAIL;
	}
	if(GUI_IsTimerInstalled(scene_para->hfrm, scene_para->prog_timmer_id))
	{
		GUI_KillTimer(scene_para->hfrm, scene_para->prog_timmer_id);
	}
	if(GUI_IsTimerInstalled(scene_para->hfrm,scene_para->proglyr_timmer_id))
	{
		GUI_KillTimer(scene_para->hfrm, scene_para->proglyr_timmer_id);
	}
	return EPDK_OK;
}

static __s32 karaok_prog_paint_update(karaok_prog_scene_t *scene_para,__s32 new_cur_time)
{
	karaok_prog_uipara_t *ui_para;	
	karaok_prog_cuckoo_time_t total_t,current_t;
	GUI_RECT gui_rect;
	__u32 cur_time = 0,total_time = 0,n = 0,t = 0,i = 0;
	char total_str[32] = {0};
	char current_str[32] = {0};				
	void *pbmp;
	void *pbmp_cursor;
	
	ui_para = (karaok_prog_uipara_t *)karaok_prog_get_uipara(GUI_GetScnDir());
	if(NULL == ui_para)
	{
		__wrn("-karaok prog ui_para is NULL--\n");
		return EPDK_FAIL;
	}
	if(!scene_para)
	{
		__wrn("--karaok prog scene_para is NULL--\n");
		return EPDK_FAIL;
	}
	if(!scene_para->hlyr)
	{
		__wrn("--karaok prog scene_para->hlyr is NULL--\n");
		return EPDK_FAIL;
	}
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(scene_para->hlyr) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(scene_para->hlyr)))
	{
		Funprintf("--lyr fail--\n");
		return EPDK_FAIL;
	}
	GUI_LyrWinSel(scene_para->hlyr);
	com_memdev_create(scene_para->hlyr);

	if(-1 == scene_para->cur_time_index)
	{
		t = new_cur_time;
		__time2time(t, &current_t);
	}
	else if(scene_para->cur_time_index >= 0 || scene_para->cur_time_index < 3)
	{
		eLIBs_memcpy(&current_t, &scene_para->cur_time, sizeof(karaok_prog_cuckoo_time_t));
	}
	else
	{
		com_memdev_delete();			
		return EPDK_FAIL;
	}
	if(SWFFont)
	{
		GUI_SetFont(SWFFont);
	}
	else
	{
		GUI_SetFont(GUI_GetDefaultFont());
	}
	GUI_SetColor(GUI_BLACK);
	GUI_UC_SetEncodeUTF8();
	for(i = 0 ; i < BEETLES_TBL_SIZE(ui_para->uipara_prog_cur_time) ; i++)
	{

		GUI_SetBkColor(0xfff5f5f9);
		gui_rect.x0 = ui_para->uipara_prog_cur_time[i].x;
		gui_rect.y0 = ui_para->uipara_prog_cur_time[i].y;
		gui_rect.x1 = gui_rect.x0 + ui_para->uipara_prog_cur_time[i].w;
		gui_rect.y1 = gui_rect.y0 + ui_para->uipara_prog_cur_time[i].h;
		GUI_ClearRectEx(&gui_rect);
		eLIBs_sprintf(current_str, "%.2d", current_t.data2[i]);
		GUI_DispStringInRect(current_str, &gui_rect, GUI_TA_VCENTER | GUI_TA_HCENTER);
	}
	for(i = 0 ; i < BEETLES_TBL_SIZE(ui_para->uipara_prog_cur_time_dot) ; i++)
	{
		gui_rect.x0 = ui_para->uipara_prog_cur_time_dot[i].x;
		gui_rect.y0 = ui_para->uipara_prog_cur_time_dot[i].y;
		gui_rect.x1 = gui_rect.x0 + ui_para->uipara_prog_cur_time_dot[i].w;
		gui_rect.y1 = gui_rect.y0 + ui_para->uipara_prog_cur_time_dot[i].h;
		eLIBs_sprintf(current_str, ":");
		GUI_DispStringInRect(current_str, &gui_rect, GUI_TA_VCENTER | GUI_TA_HCENTER);
	}
	/*total time */
	t = robin_get_total_time();
	__time2time(t, &total_t);
	if(SWFFont)
	{
		GUI_SetFont(SWFFont);
	}
	else
	{
		GUI_SetFont(GUI_GetDefaultFont());
	}
	GUI_SetColor(GUI_BLACK);
	GUI_SetBkColor(0xfff5f5f9);
	for(i = 0 ; i < BEETLES_TBL_SIZE(ui_para->uipara_prog_total_time) ; i++)
	{
		gui_rect.x0 = ui_para->uipara_prog_total_time[i].x;
		gui_rect.y0 = ui_para->uipara_prog_total_time[i].y;
		gui_rect.x1 = gui_rect.x0 + ui_para->uipara_prog_total_time[i].w;
		gui_rect.y1 = gui_rect.y0 + ui_para->uipara_prog_total_time[i].h;
		GUI_ClearRectEx(&gui_rect);
		eLIBs_sprintf(total_str, "%.2d", total_t.data2[i]);
		GUI_DispStringInRect(total_str, &gui_rect, GUI_TA_VCENTER | GUI_TA_HCENTER);
	}
	for(i = 0 ; i < BEETLES_TBL_SIZE(ui_para->uipara_prog_total_time_dot) ; i++)
	{
		gui_rect.x0 = ui_para->uipara_prog_total_time_dot[i].x;
		gui_rect.y0 = ui_para->uipara_prog_total_time_dot[i].y;
		gui_rect.x1 = gui_rect.x0 + ui_para->uipara_prog_total_time_dot[i].w;
		gui_rect.y1 = gui_rect.y0 + ui_para->uipara_prog_total_time_dot[i].h;
		eLIBs_sprintf(total_str, ":");
		GUI_DispStringInRect(total_str, &gui_rect, GUI_TA_VCENTER | GUI_TA_HCENTER);
	}

	if((!ui_para->uipara_icon[karaok_prog_icon_prog_cursor].res_hdl[0])||(!ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].res_hdl[0]))
	{
		com_memdev_delete();			
		return EPDK_FAIL;
	}
	pbmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_prog_bg].res_hdl[0]);
	if(!pbmp)
	{
		com_memdev_delete();			
		return EPDK_FAIL;
	}
	GUI_BMP_Draw(pbmp, ui_para->uipara_icon[karaok_prog_icon_prog_bg].x, ui_para->uipara_icon[karaok_prog_icon_prog_bg].y);

	cur_time = new_cur_time;
	total_time = robin_get_total_time();
	if(cur_time > total_time)
	{
		cur_time = total_time;
	}
	if(!ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].res_hdl[0])
	{
		com_memdev_delete();			
		return EPDK_FAIL;
	}	
	pbmp_cursor= dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].res_hdl[0]);
	if(cur_time <= 0 || total_time <= 0)
	{
		n = 0;
	}
	else
	{
		n = ((ui_para->uipara_icon[karaok_prog_icon_prog_bg].w-ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].w) * cur_time)/(ui_para->uipara_icon[karaok_prog_icon_prog_cursor].w * total_time);
	}
	GUI_BMP_Draw(pbmp_cursor, ui_para->uipara_icon[karaok_prog_icon_prog_cursor].x + (n-1) * ui_para->uipara_icon[karaok_prog_icon_prog_cursor].w
             ,ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].y);
	GUI_SetDrawMode(GUI_DRAWMODE_NORMAL);
	com_memdev_delete();			
	return EPDK_OK;
}

static __s32 karaok_prog_paint(karaok_prog_scene_t *scene_para,__u32 ui_type)
{
	karaok_prog_uipara_t *ui_para;
	karaok_prog_cuckoo_time_t total_t,current_t;	
	__cedar_status_t sta;						
	GUI_RECT gui_rect;
	__u32 cur_time = 0,total_time = 0,n = 0,t = 0,i = 0;
	char current_str[32] = {0};		
	char total_str[32] = {0};		
	void *pbmp;
	void *pbmp_cursor;	
	void *Play_Bmp;
	void *Pause_Bmp;
	ui_para = (karaok_prog_uipara_t *)karaok_prog_get_uipara(GUI_GetScnDir());
	if(NULL == ui_para)
	{
		__wrn("--karaok prog ui_para is NULL--\n");
		return EPDK_FAIL;
	}
	if(!scene_para)
	{
		__wrn("--karaok prog scene_para is NULL--\n");
		return EPDK_FAIL;
	}
	if(!scene_para->hlyr)
	{
		__wrn("--karaok prog scene_para->hlyr is NULL--\n");
		return EPDK_FAIL;
	}
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(scene_para->hlyr) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(scene_para->hlyr)))
	{
		Funprintf("--lyr fail--\n");
		return EPDK_FAIL;
	}
	GUI_LyrWinSel(scene_para->hlyr);
	
	Play_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_play].res_hdl[0]);
	if(!Play_Bmp)
	{
		__wrn("Play_Fc_Bmp is null...\n");
		return EPDK_FAIL;
	}
	Pause_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_play].res_hdl[1]);
	if(!Pause_Bmp)
	{
		__wrn("Play_Fc_Bmp is null...\n");
		return EPDK_FAIL;
	}
	sta = robin_get_fsm_status();
	if(CEDAR_STAT_PLAY == sta)
	{	
		GUI_BMP_Draw(Play_Bmp, ui_para->uipara_icon[karaok_prog_icon_play].x, ui_para->uipara_icon[karaok_prog_icon_play].y);
	}
	else
	{						
		GUI_BMP_Draw(Pause_Bmp, ui_para->uipara_icon[karaok_prog_icon_play].x, ui_para->uipara_icon[karaok_prog_icon_play].y);
	}	
	
	com_memdev_create(scene_para->hlyr);
	if(ui_type & KARAOK_PROG_UI_TYPE_CUR_TIME)
	{
		if(-1 == scene_para->cur_time_index)
		{
			t = robin_get_cur_time();
			__time2time(t, &current_t);
		}
		else if(scene_para->cur_time_index >= 0 || scene_para->cur_time_index < 3)
		{
			eLIBs_memcpy(&current_t, &scene_para->cur_time, sizeof(karaok_prog_cuckoo_time_t));
		}
		else
		{
			com_memdev_delete();			
			return EPDK_FAIL;
		}
		if(SWFFont)
		{
			GUI_SetFont(SWFFont);
		}
		else
		{
			GUI_SetFont(GUI_GetDefaultFont());
		}
		GUI_SetColor(GUI_BLACK);
		GUI_UC_SetEncodeUTF8();
		for(i = 0 ; i < BEETLES_TBL_SIZE(ui_para->uipara_prog_cur_time) ; i++)
		{
			if(i == scene_para->cur_time_index)
			{
				GUI_SetBkColor(0xfff5f5f9);
			}
			else
			{
				GUI_SetBkColor(0xfff5f5f9);
			}
			gui_rect.x0 = ui_para->uipara_prog_cur_time[i].x;
			gui_rect.y0 = ui_para->uipara_prog_cur_time[i].y;
			gui_rect.x1 = gui_rect.x0 + ui_para->uipara_prog_cur_time[i].w;
			gui_rect.y1 = gui_rect.y0 + ui_para->uipara_prog_cur_time[i].h;
			GUI_ClearRectEx(&gui_rect);
			eLIBs_sprintf(current_str, "%.2d", current_t.data2[i]);
			GUI_DispStringInRect(current_str, &gui_rect, GUI_TA_VCENTER | GUI_TA_HCENTER);
		}
		for(i = 0 ; i < BEETLES_TBL_SIZE(ui_para->uipara_prog_cur_time_dot) ; i++)
		{
			gui_rect.x0 = ui_para->uipara_prog_cur_time_dot[i].x;
			gui_rect.y0 = ui_para->uipara_prog_cur_time_dot[i].y;
			gui_rect.x1 = gui_rect.x0 + ui_para->uipara_prog_cur_time_dot[i].w;
			gui_rect.y1 = gui_rect.y0 + ui_para->uipara_prog_cur_time_dot[i].h;
			eLIBs_sprintf(current_str, ":");
			GUI_DispStringInRect(current_str, &gui_rect, GUI_TA_VCENTER | GUI_TA_HCENTER);
		}
	}
	if(ui_type & KARAOK_PROG_UI_TYPE_TOTAL_TIME)
	{
		t = robin_get_total_time();
		__time2time(t, &total_t);
		if(SWFFont)
		{
			GUI_SetFont(SWFFont);
		}
		else
		{
			GUI_SetFont(GUI_GetDefaultFont());
		}
		GUI_SetColor(GUI_BLACK);
		GUI_SetBkColor(0xfff5f5f9);
		for(i = 0 ; i < BEETLES_TBL_SIZE(ui_para->uipara_prog_total_time) ; i++)
		{
			gui_rect.x0 = ui_para->uipara_prog_total_time[i].x;
			gui_rect.y0 = ui_para->uipara_prog_total_time[i].y;
			gui_rect.x1 = gui_rect.x0 + ui_para->uipara_prog_total_time[i].w;
			gui_rect.y1 = gui_rect.y0 + ui_para->uipara_prog_total_time[i].h;
			GUI_ClearRectEx(&gui_rect);
			eLIBs_sprintf(total_str, "%.2d", total_t.data2[i]);
			GUI_DispStringInRect(total_str, &gui_rect, GUI_TA_VCENTER | GUI_TA_HCENTER);
		}
		for(i = 0 ; i < BEETLES_TBL_SIZE(ui_para->uipara_prog_total_time_dot) ; i++)
		{
			gui_rect.x0 = ui_para->uipara_prog_total_time_dot[i].x;
			gui_rect.y0 = ui_para->uipara_prog_total_time_dot[i].y;
			gui_rect.x1 = gui_rect.x0 + ui_para->uipara_prog_total_time_dot[i].w;
			gui_rect.y1 = gui_rect.y0 + ui_para->uipara_prog_total_time_dot[i].h;
			eLIBs_sprintf(total_str, ":");
			GUI_DispStringInRect(total_str, &gui_rect, GUI_TA_VCENTER | GUI_TA_HCENTER);
		}
	}
	if(ui_type & KARAOK_PROG_UI_TYPE_PROG)
	{
		if(!ui_para->uipara_icon[karaok_prog_icon_prog_bg].res_hdl[0])
		{
			com_memdev_delete();			
			return EPDK_FAIL;
		}
		pbmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_prog_bg].res_hdl[0]);
		if(!pbmp)
		{
			com_memdev_delete();			
			return EPDK_FAIL;
		}
		GUI_BMP_Draw(pbmp, ui_para->uipara_icon[karaok_prog_icon_prog_bg].x, ui_para->uipara_icon[karaok_prog_icon_prog_bg].y);
		
		cur_time   = robin_get_cur_time();
		total_time = robin_get_total_time();
		if(cur_time > total_time)
		{
			cur_time = total_time;
		}

		if((!ui_para->uipara_icon[karaok_prog_icon_prog_cursor].res_hdl[0])||(!ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].res_hdl[0]))
		{
			com_memdev_delete();			
			return EPDK_FAIL;
		}			
		pbmp_cursor= dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].res_hdl[0]);
		if(cur_time <= 0 || total_time <= 0)
		{
			n = 0;
		}
		else
		{
			n = ((ui_para->uipara_icon[karaok_prog_icon_prog_bg].w-ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].w) * cur_time)/((ui_para->uipara_icon[karaok_prog_icon_prog_cursor].w) * total_time);
		}
		GUI_BMP_Draw(pbmp_cursor, ui_para->uipara_icon[karaok_prog_icon_prog_cursor].x + (n-1)*ui_para->uipara_icon[karaok_prog_icon_prog_cursor].w
	             ,ui_para->uipara_icon[karaok_prog_icon_prog_right_cursor].y);
	}
	GUI_SetDrawMode(GUI_DRAWMODE_NORMAL);
	com_memdev_delete();			
	return EPDK_OK;
}


static __s32 karaok_prog_draw(karaok_prog_scene_t *scene_para)
{
	karaok_prog_uipara_t *ui_para;		
	__s32 j;
	void *pbmp;
	void *Pre_Bmp;	
	void *Play_Bmp;
	void *Pause_Bmp;
	void *Next_Bmp;
	void *Mode_Bmp;
	ui_para = (karaok_prog_uipara_t *)karaok_prog_get_uipara(GUI_GetScnDir());	
	if(NULL == ui_para)
	{
		__msg("karaok_prog_get_uipara fail...\n");
		return EPDK_FAIL;
	}

	if(!scene_para)
	{
		__wrn("invalid para...\n");
		return EPDK_FAIL;
	}

	if(!scene_para->hlyr)
	{
		__msg("scene_para->hlyr is null..., do not paint\n");
		return EPDK_FAIL;
	}
 
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(scene_para->hlyr))
	{
		__msg("GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(scene_para->hlyr), do not paint...\n");
		return EPDK_FAIL;
	}
	for(j = 0 ; j < KARAOK_PROG_MAX_ICON_RES_NUM ; j++)
	{
		if(ui_para->uipara_bg.res_hdl[j])
		{
			pbmp = dsk_theme_hdl2buf(ui_para->uipara_bg.res_hdl[j]);
			if(!pbmp)
			{
				__wrn("dsk_theme_hdl2buf fail...\n");
				continue;
			}
			GUI_BMP_Draw(pbmp, ui_para->uipara_bg.x, ui_para->uipara_bg.y);
		}
	}	
	Pre_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_pre].res_hdl[0]);
	if(!Pre_Bmp)
	{
		__wrn("Pre_Bmp is null...\n");
		return EPDK_FAIL;
	}
	GUI_BMP_Draw(Pre_Bmp,ui_para->uipara_icon[karaok_prog_icon_pre].x,ui_para->uipara_icon[karaok_prog_icon_pre].y);
	{
		__cedar_status_t sta;						
		Play_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_play].res_hdl[0]);
		if(!Play_Bmp)
		{
			__wrn("Play_Fc_Bmp is null...\n");
			return EPDK_FAIL;
		}
		Pause_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_play].res_hdl[1]);
		if(!Pause_Bmp)
		{
			__wrn("Play_Fc_Bmp is null...\n");
			return EPDK_FAIL;
		}
		sta = robin_get_fsm_status();
		if(CEDAR_STAT_PLAY == sta)
		{	
			GUI_BMP_Draw(Play_Bmp, ui_para->uipara_icon[karaok_prog_icon_play].x, ui_para->uipara_icon[karaok_prog_icon_play].y);
		}
		else
		{						
			GUI_BMP_Draw(Pause_Bmp, ui_para->uipara_icon[karaok_prog_icon_play].x, ui_para->uipara_icon[karaok_prog_icon_play].y);
		}							
	}
	Next_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_next].res_hdl[0]);
	if(!Next_Bmp)
	{
		__wrn("Next_Bmp is null...\n");
		return EPDK_FAIL;
	}
	GUI_BMP_Draw(Next_Bmp, ui_para->uipara_icon[karaok_prog_icon_next].x, ui_para->uipara_icon[karaok_prog_icon_next].y);
	
	Mode_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_mode].res_hdl[0]);
	if(!Mode_Bmp)
	{
		__wrn("Next_Bmp is null...\n");
		return EPDK_FAIL;
	}
	GUI_BMP_Draw(Mode_Bmp, ui_para->uipara_icon[karaok_prog_icon_mode].x, ui_para->uipara_icon[karaok_prog_icon_mode].y);
	return EPDK_OK;
}

static __s32 karaok_prog_touch(__gui_msg_t *msg)
{
	__u32 cur_time,total_time;
	__s32 width, x, y, pos_x, pos_y;
	karaok_prog_scene_t* scene_para;
	karaok_prog_uipara_t *ui_para;
	karaok_man_uipara_t  *man_ui_para;
	__cedar_status_t fsm_sta;
	void *Pre_Fc_Bmp;	
	void *Play_Fc_Bmp;	
	void *Paus_Fc_Bmp;
	void *Mode_Fc_Bmp;	
	void *Next_Fc_Bmp;
	RECT Win_Rect;
	man_ui_para = karaok_man_get_uipara(GUI_GetScnDir());	
	ui_para = (karaok_prog_uipara_t *)karaok_prog_get_uipara(GUI_GetScnDir());
	if(!ui_para)
	{
		__wrn("invalid para...\n");
		return EPDK_FAIL;
	}
	scene_para = GUI_WinGetAttr(msg->h_deswin);
	if (!scene_para)
	{
		__wrn("invalid para...\n");
		return EPDK_FAIL;
	}
	x = LOSWORD(msg->dwAddData2);
	y = HISWORD(msg->dwAddData2);
//	eDbug("-- karaok prog  x = %d,  y = %d  dw1 = %d-- \n", x, y,msg->dwAddData1);
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(scene_para->hlyr) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(scene_para->hlyr)))
	{
		Funprintf("--lyr fail--\n");
		return EPDK_FAIL;
	}
	GUI_LyrWinSel(scene_para->hlyr);
	karaok_prog_reset_timer(scene_para);
	switch(msg->dwAddData1)
	{
		case GUI_MSG_TOUCH_UP:
		{
			if(scene_para->TouchMoveFlag)
			{
				scene_para->TouchMoveFlag = 0;
				return EPDK_FAIL;
			}
			if(GUI_WinGetCaptureWin() == msg->h_deswin)
			{
				GUI_WinReleaseCapture();
			}
			if(x>=ui_para->uipara_icon[karaok_prog_icon_prog_bg].x&&x<=ui_para->uipara_icon[karaok_prog_icon_prog_bg].x+ui_para->uipara_icon[karaok_prog_icon_prog_bg].w
				&&y>=ui_para->uipara_icon[karaok_prog_icon_prog_bg].y&&y<=ui_para->uipara_icon[karaok_prog_icon_prog_bg].y+ui_para->uipara_icon[karaok_prog_icon_prog_bg].h)
			{	
				total_time = robin_get_total_time();
				width = ui_para->uipara_icon[karaok_prog_icon_prog_bg].w;
				cur_time = (x - ui_para->uipara_icon[karaok_prog_icon_prog_cursor].x)*total_time/width;
				robin_set_cmd_jump(cur_time);
			}	
			else if(y>=ui_para->uipara_icon[karaok_prog_icon_play].y&&y<=(ui_para->uipara_icon[karaok_prog_icon_play].y+
				ui_para->uipara_icon[karaok_prog_icon_play].h))
			{
				if(x>=ui_para->uipara_icon[karaok_prog_icon_pre].x&&x<=ui_para->uipara_icon[karaok_prog_icon_pre].x+
					ui_para->uipara_icon[karaok_prog_icon_pre].w)
				{
					Pre_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_pre].res_hdl[0]);
					if(!Pre_Fc_Bmp)
					{
						Funprintf("\n\n--Pre_Fc_Bmp is null...\n\n");
						return EPDK_FAIL;
					}
					GUI_BMP_Draw(Pre_Fc_Bmp, ui_para->uipara_icon[karaok_prog_icon_pre].x, ui_para->uipara_icon[karaok_prog_icon_pre].y);				
					karaok_cmd2parent(msg->h_deswin, karaok_prog_scene_msg_pre, 0, 0);
				}
				else if(x>=ui_para->uipara_icon[karaok_prog_icon_play].x&&x<=ui_para->uipara_icon[karaok_prog_icon_play].x+
					ui_para->uipara_icon[karaok_prog_icon_play].w)
				{
					__cedar_status_t sta;
					Play_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_play].res_hdl[0]);
					if(!Play_Fc_Bmp)
					{
						__wrn("Play_Fc_Bmp is null...\n");
						return EPDK_FAIL;
					}
					Paus_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_play].res_hdl[1]);
					if(!Paus_Fc_Bmp)
					{
						__wrn("Play_Fc_Bmp is null...\n");
						return EPDK_FAIL;
					}
					sta = robin_get_fsm_status();
					if(CEDAR_STAT_PLAY == sta)
					{
						GUI_BMP_Draw(Paus_Fc_Bmp, ui_para->uipara_icon[karaok_prog_icon_play].x, ui_para->uipara_icon[karaok_prog_icon_play].y);
						karaok_cmd2parent(msg->h_deswin, karaok_prog_scene_msg_playpause, 0, 0);
					}
					else
					{
						GUI_BMP_Draw(Play_Fc_Bmp, ui_para->uipara_icon[karaok_prog_icon_play].x, ui_para->uipara_icon[karaok_prog_icon_play].y);
						karaok_cmd2parent(msg->h_deswin, karaok_prog_scene_msg_playpause,1, 0);
					}
				}
				else if(x>=ui_para->uipara_icon[karaok_prog_icon_next].x&&x<=ui_para->uipara_icon[karaok_prog_icon_next].x+
					ui_para->uipara_icon[karaok_prog_icon_next].w)
				{			
					Next_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_next].res_hdl[0]);
					if(!Next_Fc_Bmp)
					{				
						Funprintf("\n\n--Next_Fc_Bmp is null...\n\n");						
						return EPDK_FAIL;
					}
					GUI_BMP_Draw(Next_Fc_Bmp, ui_para->uipara_icon[karaok_prog_icon_next].x, ui_para->uipara_icon[karaok_prog_icon_next].y);
					karaok_cmd2parent(msg->h_deswin, karaok_prog_scene_msg_next, 0, 0);
				}
				else
				{
					karaok_prog_need_jump = 0;
					return EPDK_OK;
				}
			}
			else if(y>=ui_para->uipara_icon[karaok_prog_icon_mode].y&&y<=(ui_para->uipara_icon[karaok_prog_icon_mode].y+
				ui_para->uipara_icon[karaok_prog_icon_mode].h))
			{
				if(x>=ui_para->uipara_icon[karaok_prog_icon_mode].x&&x<=ui_para->uipara_icon[karaok_prog_icon_mode].x+
					ui_para->uipara_icon[karaok_prog_icon_mode].w)
				{
					__audstream_profile_t track_para; 					
					//robin_get_track_info(&track_para);					
					scene_para->track = !scene_para->track;
					//track = (robin_get_track_index()+1)%track_para.nAudStrmNum;    				
					Funprintf("--here-- = %d\n",track);
					if(0 == track)
					{			
						Mode_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_mode].res_hdl[0]);
					}
					else if(1 == track)
					{						
						Mode_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_mode].res_hdl[1]);
					}		
					else
					{						
						Mode_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_mode].res_hdl[0]);
					}
					if(!Mode_Fc_Bmp)
					{
						__wrn("--Mode_Fc_Bmp is null...\n");
						return EPDK_FAIL;
					}					
					GUI_BMP_Draw(Mode_Fc_Bmp, ui_para->uipara_icon[karaok_prog_icon_mode].x, ui_para->uipara_icon[karaok_prog_icon_mode].y);	
					karaok_cmd2parent(msg->h_deswin, karaok_prog_scene_msg_track,scene_para->track,0);
					return EPDK_FAIL;
				}
			}		
			else
			{
				if(karaok_prog_lyrhide == scene_para->prog_lyr_status)
				{
					scene_para->prog_lyr_status= karaok_prog_lyrshow;
				}
				else
				{
					scene_para->prog_lyr_status = karaok_prog_lyrhide;
				}
				karaok_prog_scene_movelayer(scene_para);
				break;
			}		
			karaok_prog_need_jump = 0;
			break;
		}
		case GUI_MSG_TOUCH_DOWN:
		{
			if (GUI_WinGetCaptureWin() != msg->h_deswin)
			{
	      		GUI_WinSetCaptureWin(msg->h_deswin);
			}
#if 0
			if(x>=ui_para->uipara_icon[karaok_prog_icon_prog_bg].x&&x<=ui_para->uipara_icon[karaok_prog_icon_prog_bg].x+ui_para->uipara_icon[karaok_prog_icon_prog_bg].w
				&&y>=ui_para->uipara_icon[karaok_prog_icon_prog_bg].y&&(y<=ui_para->uipara_icon[karaok_prog_icon_prog_bg].y+ui_para->uipara_icon[karaok_prog_icon_prog_bg].h))
			{	
				karaok_prog_need_jump = 1;
				total_time = robin_get_total_time();
				width = ui_para->uipara_icon[karaok_prog_icon_prog_bg].w;
				cur_time = (x - ui_para->uipara_icon[karaok_prog_icon_prog_cursor].x)*total_time/width;
				karaok_prog_paint_update(scene_para, cur_time);
			}
 			if(y>=ui_para->uipara_icon[karaok_prog_icon_play].y&&y<=(ui_para->uipara_icon[karaok_prog_icon_play].y+ ui_para->uipara_icon[karaok_prog_icon_play].h))
			{
				if(x>=ui_para->uipara_icon[karaok_prog_icon_pre].x&&x<=ui_para->uipara_icon[karaok_prog_icon_pre].x+
					ui_para->uipara_icon[karaok_prog_icon_pre].w)
				{
					Funprintf("--karaok next touch--\n");
					Pre_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_pre].res_hdl[1]);
					if(!Pre_Fc_Bmp)
					{
						__wrn("Pre_Fc_Bmp is null...\n");
						return EPDK_FAIL;
					}
					GUI_BMP_Draw(Pre_Fc_Bmp, ui_para->uipara_icon[karaok_prog_icon_pre].x, ui_para->uipara_icon[karaok_prog_icon_pre].y);
				}
				else if(x>=ui_para->uipara_icon[karaok_prog_icon_next].x&&x<=ui_para->uipara_icon[karaok_prog_icon_next].x+
					ui_para->uipara_icon[karaok_prog_icon_next].w)
				{			
					Funprintf("--karaok next touch--\n");
					Next_Fc_Bmp = dsk_theme_hdl2buf(ui_para->uipara_icon[karaok_prog_icon_next].res_hdl[1]);
					if(!Next_Fc_Bmp)
					{
						__wrn("Next_Fc_Bmp is null...\n");
						return EPDK_FAIL;
					}
					GUI_BMP_Draw(Next_Fc_Bmp, ui_para->uipara_icon[karaok_prog_icon_next].x, ui_para->uipara_icon[karaok_prog_icon_next].y);
				}
				else
				{
					return EPDK_OK;
				}
			}				
#endif
			break;
		}
		case GUI_MSG_TOUCH_MOVE:
		{

			if(karaok_prog_lyrshow == scene_para->prog_lyr_status)
			{
				if (GUI_WinGetCaptureWin() != msg->h_deswin)
				{
					GUI_WinSetCaptureWin(msg->h_deswin);
				}
			}
			if((last_point_x-x) > 10 || (last_point_x-x) < -10)
			{	
				if(x>=ui_para->uipara_icon[karaok_prog_icon_prog_bg].x&&x<=ui_para->uipara_icon[karaok_prog_icon_prog_bg].x+ui_para->uipara_icon[karaok_prog_icon_prog_bg].w
					&&y>=ui_para->uipara_icon[karaok_prog_icon_prog_bg].y&&y<=ui_para->uipara_icon[karaok_prog_icon_prog_bg].y+ui_para->uipara_icon[karaok_prog_icon_prog_bg].h)
				{		
					total_time = robin_get_total_time();
					width = ui_para->uipara_icon[karaok_prog_icon_prog_bg].w;
					cur_time = (x - ui_para->uipara_icon[karaok_prog_icon_prog_cursor].x)*total_time/width;
					karaok_prog_paint_update(scene_para, cur_time);
					last_point_x = x;
					karaok_prog_need_jump = 1;
				}
				else if(karaok_prog_lyrhide == scene_para->prog_lyr_status)
				{
					scene_para->TouchMoveFlag = 1;
					if(GUI_WinGetCaptureWin() == msg->h_deswin)
					{
						GUI_WinReleaseCapture();
					}
				}
			}			
			break;
		}
		default:
			break;
	}
	return EPDK_OK;
}

static __s32 karaok_prog_scene_movelayer(karaok_prog_scene_t *scene_para)
{

	if(scene_para->hlyr)
	{

		if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(scene_para->hlyr) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(scene_para->hlyr)))
		{
			Funprintf("--lyr fail--\n");
			return EPDK_FAIL;
		}
		if(karaok_prog_lyrshow == scene_para->prog_lyr_status)
		{
			gscene_hbar_set_state(HBAR_ST_SHOW);
			GUI_LyrMove(scene_para->hlyr,0,-250);
		}
		else if(karaok_prog_lyrhide == scene_para->prog_lyr_status)
		{
			gscene_hbar_set_state(HBAR_ST_HIDE);
			GUI_LyrMove(scene_para->hlyr,0,250);
		}
		else
		{
			__wrn("-- karaok prog lyr status fail--\n");
			return EPDK_FAIL;
		}
	}
	else
	{
		Funprintf("-- karaok prog lyr is NULL--\n");
		return EPDK_FAIL;
	}
	return EPDK_OK;
}

__s32 karaok_prog_scene_set_focus(void *handle)
{
	karaok_prog_scene_t *scene_para;
	scene_para = (karaok_prog_scene_t *)handle;
	if(NULL == handle)
	{
		__wrn("invalid para..\n");
		return EPDK_FAIL;
	}

	if(!scene_para->hfrm)
	{
		__wrn("invalid para..\n");
		return EPDK_FAIL;
	}
	GUI_WinSetFocusChild(scene_para->hfrm);
	return EPDK_OK;
}

H_WIN karaok_prog_scene_get_hwnd(void *handle)
{
	karaok_prog_scene_t *scene_para;
	scene_para = (karaok_prog_scene_t *)handle;
	if(NULL == handle)
	{
		__wrn("invalid para..\n");
		return EPDK_FAIL;
	}

	return scene_para->hfrm;
}
