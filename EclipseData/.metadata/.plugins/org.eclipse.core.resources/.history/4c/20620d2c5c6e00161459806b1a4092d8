/*
*********************************************************************************************************
*											        ePDK
*						            the Easy Portable/Player Develop Kits
*									           ir key driver
*
*						        (c) Copyright 2006-2007, Steven.ZGJ China
*											All	Rights Reserved
*
* File    : touchpanel_main.c
* By      : Jerry
* Version : V1.00
*********************************************************************************************************
*/
#include  "touchpanel_main.h"
#include  "ts/ts_filter.h"
#include  "bsp_rk.h"

#define LOBYTE(w)               ((__u8)(w))
#define HIBYTE(w)               ((__u8)(((__u16)(w) >> 8) & 0xFF))

#define TS_PRINT_IIC_DATA 0
#define TS_RESET_PERIOD 5	//10
#define TS_FIRST_RESET_PERIOD 5	//10

#define TABLE_SIZE(a) (sizeof(a)/sizeof(a[0]))

//#define GOODIX_MULTI_TOUCH

#define SSD2532_MULTI_TOUCH

#if defined(GOODIX_MULTI_TOUCH)	
    #define MAX_FINGER_NUM 1
#elif defined(SSD2532_MULTI_TOUCH)                   
    #define MAX_FINGER_NUM 1                //SSD2532锟斤拷锟斤拷锟街э拷锟斤拷锟街革拷锟轿�2.
#else	
    #define MAX_FINGER_NUM 1				//锟斤拷锟街э拷锟斤拷锟街革拷锟�(<=5)#endif
#endif

#define READ_TOUCH_ADDR_H   0x0F
#define READ_TOUCH_ADDR_L   0x40

#define MULTITOUCH_MIN_ZOOM_IN_DIS  100     //锟斤拷指锟斤拷为2时锟斤拷锟叫讹拷锟斤拷锟斤拷锟斤拷效锟斤拷锟侥撅拷锟斤拷
#define MULTITOUCH_MIN_ZOOM_OUT_DIS  -100     

/* GW:youqideng modified*/
#define X_INDEX  6
#define Y_INDEX 4
#define TOUCH_INDEX  0
#define TOUCH_BYTES 4
#define ID_INDEX 7
#define TOUCH_META_DATA  4
#define DATA_SIZE (MAX_FINGER_NUM * TOUCH_BYTES + TOUCH_META_DATA)


#define DMA_TRANS_LEN		0x20
#define GSL_PAGE_REG		0xf0

__u8 touch_data[DATA_SIZE];

u32 id_sign[MAX_FINGER_NUM+1] = {0};
u8 id_state_flag[MAX_FINGER_NUM+1] = {0};
u8 id_state_old_flag[MAX_FINGER_NUM+1] = {0};
u16 x_old[MAX_FINGER_NUM+1] = {0};
u16 y_old[MAX_FINGER_NUM+1] = {0};
u16 x_new = 0;
u16 y_new = 0;
static __u16 x_temp = 0;
static __u16 y_temp = 0;
static __s32 tp_up_sem = 0;
static __pos_t last_down_pos;


static __u8 g_iic_slave_addr[]=
{
	//0x5d,//GT827
	0x80,//SSD2532
	
};

//init addr
static __u8 g_iic_init_addr_gt827[]=
{
    0x80, 0x0f
};

typedef struct
{
    __u8* addr;
	__s32 len;
}iic_init_data_addr_t;

static iic_init_data_addr_t g_iic_init_data_addr[]=
{
   {g_iic_init_addr_gt827, sizeof(g_iic_init_addr_gt827)},//GT827 init addr
   
};

//init data
static __u8 g_iic_init_data_gt827[]=
{
	0x1C,0x0D,0x1B,0x0C,0x1A,0x0B,0x19,0x0A,

	0x18,0x09,0x17,0x08,0x16,0x07,0x15,0x06,
	
	0x14,0x05,0x13,0x04,0x12,0x03,0x11,0x02,
	
	0xFF,0x14,0xFF,0x02,0x01,0x00,0x12,0x08,
	
	0x11,0x07,0x10,0x06,0x0F,0x05,0x0E,0x04,
	
	0x0D,0x03,0x0C,0x02,0xFF,0x0F,0xFF,0xFE,
	
	0x10,0xFC,0x0F,0x03,0x30,0x10,0x10,0x15,
	
	0x00,0x00,0x04,0x00,0x00,0x0E,0x4A,0x36,
	
	0x1C,0x03,0x00,0x05,0x00,0x01,0xE0,0x03,
	
	0x20,0x6E,0x64,0x73,0x68,0x05,0x00,0x23,
	
	0x19,0x05,0x14,0x10,0x00,0x01,0x00,0x00,
	
	0x00,0x00,0x00,0x00,0x4A,0x36,0x30,0x20,
	
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01
};

typedef struct
{
	__u8* addr;
	__s32 len;
}iic_init_data_t;

static iic_init_data_t g_iic_init_data[]=
{
	{g_iic_init_data_gt827, sizeof(g_iic_init_data_gt827)},//GT827
	
};



extern  __touchpanel_drv_t   touchpanel_drv;/* tp锟斤拷锟斤拷注锟斤拷锟斤拷息  */
extern  _tp_private_data_set_t  tp_private;

__tp_info_set_t tp_info    = {0};/* 指锟斤拷锟狡讹拷锟斤拷锟斤拷锟斤拷为一锟斤拷move锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷息锟斤拷频锟斤拷 */

static __ev_tp_msg_t   drv_tp_msg = {0};/* TP锟斤拷息锟斤拷锟斤拷锟斤拷锟斤拷锟疥及锟斤拷锟斤拷锟斤拷息 */
static __tp_point_t    tp_point   = {0};/* 锟芥储锟斤拷锟斤拷锟斤拷锟斤拷息锟斤拷锟斤拷锟皆讹拷锟斤拷识锟斤拷锟斤拷 */

static  __s32      xy_first_point[5] = {0};/* 锟斤拷一锟斤拷锟斤拷锟斤拷锟斤拷 */
static  __u32      acount     = 0;/* 锟斤拷前锟斤拷锟斤拷锟斤拷锟脚碉拷位锟斤拷 */
static  __u32      data_index = 0;/* 锟斤拷锟斤拷锟矫碉拷锟斤拷锟杰碉拷锟斤拷 */
static  __u32      pre_action = 0;/* 前一锟轿的讹拷锟斤拷锟斤拷锟斤拷 */
static  __s32      tp_flag    = 0;/* 锟剿诧拷锟斤拷锟狡讹拷锟斤拷锟斤拷锟叫匡拷锟斤拷压锟斤拷锟斤拷锟斤拷 */
static  __u32      sid        = 0;/* sid--锟角凤拷装锟斤拷锟斤拷 */
static  __u32      x_revert   = 0;
static  __u32      y_revert   = 0;

static __u8		   move_horizontal = 0;
static __u8		   move_verital = 0;
static __u8		   move_direction = EV_TP_ACTION_NULL;

/* 锟斤拷锟斤拷识锟斤拷 */
static __u32       dual_point = 0; /* 0: one point ; 1: two point   */
static __u32       sd_change  = 0; /* 锟侥变处锟斤拷模式锟斤拷1锟斤拷锟斤拷锟�2锟斤拷拇锟斤拷锟斤拷谢锟斤拷锟街�  */
static __u32       dual_first = 0; /* 锟斤拷始锟斤拷锟斤拷tp识锟斤拷                */
static __u32       dual_fp    = 0; /* 识锟斤拷锟揭伙拷锟斤拷锟斤拷锟斤拷锟斤拷            */
static __u32       dual_cnt   = 0; /* tp锟斤拷锟斤拷锟斤拷锟斤拷锟�                  */
static __u32       dual_fixed = 0; /* 一锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷模式锟襟不伙拷锟叫伙拷锟斤拷一锟斤拷模式锟斤拷锟斤拷锟斤拷抬锟斤拷 */
static __u32       dual_up    = 0; /* 锟脚达拷锟斤拷小锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷只锟斤拷5-8锟斤拷,锟斤拷锟斤拷锟斤拷keyup锟斤拷息锟斤拷锟斤拷 */

static __s32       pinch_cnt  = 0; /* 锟斤拷锟斤拷锟斤拷示锟脚大，革拷锟斤拷锟斤拷示锟斤拷小    */
static __u32       pinch_out  = 0; /* pinch out锟斤拷锟皆ｏ拷锟斤拷模式锟叫伙拷锟斤拷锟斤拷锟斤拷使锟斤拷 */
static __u32       pinch_up   = 0; /* 锟角凤拷锟斤拷要锟斤拷抬锟斤拷锟绞憋拷锟斤拷榉拷锟揭伙拷锟絧inch锟斤拷锟斤拷锟斤拷锟斤拷息 */

static __u32       bak_index  = 0; /* 锟斤拷锟斤拷锟斤拷index锟斤拷  */
static __u32       hold_flag  = 0; /* pinch hold锟斤拷锟斤拷锟斤拷 */
static __u32       send_first = 0; /* 锟斤拷证锟斤拷锟酵碉拷一锟斤拷锟街� */


/* tp硬锟斤拷锟斤拷始锟斤拷锟斤拷锟斤拷  */
static  __s32      tp_samp_level = 0; /* 锟斤拷锟斤拷锟斤拷频锟斤拷,0,1,2,3锟侥革拷锟饺硷拷锟街憋拷锟接�1,2,4,8khz锟侥诧拷锟斤拷频锟斤拷 */
static  __u32      tp_fifo_levle = 0; /* fifo锟斤拷锟斤拷锟斤拷锟斤拷 */
static  __u32      tp_sensy_level = 0;/* 锟斤拷锟斤拷锟饺碉拷锟斤拷 */


static __s32 tp_gesture_recognize(int *data_x, int *data_y, int count,int *xy_fp);
static __u32 tp_flick_speed(int *data_x, int *data_y, int count, int dir);
static void tp_dualpoint_catch_data(void);

static __s32 iic_write_16_32(__u8*  addr,__s32 addr_len, __u32 data);

static __s32 iic_write_bytes(__u8*  addr, __s32 addr_len, __u8 *data, __s32 data_len);

static __s32 iic_read_bytes(__u8*  addr, __s32 addr_len, __u8 *data, __s32 data_len);

static __s32 ctp_reset(void);

static __s32 ctp_iic_pre_cmd(void);

static __s32 ctp_iic_end_cmd(void);

static __s32 iic_write_bytes_end_cmd(__u8*  addr, __s32 addr_len, __u8 *data, __s32 data_len);

static __s32 iic_read_bytes_end_cmd(__u8*  addr, __s32 addr_len, __u8 *data, __s32 data_len);

//;;0:positive 1: negative
static __s32 ctp_set_irq_mode(void);

static __s32 ctp_set_work_mode(__drv_tp_workmode_t mode);

__bool    (*tp_isr_task_p)(__s32 irq) = NULL;

void     (*tp_catch_data)(void) = NULL;

#define TP_FIRST_DELAY_FILTER (0)

/*GW:wangruipeng 2012-7-3 modified for ssd begin*/
#if 1
#define SSD253x_REPORT_COORD_ORIGIN		0x06
#define SSD253x_REPORT_RATE_TIME		0X0F


struct ChipSetting {
	char No;
	char Reg;
	char Data1;
	char Data2;
};


struct fw_data
{
    u32 offset : 8;
    u32 : 0;
    u32 val;
};




struct ChipSetting SSD_Test[]={{ 0, 0x00, 0x00, 0x00},	// SSD2533 test
                           };

struct ChipSetting Reset[]={{ 0, 0x04, 0x00, 0x00},	// SSD2533
                           };

static struct fw_data GSLX680_FW[] = {

{0xf0,0x2},
{0x00,0x00000000},
{0x04,0x00000000},
{0x08,0x00000000},
{0x0c,0x00000000},
{0x10,0x00000000},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000000},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0xf801001f},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x0a0f0a0f},
{0xf0,0x3},
{0x00,0x26d1a029},
{0x04,0x00000000},
{0x08,0x00000000},
{0x0c,0x00000000},
{0x10,0x00000000},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00005100},
{0x28,0x0000df00},
{0x2c,0x00000000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000000},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x1a0ac00a},
{0x68,0x00000002},
{0x6c,0x0000000f},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0xffffffec},
{0x7c,0x00000000},
{0xf0,0x4},
{0x00,0x00000000},
{0x04,0x00000000},
{0x08,0x00000064},
{0x0c,0x00000000},
{0x10,0xfe0cff06},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x00010000},
{0x34,0x00666fff},
{0x38,0x0000000a},
{0x3c,0x00000258},
{0x40,0x00000000},
{0x44,0x04020a00},
{0x48,0x0014012c},
{0x4c,0x9a060005},
{0x50,0x00000000},
{0x54,0x00010203},
{0x58,0x04050607},
{0x5c,0x08090a0b},
{0x60,0x0c0d0e0f},
{0x64,0x10111213},
{0x68,0x14151617},
{0x6c,0x18191a1b},
{0x70,0x1c1d1e1f},
{0x74,0x0014000a},
{0x78,0x80808080},
{0x7c,0xcba981f4},
{0xf0,0x5},
{0x00,0x00000000},
{0x04,0x00000005},
{0x08,0x000000b4},
{0x0c,0x667a667a},
{0x10,0x0000000a},
{0x14,0x00000000},
{0x18,0x00000fff},
{0x1c,0x10000000},
{0x20,0x10000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x80808080},
{0x34,0x80808080},
{0x38,0x80808080},
{0x3c,0x80808080},
{0x40,0x80808080},
{0x44,0x80808080},
{0x48,0x80808080},
{0x4c,0x80808000},
{0x50,0xffffffff},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000221},
{0x78,0x0000000f},
{0x7c,0x0000000a},
{0xf0,0x6},
{0x00,0x0000000f},
{0x04,0x00000000},
{0x08,0x0000000a},
{0x0c,0x04040403},
{0x10,0x00000032},
{0x14,0x140a140a},
{0x18,0x00000000},
{0x1c,0x00000001},
{0x20,0x00002904},
{0x24,0x000001e0},
{0x28,0x00000320},
{0x2c,0xf801001f},
{0x30,0xf801001f},
{0x34,0x00000005},
{0x38,0x00000003},
{0x3c,0x00000fff},
{0x40,0x80000000},
{0x44,0x001c001c},
{0x48,0x00000fff},
{0x4c,0x04040403},
{0x50,0x00020001},
{0x54,0x00000064},
{0x58,0x00004000},
{0x5c,0x1b6db688},
{0x60,0x20100804},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000096},
{0x78,0x000a003c},
{0x7c,0x00000000},
{0xf0,0x7},
{0x00,0x01040007},
{0x04,0x03060209},
{0x08,0x0508040a},
{0x0c,0x07110610},
{0x10,0x09130812},
{0x14,0x00123456},
{0x18,0x00000000},
{0x1c,0x000a0014},
{0x20,0x00001081},
{0x24,0xff080010},
{0x28,0xff080120},
{0x2c,0xff080140},
{0x30,0xff080160},
{0x34,0x000d00e1},
{0x38,0x000a00c3},
{0x3c,0x000a00a5},
{0x40,0x00000000},
{0x44,0x00640096},
{0x48,0x40100104},
{0x4c,0x320f0f03},
{0x50,0x00000000},
{0x54,0x00000004},
{0x58,0x00050000},
{0x5c,0x000b0006},
{0x60,0x000d000c},
{0x64,0x000e000e},
{0x68,0x00050000},
{0x6c,0x00050000},
{0x70,0x00010000},
{0x74,0x00000000},
{0x78,0x00012345},
{0x7c,0x006789ab},
{0xf0,0x8},
{0x00,0x034f032f},
{0x04,0x030f02ef},
{0x08,0x02cf02af},
{0x0c,0x228f226f},
{0x10,0x21f921f8},
{0x14,0x21f721f6},
{0x18,0x41f541f4},
{0x1c,0x71f301fa},
{0x20,0x01f401f5},
{0x24,0x01f601f7},
{0x28,0x01f801f9},
{0x2c,0x01fa0000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x01030507},
{0x44,0x09000000},
{0x48,0x00000000},
{0x4c,0x02040608},
{0x50,0x0a000000},
{0x54,0x00000000},
{0x58,0x00070006},
{0x5c,0x00000008},
{0x60,0x0000012c},
{0x64,0x00030201},
{0x68,0x00080604},
{0x6c,0x0000009a},
{0x70,0x000000cd},
{0x74,0x00000074},
{0x78,0x00000000},
{0x7c,0x0000000a},
{0xf0,0x9},
{0x00,0xff080094},
{0x04,0x00070011},
{0x08,0xff080090},
{0x0c,0x00040000},
{0x10,0xff080068},
{0x14,0x00030000},
{0x18,0xff080064},
{0x1c,0x01002582},
{0x20,0xff080060},
{0x24,0x00000000},
{0x28,0xff08004c},
{0x2c,0x00197fff},
{0x30,0xfffffff0},
{0x34,0x00000000},
{0x38,0xfffffff0},
{0x3c,0x00000000},
{0x40,0xfffffff0},
{0x44,0x00000000},
{0x48,0xfffffff0},
{0x4c,0x00000000},
{0x50,0xfffffff0},
{0x54,0x00000000},
{0x58,0xfffffff0},
{0x5c,0x00000000},
{0x60,0xfffffff0},
{0x64,0x00000000},
{0x68,0xfffffff0},
{0x6c,0x00000000},
{0x70,0xfffffff0},
{0x74,0x00000000},
{0x78,0xfffffff0},
{0x7c,0x00000000},
/*
{0xf0,0xe0},
{0x00,0x00030000},
{0x04,0x00200012},
{0x08,0x003d0031},
{0x0c,0x003f003e},
{0x10,0x0025003a},
{0x14,0x002a0036},
{0x18,0x0030003a},
{0x1c,0x003c0030},
{0x20,0x0034003a},
{0x24,0x003a0037},
{0x28,0x0036003f},
{0x2c,0x00320036},
{0x30,0x00480046},
{0x34,0x00440040},
{0x38,0x004b0049},
{0x3c,0x0049005b},
{0x40,0x006401f4},
{0x44,0x00640064},
{0x48,0x01900064},
{0x4c,0x00500190},
{0x50,0x00500050},
{0x54,0x012c0050},
{0x58,0x012c012c},
{0x5c,0x0032012c},
{0x60,0x0064000a},
{0x64,0x00640064},
{0x68,0x00000032},
{0x6c,0x00500000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
{0xf0,0xe1},
{0x00,0x00000000},
{0x04,0x00030000},
{0x08,0x00220004},
{0x0c,0x002b0025},
{0x10,0x00250035},
{0x14,0x002e0032},
{0x18,0x00350032},
{0x1c,0x00300038},
{0x20,0x003f002c},
{0x24,0x00420036},
{0x28,0x003a003b},
{0x2c,0x00480032},
{0x30,0x00460048},
{0x34,0x0052003e},
{0x38,0x005e005c},
{0x3c,0x0058005b},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000002},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
{0xf0,0xe2},
{0x00,0x00450053},
{0x04,0x00520059},
{0x08,0x0051004a},
{0x0c,0x0048004f},
{0x10,0x00520035},
{0x14,0x0051003d},
{0x18,0x0039003d},
{0x1c,0x003f0033},
{0x20,0x0037003b},
{0x24,0x003a003b},
{0x28,0x003b003c},
{0x2c,0x00370031},
{0x30,0x002d0031},
{0x34,0x00370037},
{0x38,0x002a0037},
{0x3c,0x0001000b},
{0x40,0x005f006f},
{0x44,0x0073006b},
{0x48,0x00740060},
{0x4c,0x005a0057},
{0x50,0x004a0058},
{0x54,0x003c004c},
{0x58,0x003d0036},
{0x5c,0x002f0035},
{0x60,0x00380034},
{0x64,0x00260031},
{0x68,0x00300030},
{0x6c,0x00320033},
{0x70,0x002e0028},
{0x74,0x002e0029},
{0x78,0x001d002d},
{0x7c,0x00040018},
{0xf0,0xe3},
{0x00,0x00000000},
{0x04,0x00000000},
{0x08,0x00000000},
{0x0c,0x00000000},
{0x10,0x00000000},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000000},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
{0xf0,0xe4},
{0x00,0x00000000},
{0x04,0x00000000},
{0x08,0x00000000},
{0x0c,0x00000000},
{0x10,0x00000000},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000000},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
{0xf0,0xe5},
{0x00,0x00000000},
{0x04,0x00000000},
{0x08,0x00000000},
{0x0c,0x00000000},
{0x10,0x00000000},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000000},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
{0xf0,0xe6},
{0x00,0x00000000},
{0x04,0x00000000},
{0x08,0x00000000},
{0x0c,0x00000000},
{0x10,0x00000000},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000000},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
*/



{0xf0,0x1e},
{0x00,0x5a5a0f00},
{0x04,0x00002b4c},
{0x08,0x00002bb4},
{0x0c,0x00002c2c},
{0x10,0x00002d5c},
{0x14,0x00002e48},
{0x18,0x0000301c},
{0x1c,0x000031b8},
{0x20,0x0000332c},
{0x24,0x000034f4},
{0x28,0x00003714},
{0x2c,0x00003988},
{0x30,0x00003afc},
{0x34,0x00003c04},
{0x38,0x00003cb4},
{0x3c,0x00004008},
{0x40,0x000040ac},
{0x44,0x000041b0},
{0x48,0x00004394},
{0x4c,0x00004450},
{0x50,0x00004648},
{0x54,0x0000492c},
{0x58,0x00004cc8},
{0x5c,0x00004dac},
{0x60,0x00004dec},
{0x64,0x00004f08},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
{0xf0,0x1f},
{0x00,0x00000000},
{0x04,0x00000000},
{0x08,0x00000000},
{0x0c,0x00000000},
{0x10,0x00000000},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00002644},
{0x50,0x000026f4},
{0x54,0x00000000},
{0x58,0x000027a4},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x000028c0},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00002984},
{0x78,0x00004f94},
{0x7c,0x5a5a0ffc},
{0xf0,0x0},
{0x00,0x01000000},
{0x04,0x01000000},
{0x08,0x01000000},
{0x0c,0x233fc0c0},
{0x10,0xa2146004},
{0x14,0xa4102000},
{0x18,0xe4244000},
{0x1c,0x233fc0c0},
{0x20,0xa2146010},
{0x24,0x2500003f},
{0x28,0xa414a3ff},
{0x2c,0xe4244000},
{0x30,0x01000000},
{0x34,0x821020e0},
{0x38,0x81880001},
{0x3c,0x01000000},
{0x40,0x01000000},
{0x44,0xa410200f},
{0x48,0xe4a00040},
{0x4c,0x01000000},
{0x50,0xa0100000},
{0x54,0xa2100000},
{0x58,0xa4100000},
{0x5c,0xa6100000},
{0x60,0xa8100000},
{0x64,0xaa100000},
{0x68,0xac100000},
{0x6c,0xae100000},
{0x70,0x90100000},
{0x74,0x92100000},
{0x78,0x94100000},
{0x7c,0x96100000},
{0xf0,0x1},
{0x00,0x98100000},
{0x04,0x9a100000},
{0x08,0x9c100000},
{0x0c,0x9e100000},
{0x10,0x84100000},
{0x14,0x01000000},
{0x18,0x01000000},
{0x1c,0x82100000},
{0x20,0x81900001},
{0x24,0x82100000},
{0x28,0x81980001},
{0x2c,0x81800000},
{0x30,0x01000000},
{0x34,0x01000000},
{0x38,0x01000000},
{0x3c,0xbc102cf8},
{0x40,0x9c102c78},
{0x44,0x01000000},
{0x48,0x01000000},
{0x4c,0x27001040},
{0x50,0xa614e00f},
{0x54,0xe6a00040},
{0x58,0x01000000},
{0x5c,0x40000309},
{0x60,0x01000000},
{0x64,0x01000000},
{0x68,0x10bfffff},
{0x6c,0x01000000},
{0x70,0x03169684},
{0x74,0x82106050},
{0x78,0x03296945},
{0x7c,0x82106288},
{0xf0,0x1a},
{0x00,0x9de3bf98},
{0x04,0x40000010},
{0x08,0x01000000},
{0x0c,0x40000007},
{0x10,0x01000000},
{0x14,0x400002ff},
{0x18,0x01000000},
{0x1c,0x40000015},
{0x20,0x01000000},
{0x24,0x30bffffe},
{0x28,0x82102001},
{0x2c,0x81904000},
{0x30,0x01000000},
{0x34,0x01000000},
{0x38,0x01000000},
{0x3c,0x81c3e008},
{0x40,0x01000000},
{0x44,0x03000008},
{0x48,0x82106342},
{0x4c,0xa3804000},
{0x50,0x03000004},
{0x54,0x82106000},
{0x58,0x81984000},
{0x5c,0x01000000},
{0x60,0x01000000},
{0x64,0x01000000},
{0x68,0x81c3e008},
{0x6c,0x01000000},
{0x70,0x01000000},
{0x74,0x01000000},
{0x78,0x01000000},
{0x7c,0xa7800000},
{0xf0,0x1b},
{0x00,0x01000000},
{0x04,0x01000000},
{0x08,0x01000000},
{0x0c,0x81c3e008},
{0x10,0x01000000},
{0x14,0x80a22000},
{0x18,0x02800006},
{0x1c,0x01000000},
{0x20,0x01000000},
{0x24,0x90823fff},
{0x28,0x12bffffe},
{0x2c,0x01000000},
{0x30,0x81c3e008},
{0x34,0x01000000},
{0x38,0x01000000},
{0x3c,0x05001040},
{0x40,0x8410a00f},
{0x44,0xc4a00040},
{0x48,0x01000000},
{0x4c,0x81c3e008},
{0x50,0x01000000},
{0x54,0x9de3bf18},
{0x58,0xb2067fff},
{0x5c,0x96100018},
{0x60,0xf227bf7c},
{0x64,0xc027bf78},
{0x68,0x98102000},
{0x6c,0xb007bff8},
{0x70,0xd4063f80},
{0x74,0xda063f84},
{0x78,0xb810000a},
{0x7c,0x98033fff},
{0xf0,0x1c},
{0x00,0xb0063ff8},
{0x04,0x80a2800d},
{0x08,0x16800031},
{0x0c,0xb610000d},
{0x10,0xbb2aa002},
{0x14,0x832b6002},
{0x18,0xb207400b},
{0x1c,0xb400400b},
{0x20,0xde02c01d},
{0x24,0x80a7001b},
{0x28,0x1680001c},
{0x2c,0x01000000},
{0x30,0xc2068000},
{0x34,0x80a0400f},
{0x38,0x04800005},
{0x3c,0x80a7001b},
{0x40,0xb606ffff},
{0x44,0x10bffff8},
{0x48,0xb406bffc},
{0x4c,0x16800013},
{0x50,0x80a7001b},
{0x54,0xc2068000},
{0x58,0xc2264000},
{0x5c,0xb8072001},
{0x60,0x80a7001b},
{0x64,0x1680000d},
{0x68,0xb2066004},
{0x6c,0xc2064000},
{0x70,0x80a0400f},
{0x74,0x26bffffb},
{0x78,0xb8072001},
{0x7c,0x80a7001b},
{0xf0,0x1d},
{0x00,0x16800006},
{0x04,0x01000000},
{0x08,0xc2268000},
{0x0c,0xb606ffff},
{0x10,0xb406bffc},
{0x14,0x80a7001b},
{0x18,0x12bfffe4},
{0x1c,0x80a7001b},
{0x20,0xb0062008},
{0x24,0x82073fff},
{0x28,0xc2263f84},
{0x2c,0xd4263f80},
{0x30,0x832f2002},
{0x34,0xb0062008},
{0x38,0xde22c001},
{0x3c,0xba072001},
{0x40,0xfa263f80},
{0x44,0xda263f84},
{0x48,0x98032002},
{0x4c,0x80a33fff},
{0x50,0x34bfffc9},
{0x54,0xd4063f80},
{0x58,0x81c7e008},
{0x5c,0x81e80000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
{0xf0,0x20},
{0x00,0x83580000},
{0x04,0x82086ff0},
{0x08,0x83306004},
{0x0c,0x80a06005},
{0x10,0x02800024},
{0x14,0x01000000},
{0x18,0x80a06006},
{0x1c,0x02800039},
{0x20,0x01000000},
{0x24,0x80a06015},
{0x28,0x02800051},
{0x2c,0x01000000},
{0x30,0x80a0602a},
{0x34,0x02800085},
{0x38,0x01000000},
{0x3c,0x073fc180},
{0x40,0x8610e03c},
{0x44,0x05169680},
{0x48,0x84004002},
{0x4c,0xc420c000},
{0x50,0x073fc000},
{0x54,0x8610e020},
{0x58,0x84102001},
{0x5c,0xc420c000},
{0x60,0x0500000c},
{0x64,0x01000000},
{0x68,0x01000000},
{0x6c,0x8480bfff},
{0x70,0x12bffffe},
{0x74,0x01000000},
{0x78,0x01000000},
{0x7c,0x073fc000},
{0xf0,0x21},
{0x00,0x8610e020},
{0x04,0x84102000},
{0x08,0xc420c000},
{0x0c,0x01000000},
{0x10,0x01000000},
{0x14,0x81c44000},
{0x18,0x81cc8000},
{0x1c,0x01000000},
{0x20,0xa7500000},
{0x24,0xa92ce002},
{0x28,0xa734e001},
{0x2c,0xa614c014},
{0x30,0xa60ce007},
{0x34,0x81900000},
{0x38,0x01000000},
{0x3c,0x01000000},
{0x40,0x81e00000},
{0x44,0xe03ba000},
{0x48,0xe43ba008},
{0x4c,0xe83ba010},
{0x50,0xec3ba018},
{0x54,0xf03ba020},
{0x58,0xf43ba028},
{0x5c,0xf83ba030},
{0x60,0xfc3ba038},
{0x64,0x81e80000},
{0x68,0x8194c000},
{0x6c,0x01000000},
{0x70,0x01000000},
{0x74,0x81c44000},
{0x78,0x81cc8000},
{0x7c,0x01000000},
{0xf0,0x22},
{0x00,0xa7500000},
{0x04,0xa934e002},
{0x08,0xa72ce001},
{0x0c,0xa614c014},
{0x10,0xa60ce007},
{0x14,0x81900000},
{0x18,0x01000000},
{0x1c,0x01000000},
{0x20,0x81e80000},
{0x24,0x81e80000},
{0x28,0xe01ba000},
{0x2c,0xe41ba008},
{0x30,0xe81ba010},
{0x34,0xec1ba018},
{0x38,0xf01ba020},
{0x3c,0xf41ba028},
{0x40,0xf81ba030},
{0x44,0xfc1ba038},
{0x48,0x81e00000},
{0x4c,0x81e00000},
{0x50,0x8194c000},
{0x54,0x01000000},
{0x58,0x01000000},
{0x5c,0x81c44000},
{0x60,0x81cc8000},
{0x64,0x01000000},
{0x68,0x01000000},
{0x6c,0x82102010},
{0x70,0x273fc0c0},
{0x74,0xa614e010},
{0x78,0xc224c000},
{0x7c,0x01000000},
{0xf0,0x23},
{0x00,0x033fc0c0},
{0x04,0x82106004},
{0x08,0xa6102000},
{0x0c,0xe6204000},
{0x10,0x01000000},
{0x14,0x01000000},
{0x18,0x01000000},
{0x1c,0xa6102020},
{0x20,0x83480000},
{0x24,0x82104013},
{0x28,0x81884000},
{0x2c,0x01000000},
{0x30,0x400004ad},
{0x34,0x01000000},
{0x38,0x01000000},
{0x3c,0x01000000},
{0x40,0xa7500000},
{0x44,0xa934e002},
{0x48,0xa72ce001},
{0x4c,0xa614c014},
{0x50,0xa60ce007},
{0x54,0x81900000},
{0x58,0x01000000},
{0x5c,0x81e80000},
{0x60,0xe01ba000},
{0x64,0xe41ba008},
{0x68,0xe81ba010},
{0x6c,0xec1ba018},
{0x70,0xf01ba020},
{0x74,0xf41ba028},
{0x78,0xf81ba030},
{0x7c,0xfc1ba038},
{0xf0,0x24},
{0x00,0x81e00000},
{0x04,0x8194c000},
{0x08,0x01000000},
{0x0c,0xa6102020},
{0x10,0x83480000},
{0x14,0x82284013},
{0x18,0x81884000},
{0x1c,0x01000000},
{0x20,0x033fc0c0},
{0x24,0x82106004},
{0x28,0xa6103fff},
{0x2c,0xe6204000},
{0x30,0x01000000},
{0x34,0x01000000},
{0x38,0x01000000},
{0x3c,0x81c44000},
{0x40,0x81cc8000},
{0x44,0x01000000},
{0x48,0x81c48000},
{0x4c,0x81cca004},
{0x50,0x01000000},
{0x54,0x033fc140},
{0x58,0x82106048},
{0x5c,0xda004000},
{0x60,0x03000040},
{0x64,0x808b4001},
{0x68,0x03000017},
{0x6c,0x12800004},
{0x70,0x90106380},
{0x74,0x82006400},
{0x78,0x901060c0},
{0x7c,0x81c3e008},
{0xf0,0x25},
{0x00,0x01000000},
{0x04,0x94102000},
{0x08,0x96102000},
{0x0c,0x832ae002},
{0x10,0xd20063a4},
{0x14,0x98102000},
{0x18,0x832b2002},
{0x1c,0x9b2aa002},
{0x20,0xda02000d},
{0x24,0x98032001},
{0x28,0xda224001},
{0x2c,0x80a32005},
{0x30,0x04bffffa},
{0x34,0x9402a001},
{0x38,0x9602e001},
{0x3c,0x80a2e003},
{0x40,0x04bffff4},
{0x44,0x832ae002},
{0x48,0x81c3e008},
{0x4c,0x01000000},
{0x50,0x033fc200},
{0x54,0x961060a0},
{0x58,0x98102000},
{0x5c,0x832b2002},
{0x60,0x9a03000c},
{0x64,0xda136400},
{0x68,0x98032001},
{0x6c,0x80a3200f},
{0x70,0x04bffffb},
{0x74,0xda20400b},
{0x78,0x81c3e008},
{0x7c,0x01000000},
{0xf0,0x26},
{0x00,0x82020008},
{0x04,0x82004008},
{0x08,0x9b326002},
{0x0c,0x82004001},
{0x10,0x8200400d},
{0x14,0x83286002},
{0x18,0x920a6003},
{0x1c,0x932a6003},
{0x20,0xd00065b0},
{0x24,0x91320009},
{0x28,0x81c3e008},
{0x2c,0x900a20ff},
{0x30,0x9a020008},
{0x34,0x9a034008},
{0x38,0x97326002},
{0x3c,0x9a03400d},
{0x40,0x9a03400b},
{0x44,0x920a6003},
{0x48,0x9b2b6002},
{0x4c,0x932a6003},
{0x50,0x821020ff},
{0x54,0xd80365b0},
{0x58,0x83284009},
{0x5c,0x822b0001},
{0x60,0x952a8009},
{0x64,0x8210400a},
{0x68,0xc22365b0},
{0x6c,0x912a2002},
{0x70,0xda0223a4},
{0x74,0x972ae002},
{0x78,0x81c3e008},
{0x7c,0xc223400b},
{0xf0,0x27},
{0x00,0x82102005},
{0x04,0x1b3fc200},
{0x08,0x82204008},
{0x0c,0x9a136008},
{0x10,0x83286002},
{0x14,0xd0034000},
{0x18,0x91320001},
{0x1c,0x81c3e008},
{0x20,0x900a200f},
{0x24,0x9de3bf58},
{0x28,0xa12e2002},
{0x2c,0xda1423da},
{0x30,0xd61423d8},
{0x34,0xc200247c},
{0x38,0xb022c00d},
{0x3c,0x825b4001},
{0x40,0xb21e6001},
{0x44,0x92862001},
{0x48,0x0280000c},
{0x4c,0x9a004019},
{0x50,0xb0100009},
{0x54,0x9807bfb8},
{0x58,0x8203400d},
{0x5c,0xc2168001},
{0x60,0xc2230000},
{0x64,0xc200247c},
{0x68,0x9a034001},
{0x6c,0xb0863fff},
{0x70,0x12bffffa},
{0x74,0x98032004},
{0x78,0x7ffffe77},
{0x7c,0x9007bfb8},
{0xf0,0x28},
{0x00,0xda1423ea},
{0x04,0xd61423e8},
{0x08,0x80a3400b},
{0x0c,0x92102000},
{0x10,0x1880000b},
{0x14,0xb010000d},
{0x18,0x832b6002},
{0x1c,0x8200401e},
{0x20,0x98007fb8},
{0x24,0xc2030000},
{0x28,0xb0062001},
{0x2c,0x92024001},
{0x30,0x80a6000b},
{0x34,0x08bffffc},
{0x38,0x98032004},
{0x3c,0xb022c00d},
{0x40,0xb0062001},
{0x44,0x81800000},
{0x48,0x01000000},
{0x4c,0x01000000},
{0x50,0x01000000},
{0x54,0xb0724018},
{0x58,0x81c7e008},
{0x5c,0x81e80000},
{0x60,0x9de3bf98},
{0x64,0xc200247c},
{0x68,0x83306001},
{0x6c,0x80a60001},
{0x70,0x1a800006},
{0x74,0x90100018},
{0x78,0x7fffffc2},
{0x7c,0x01000000},
{0xf0,0x29},
{0x00,0x10800006},
{0x04,0xb0020008},
{0x08,0x7fffffbe},
{0x0c,0x90260001},
{0x10,0x90020008},
{0x14,0xb0022001},
{0x18,0x81c7e008},
{0x1c,0x81e80000},
{0x20,0x9de3bf98},
{0x24,0xa8102000},
{0x28,0xc20023d4},
{0x2c,0x80a50001},
{0x30,0x1a800057},
{0x34,0xe2002348},
{0x38,0xa4102000},
{0x3c,0xc200247c},
{0x40,0x80a48001},
{0x44,0x3a80004e},
{0x48,0xa8052001},
{0x4c,0x7fffffe5},
{0x50,0x90100012},
{0x54,0xaa100008},
{0x58,0x90100014},
{0x5c,0x7fffff89},
{0x60,0x92100015},
{0x64,0x80a62000},
{0x68,0x12800004},
{0x6c,0xa0100008},
{0x70,0x10800016},
{0x74,0xa0102000},
{0x78,0x80a62009},
{0x7c,0x18800011},
{0xf0,0x2a},
{0x00,0x80a62007},
{0x04,0x7fffff54},
{0x08,0x01000000},
{0x0c,0x94100008},
{0x10,0x90100014},
{0x14,0x7fffffa4},
{0x18,0x92100012},
{0x1c,0x80a20011},
{0x20,0x04800007},
{0x24,0xa6100008},
{0x28,0x9a102008},
{0x2c,0x9a234018},
{0x30,0x82102001},
{0x34,0x8328400d},
{0x38,0xa02c0001},
{0x3c,0x80a62007},
{0x40,0x18800008},
{0x44,0x80a62008},
{0x48,0x9a102007},
{0x4c,0x9a234018},
{0x50,0x82102001},
{0x54,0x8328400d},
{0x58,0x10800023},
{0x5c,0xa0140001},
{0x60,0x1280000a},
{0x64,0x821e2009},
{0x68,0x80a420fe},
{0x6c,0x24800002},
{0x70,0xa0042001},
{0x74,0x03000019},
{0x78,0x9b2ca002},
{0x7c,0x82106080},
{0xf0,0x2b},
{0x00,0x10800019},
{0x04,0xe6234001},
{0x08,0x80a00001},
{0x0c,0x9a603fff},
{0x10,0x80a420fe},
{0x14,0x04800003},
{0x18,0x82102001},
{0x1c,0x82102000},
{0x20,0x808b4001},
{0x24,0x02800011},
{0x28,0x92100015},
{0x2c,0x03000019},
{0x30,0x9b2ca002},
{0x34,0x82106080},
{0x38,0xc2034001},
{0x3c,0x80a04011},
{0x40,0x18800003},
{0x44,0x9a204011},
{0x48,0x9a244001},
{0x4c,0x80a4c011},
{0x50,0x14800003},
{0x54,0x8224c011},
{0x58,0x82244013},
{0x5c,0x80a34001},
{0x60,0xa0642000},
{0x64,0x92100015},
{0x68,0x94100010},
{0x6c,0x7fffff51},
{0x70,0x90100014},
{0x74,0x10bfffb2},
{0x78,0xa404a001},
{0x7c,0xc20023d4},
{0xf0,0x2c},
{0x00,0x80a50001},
{0x04,0x0abfffae},
{0x08,0xa4102000},
{0x0c,0x81c7e008},
{0x10,0x81e80000},
{0x14,0x98102000},
{0x18,0x9610201e},
{0x1c,0x80a22000},
{0x20,0x12800003},
{0x24,0x8210000c},
{0x28,0x8222c00c},
{0x2c,0x83286002},
{0x30,0xda006480},
{0x34,0x80a37ff0},
{0x38,0x02800006},
{0x3c,0x98032002},
{0x40,0xc2006484},
{0x44,0x80a3201f},
{0x48,0x04bffff5},
{0x4c,0xc2234000},
{0x50,0x81c3e008},
{0x54,0x01000000},
{0x58,0x9de3bf98},
{0x5c,0xd8002660},
{0x60,0xc200254c},
{0x64,0x98130001},
{0x68,0xda002508},
{0x6c,0x033fc000},
{0x70,0x9a0b4001},
{0x74,0x153fc180},
{0x78,0x03202020},
{0x7c,0x82106080},
{0xf0,0x2d},
{0x00,0x9612a038},
{0x04,0xc222c000},
{0x08,0x03168000},
{0x0c,0xd8202660},
{0x10,0x80a34001},
{0x14,0xc0228000},
{0x18,0xa4102000},
{0x1c,0x1280000b},
{0x20,0xa8102000},
{0x24,0x0300003f},
{0x28,0xda002548},
{0x2c,0x821063ff},
{0x30,0x9a0b4001},
{0x34,0xd8002508},
{0x38,0x033fffc0},
{0x3c,0x980b0001},
{0x40,0x9a13400c},
{0x44,0xda202548},
{0x48,0x80a62000},
{0x4c,0x16800027},
{0x50,0x1b296956},
{0x54,0x1b3fc040},
{0x58,0xc2002548},
{0x5c,0x8208400d},
{0x60,0x1b168040},
{0x64,0x80a0400d},
{0x68,0x22800002},
{0x6c,0xa4102001},
{0x70,0xda002664},
{0x74,0xc20021dc},
{0x78,0x80a34001},
{0x7c,0x1a80001b},
{0xf0,0x2e},
{0x00,0x1b296956},
{0x04,0x031696a9},
{0x08,0xda00250c},
{0x0c,0x821061a5},
{0x10,0x80a34001},
{0x14,0x02800006},
{0x18,0x03296956},
{0x1c,0x8210625a},
{0x20,0x80a34001},
{0x24,0x12800011},
{0x28,0x1b296956},
{0x2c,0x11000018},
{0x30,0x92122340},
{0x34,0x40000179},
{0x38,0x90122200},
{0x3c,0x03000019},
{0x40,0x96106240},
{0x44,0xa8102001},
{0x48,0x98102000},
{0x4c,0x9b2b2002},
{0x50,0x98032001},
{0x54,0xc20365b0},
{0x58,0x80a3201b},
{0x5c,0x08bffffc},
{0x60,0xc223400b},
{0x64,0x1b296956},
{0x68,0x80a00012},
{0x6c,0x82380018},
{0x70,0xa613625a},
{0x74,0x90402000},
{0x78,0x8330601f},
{0x7c,0x1b1696a9},
{0xf0,0x2f},
{0x00,0xa21361a5},
{0x04,0x9e104008},
{0x08,0xd200254c},
{0x0c,0xe0002548},
{0x10,0x98102500},
{0x14,0x80a32670},
{0x18,0x0280001a},
{0x1c,0x96033a50},
{0x20,0xc200250c},
{0x24,0x941b250c},
{0x28,0x80a04013},
{0x2c,0x02800007},
{0x30,0x9a184011},
{0x34,0x80a0000d},
{0x38,0x82603fff},
{0x3c,0x80904008},
{0x40,0x0280000a},
{0x44,0x80a3e000},
{0x48,0x80a2e0f0},
{0x4c,0x9a402000},
{0x50,0x80a0000a},
{0x54,0x82603fff},
{0x58,0x80934001},
{0x5c,0x3280000a},
{0x60,0x98032004},
{0x64,0x80a3e000},
{0x68,0x02800005},
{0x6c,0x82033960},
{0x70,0x80a0603f},
{0x74,0x28800004},
{0x78,0x98032004},
{0x7c,0xc0230000},
{0xf0,0x30},
{0x00,0x98032004},
{0x04,0x80a32837},
{0x08,0x08bfffe4},
{0x0c,0x80a32670},
{0x10,0x80a62000},
{0x14,0x06800006},
{0x18,0x0300003f},
{0x1c,0x821063ff},
{0x20,0x820a4001},
{0x24,0x10800005},
{0x28,0xc220254c},
{0x2c,0xc21022d4},
{0x30,0x83286010},
{0x34,0xc22026a0},
{0x38,0xc2002548},
{0x3c,0xda0023c8},
{0x40,0x90087dff},
{0x44,0xd4002334},
{0x48,0x9b336012},
{0x4c,0x9402a001},
{0x50,0xd800254c},
{0x54,0x9a0b6200},
{0x58,0x033fc200},
{0x5c,0x9012000d},
{0x60,0x92050014},
{0x64,0x980b3ffd},
{0x68,0x9732a001},
{0x6c,0x82106030},
{0x70,0xc2004000},
{0x74,0x98130009},
{0x78,0x9602800b},
{0x7c,0x9b342018},
{0xf0,0x31},
{0x00,0xd820254c},
{0x04,0xd620258c},
{0x08,0xc220257c},
{0x0c,0x80a3605a},
{0x10,0xd4202554},
{0x14,0xd4202588},
{0x18,0x12800009},
{0x1c,0xd0202548},
{0x20,0x0300003f},
{0x24,0x821063ff},
{0x28,0x1b3fffc0},
{0x2c,0x820a0001},
{0x30,0x9a0c000d},
{0x34,0x8210400d},
{0x38,0xc2202548},
{0x3c,0x80a4a001},
{0x40,0x0280000c},
{0x44,0x82102027},
{0x48,0x03296956},
{0x4c,0xda00250c},
{0x50,0x8210625a},
{0x54,0x80a34001},
{0x58,0x1280000b},
{0x5c,0x01000000},
{0x60,0xc200254c},
{0x64,0x80886002},
{0x68,0x12800007},
{0x6c,0x82102015},
{0x70,0xc2202500},
{0x74,0x7ffffe64},
{0x78,0x901025b0},
{0x7c,0x7ffffe75},
{0xf0,0x32},
{0x00,0x81e80000},
{0x04,0x01000000},
{0x08,0x81c7e008},
{0x0c,0x81e80000},
{0x10,0x9de3bf98},
{0x14,0x033fc0c0},
{0x18,0xb6106004},
{0x1c,0x35200040},
{0x20,0x2f3fc200},
{0x24,0x8216a101},
{0x28,0xc225c000},
{0x2c,0xc026c000},
{0x30,0x400002b0},
{0x34,0x90102000},
{0x38,0x2b3fc140},
{0x3c,0xda00247c},
{0x40,0x98156040},
{0x44,0xe8030000},
{0x48,0xc20022f8},
{0x4c,0x9b336001},
{0x50,0x825b4001},
{0x54,0xa80d3800},
{0x58,0xa8150001},
{0x5c,0xe8230000},
{0x60,0x82156004},
{0x64,0xe8004000},
{0x68,0xa80d3fe0},
{0x6c,0xa815000d},
{0x70,0xe8204000},
{0x74,0xa615e080},
{0x78,0xe804c000},
{0x7c,0xb815e054},
{0xf0,0x33},
{0x00,0xc2070000},
{0x04,0xa80d3fe0},
{0x08,0xa815000d},
{0x0c,0xba0861ff},
{0x10,0xec002344},
{0x14,0xc2002298},
{0x18,0x9a15e070},
{0x1c,0xc2234000},
{0x20,0x033fc000},
{0x24,0xda002338},
{0x28,0x82106030},
{0x2c,0xda204000},
{0x30,0xc2002330},
{0x34,0x9015e074},
{0x38,0xc2220000},
{0x3c,0x0300003f},
{0x40,0x17000017},
{0x44,0x9e156058},
{0x48,0x821063ff},
{0x4c,0xc223c000},
{0x50,0x9612e380},
{0x54,0x19000018},
{0x58,0x94156088},
{0x5c,0xd6228000},
{0x60,0x981320c0},
{0x64,0x9215608c},
{0x68,0xd8224000},
{0x6c,0xe824c000},
{0x70,0xa015605c},
{0x74,0xc0240000},
{0x78,0xa2156080},
{0x7c,0xd6244000},
{0xf0,0x34},
{0x00,0xa4156084},
{0x04,0xd8248000},
{0x08,0xec202670},
{0x0c,0x80a76114},
{0x10,0x1280000c},
{0x14,0xe6002374},
{0x18,0x820da0ff},
{0x1c,0x8258605a},
{0x20,0x82006040},
{0x24,0x83306007},
{0x28,0x9b286010},
{0x2c,0x9a034001},
{0x30,0x825ce349},
{0x34,0xfa270000},
{0x38,0xda202670},
{0x3c,0xa730600a},
{0x40,0xda0023f8},
{0x44,0x8215e008},
{0x48,0xda204000},
{0x4c,0x9815e00c},
{0x50,0x7ffffe20},
{0x54,0xda230000},
{0x58,0x9a15e07c},
{0x5c,0xe8034000},
{0x60,0x033ff000},
{0x64,0xa82d0001},
{0x68,0xe8234000},
{0x6c,0x033fc1c0},
{0x70,0xda002340},
{0x74,0x82106064},
{0x78,0xda204000},
{0x7c,0x0300007f},
{0xf0,0x35},
{0x00,0x96156010},
{0x04,0x821063ff},
{0x08,0x1907ffc0},
{0x0c,0xc222c000},
{0x10,0x92156030},
{0x14,0x94156014},
{0x18,0xd8224000},
{0x1c,0x80a4e000},
{0x20,0x0280000f},
{0x24,0xd8228000},
{0x28,0x932ce010},
{0x2c,0x8204e001},
{0x30,0x9b2ce004},
{0x34,0x83286010},
{0x38,0x9a02400d},
{0x3c,0x9815e084},
{0x40,0xda230000},
{0x44,0x82004013},
{0x48,0x9615e088},
{0x4c,0x82006002},
{0x50,0x9415e08c},
{0x54,0xd222c000},
{0x58,0xc2228000},
{0x5c,0x8215e030},
{0x60,0xda002670},
{0x64,0xda204000},
{0x68,0x7ffffedc},
{0x6c,0x90103fff},
{0x70,0x7ffffec9},
{0x74,0x90102001},
{0x78,0x82103fff},
{0x7c,0xc226c000},
{0xf0,0x36},
{0x00,0xf425c000},
{0x04,0x81c7e008},
{0x08,0x81e80000},
{0x0c,0x9de3bf98},
{0x10,0xc2002508},
{0x14,0x808860ff},
{0x18,0x02800015},
{0x1c,0x1b3fc180},
{0x20,0x82102001},
{0x24,0x9a13603c},
{0x28,0xc2234000},
{0x2c,0xc2002508},
{0x30,0x820860ff},
{0x34,0x80a04018},
{0x38,0x1280000b},
{0x3c,0x033fc180},
{0x40,0x7ffffc9e},
{0x44,0x01000000},
{0x48,0xda002508},
{0x4c,0x033fc040},
{0x50,0x9a0b60ff},
{0x54,0x8210600c},
{0x58,0xc0204000},
{0x5c,0x10bffff7},
{0x60,0x80a34018},
{0x64,0x8210603c},
{0x68,0xc0204000},
{0x6c,0x81c7e008},
{0x70,0x81e80000},
{0x74,0x9de3bf98},
{0x78,0x9e100018},
{0x7c,0x031fffdf},
{0xf0,0x37},
{0x00,0xb010001a},
{0x04,0xb41063ff},
{0x08,0x82102000},
{0x0c,0xbb286002},
{0x10,0x80a62009},
{0x14,0xb6006001},
{0x18,0x12800006},
{0x1c,0xb810001d},
{0x20,0xc206401d},
{0x24,0x83306001},
{0x28,0x8208401a},
{0x2c,0xc226401d},
{0x30,0x80a62008},
{0x34,0x08800006},
{0x38,0xc206401c},
{0x3c,0xfa03c01c},
{0x40,0xbb376001},
{0x44,0x10800003},
{0x48,0xba0f401a},
{0x4c,0xfa03c01c},
{0x50,0x8200401d},
{0x54,0xc226401c},
{0x58,0x80a6e04f},
{0x5c,0x08bfffec},
{0x60,0x8210001b},
{0x64,0x81c7e008},
{0x68,0x81e80000},
{0x6c,0x9a102000},
{0x70,0x832b6002},
{0x74,0x9a036001},
{0x78,0x80a3604f},
{0x7c,0x08bffffd},
{0xf0,0x38},
{0x00,0xc0220001},
{0x04,0x81c3e008},
{0x08,0x01000000},
{0x0c,0xc20022f8},
{0x10,0xda00247c},
{0x14,0x8258400d},
{0x18,0x83306001},
{0x1c,0x96102000},
{0x20,0x80a2c001},
{0x24,0x1a80003b},
{0x28,0x0300003f},
{0x2c,0x941063ff},
{0x30,0x98102000},
{0x34,0x80a26001},
{0x38,0x0280002e},
{0x3c,0x80a26004},
{0x40,0x12800008},
{0x44,0x80a26008},
{0x48,0xc2030008},
{0x4c,0x9a08400a},
{0x50,0x83306012},
{0x54,0x83286010},
{0x58,0x10800014},
{0x5c,0x9b336002},
{0x60,0x28800015},
{0x64,0xda02000c},
{0x68,0xda030008},
{0x6c,0x83336010},
{0x70,0x82004001},
{0x74,0x9a0b400a},
{0x78,0x81800000},
{0x7c,0x01000000},
{0xf0,0x39},
{0x00,0x01000000},
{0x04,0x01000000},
{0x08,0x82704009},
{0x0c,0x9a03400d},
{0x10,0x83286010},
{0x14,0x81800000},
{0x18,0x01000000},
{0x1c,0x01000000},
{0x20,0x01000000},
{0x24,0x9a734009},
{0x28,0x8200400d},
{0x2c,0x10800011},
{0x30,0xc2230008},
{0x34,0x83336010},
{0x38,0x81800000},
{0x3c,0x01000000},
{0x40,0x01000000},
{0x44,0x01000000},
{0x48,0x82704009},
{0x4c,0x9a0b400a},
{0x50,0x83286010},
{0x54,0x81800000},
{0x58,0x01000000},
{0x5c,0x01000000},
{0x60,0x01000000},
{0x64,0x9a734009},
{0x68,0x8200400d},
{0x6c,0xc222000c},
{0x70,0xc20022f8},
{0x74,0xda00247c},
{0x78,0x8258400d},
{0x7c,0x9602e001},
{0xf0,0x3a},
{0x00,0x83306001},
{0x04,0x80a2c001},
{0x08,0x0abfffcb},
{0x0c,0x98032004},
{0x10,0x81c3e008},
{0x14,0x01000000},
{0x18,0x98102000},
{0x1c,0x9b2b2002},
{0x20,0x98032001},
{0x24,0xc202000d},
{0x28,0x80a3204f},
{0x2c,0x04bffffc},
{0x30,0xc222400d},
{0x34,0x81c3e008},
{0x38,0x01000000},
{0x3c,0xd6020000},
{0x40,0xd8024000},
{0x44,0x9132e010},
{0x48,0x95332010},
{0x4c,0x900a2fff},
{0x50,0x940aafff},
{0x54,0x03000007},
{0x58,0x9a22000a},
{0x5c,0x821063ff},
{0x60,0x940b0001},
{0x64,0x900ac001},
{0x68,0x9022000a},
{0x6c,0x9a5b400d},
{0x70,0x905a0008},
{0x74,0x81c3e008},
{0x78,0x90034008},
{0x7c,0x9de3bf98},
{0xf0,0x3b},
{0x00,0x82064019},
{0x04,0x82004019},
{0x08,0x83286002},
{0x0c,0x82004018},
{0x10,0x3b000019},
{0x14,0x83286002},
{0x18,0xba176080},
{0x1c,0x9a066001},
{0x20,0xde00401d},
{0x24,0xb2067fff},
{0x28,0xc2002478},
{0x2c,0x9823c001},
{0x30,0x80a6400d},
{0x34,0xb4062001},
{0x38,0x1480002a},
{0x3c,0x96102000},
{0x40,0x82064019},
{0x44,0x82004019},
{0x48,0x9410001d},
{0x4c,0xb9286002},
{0x50,0xb006bffe},
{0x54,0x833e601f},
{0x58,0xba070018},
{0x5c,0x82204019},
{0x60,0xbb2f6002},
{0x64,0xb730601f},
{0x68,0xba07400a},
{0x6c,0x80a62000},
{0x70,0x24800015},
{0x74,0xb0062001},
{0x78,0xc2002308},
{0x7c,0x80a04018},
{0xf0,0x3c},
{0x00,0x82603fff},
{0x04,0x8088401b},
{0x08,0x2280000f},
{0x0c,0xb0062001},
{0x10,0xc2002300},
{0x14,0x80a64001},
{0x18,0x3880000b},
{0x1c,0xb0062001},
{0x20,0xc2074000},
{0x24,0x80a0400f},
{0x28,0x04800004},
{0x2c,0x80a0400c},
{0x30,0x1080000d},
{0x34,0xb0102000},
{0x38,0x24800002},
{0x3c,0x96102001},
{0x40,0xb0062001},
{0x44,0x80a6001a},
{0x48,0x04bfffe9},
{0x4c,0xba076004},
{0x50,0xb2066001},
{0x54,0x80a6400d},
{0x58,0x04bfffde},
{0x5c,0xb807200c},
{0x60,0xb010000b},
{0x64,0x81c7e008},
{0x68,0x81e80000},
{0x6c,0xc2002548},
{0x70,0x82087fbf},
{0x74,0xc2202548},
{0x78,0xc0202540},
{0x7c,0xc0202514},
{0xf0,0x3d},
{0x00,0x9a102000},
{0x04,0x832b6002},
{0x08,0x9a036001},
{0x0c,0xc0206708},
{0x10,0x80a36009},
{0x14,0x04bffffc},
{0x18,0xc02066e0},
{0x1c,0x81c3e008},
{0x20,0x01000000},
{0x24,0x9de3bf88},
{0x28,0x82063fff},
{0x2c,0xb8067fff},
{0x30,0x82160001},
{0x34,0xba16401c},
{0x38,0x80974001},
{0x3c,0xa610001a},
{0x40,0x0680006c},
{0x44,0xa410001b},
{0x48,0xc2002308},
{0x4c,0x80a60001},
{0x50,0x38800069},
{0x54,0xb0102000},
{0x58,0xc2002300},
{0x5c,0x80a64001},
{0x60,0x38800065},
{0x64,0xb0102000},
{0x68,0x94062001},
{0x6c,0x96066001},
{0x70,0xa207bff8},
{0x74,0x8207bfe8},
{0x78,0xb0102003},
{0x7c,0xc0204000},
{0xf0,0x3e},
{0x00,0xb0863fff},
{0x04,0x1cbffffe},
{0x08,0x82006004},
{0x0c,0x80a7000b},
{0x10,0x14800031},
{0x14,0xb210001c},
{0x18,0x8207001c},
{0x1c,0xba02c00b},
{0x20,0x8200401c},
{0x24,0xba07400b},
{0x28,0xba20401d},
{0x2c,0x39000019},
{0x30,0xa0172080},
{0x34,0x9827400a},
{0x38,0x9b286002},
{0x3c,0xb002bffe},
{0x40,0x82034018},
{0x44,0x83286002},
{0x48,0xba06000c},
{0x4c,0xb4004010},
{0x50,0xb6076008},
{0x54,0x90102001},
{0x58,0x932a001b},
{0x5c,0x9e102000},
{0x60,0xb92be002},
{0x64,0xfa072520},
{0x68,0xba5f4012},
{0x6c,0x833f601f},
{0x70,0x83306018},
{0x74,0xba074001},
{0x78,0xc2068000},
{0x7c,0x82204013},
{0xf0,0x3f},
{0x00,0xbb3f6008},
{0x04,0x9e03e001},
{0x08,0x80a0401d},
{0x0c,0x04800005},
{0x10,0xb8070011},
{0x14,0xc2073ff0},
{0x18,0x82104009},
{0x1c,0xc2273ff0},
{0x20,0x80a3e003},
{0x24,0x08bffff0},
{0x28,0xb92be002},
{0x2c,0xb0062001},
{0x30,0xb606e001},
{0x34,0x80a6000a},
{0x38,0x04bfffe8},
{0x3c,0xb406a004},
{0x40,0xb2066001},
{0x44,0x9a03600c},
{0x48,0x80a6400b},
{0x4c,0x04bfffdc},
{0x50,0x98032003},
{0x54,0xc207bfe8},
{0x58,0x80886010},
{0x5c,0x0280000a},
{0x60,0xfa07bfec},
{0x64,0xc207bff4},
{0x68,0x80886082},
{0x6c,0x02800007},
{0x70,0x808f6010},
{0x74,0x80886028},
{0x78,0x1280001f},
{0x7c,0xb0102003},
{0xf0,0x40},
{0x00,0xfa07bfec},
{0x04,0x808f6010},
{0x08,0x02800012},
{0x0c,0xc207bff0},
{0x10,0x808f6082},
{0x14,0x02800007},
{0x18,0x808f6028},
{0x1c,0xc207bff4},
{0x20,0x80886028},
{0x24,0x32800014},
{0x28,0xb0102002},
{0x2c,0x808f6028},
{0x30,0x02800008},
{0x34,0xc207bff0},
{0x38,0xc207bff4},
{0x3c,0x80886082},
{0x40,0x02800004},
{0x44,0xc207bff0},
{0x48,0x1080000b},
{0x4c,0xb0102002},
{0x50,0x80886010},
{0x54,0x02800008},
{0x58,0xb0102000},
{0x5c,0x80886082},
{0x60,0x02800005},
{0x64,0x80886028},
{0x68,0x12800003},
{0x6c,0xb0102001},
{0x70,0xb0102000},
{0x74,0x81c7e008},
{0x78,0x81e80000},
{0x7c,0x9de3bf98},
{0xf0,0x41},
{0x00,0xb12e2002},
{0x04,0xf80626e0},
{0x08,0x9e0f2fff},
{0x0c,0xba03c00f},
{0x10,0xba07400f},
{0x14,0xb1372010},
{0x18,0xb00e2fff},
{0x1c,0xbb2f6002},
{0x20,0xba074018},
{0x24,0x03000019},
{0x28,0x82106080},
{0x2c,0xbb2f6002},
{0x30,0xfa074001},
{0x34,0xc20821e4},
{0x38,0xba5f4001},
{0x3c,0x833f601f},
{0x40,0x83306019},
{0x44,0xba074001},
{0x48,0xbb3f6007},
{0x4c,0xb937200c},
{0x50,0xc20821e5},
{0x54,0xa0100019},
{0x58,0x9410001a},
{0x5c,0xa8074001},
{0x60,0x808f2001},
{0x64,0xb006001a},
{0x68,0x0280000c},
{0x6c,0x9e03c019},
{0x70,0xc20023c8},
{0x74,0x80886200},
{0x78,0x32800002},
{0x7c,0xb006001a},
{0xf0,0x42},
{0x00,0xc200237c},
{0x04,0x80a06000},
{0x08,0x2280005e},
{0x0c,0x9e03e001},
{0x10,0x1080005c},
{0x14,0xb0062001},
{0x18,0xc20023c8},
{0x1c,0x83306014},
{0x20,0x82086001},
{0x24,0x80a00001},
{0x28,0xa2603fff},
{0x2c,0x9e03c010},
{0x30,0x8333e01f},
{0x34,0x80944001},
{0x38,0x12800052},
{0x3c,0xb006000a},
{0x40,0x80a62000},
{0x44,0x06800050},
{0x48,0x80a2a000},
{0x4c,0xc2002300},
{0x50,0x82006001},
{0x54,0x80a3c001},
{0x58,0x1880004b},
{0x5c,0x80a2a000},
{0x60,0xc2002308},
{0x64,0x82006001},
{0x68,0x80a60001},
{0x6c,0x18800045},
{0x70,0xa4102000},
{0x74,0x27000019},
{0x78,0x96103fff},
{0x7c,0xaa14e080},
{0xf0,0x43},
{0x00,0x9214e080},
{0x04,0x80a2a000},
{0x08,0x9a03c00b},
{0x0c,0x12800004},
{0x10,0x98100018},
{0x14,0x9806000b},
{0x18,0x9a10000f},
{0x1c,0xba234010},
{0x20,0x8207401d},
{0x24,0x8200401d},
{0x28,0xba23000a},
{0x2c,0x83286002},
{0x30,0x8200401d},
{0x34,0x83286002},
{0x38,0xfa004009},
{0x3c,0xc20821e6},
{0x40,0xba5f4001},
{0x44,0xb803400b},
{0x48,0x833f601f},
{0x4c,0x9003400d},
{0x50,0xb202000d},
{0x54,0x83306019},
{0x58,0xb407001c},
{0x5c,0xb72e6002},
{0x60,0xba074001},
{0x64,0xb406801c},
{0x68,0xbb3f6007},
{0x6c,0xb606c00c},
{0x70,0xf80821e7},
{0x74,0xb807401c},
{0x78,0xb72ee002},
{0x7c,0xfa06c009},
{0xf0,0x44},
{0x00,0xb32e6004},
{0x04,0x8203000b},
{0x08,0x83286002},
{0x0c,0xb2064009},
{0x10,0x80a7401c},
{0x14,0xba064001},
{0x18,0xb52ea004},
{0x1c,0x14800019},
{0x20,0x832b2002},
{0x24,0x80a2a000},
{0x28,0x22800005},
{0x2c,0x8202000d},
{0x30,0xb2068009},
{0x34,0xba064001},
{0x38,0x8202000d},
{0x3c,0x83286002},
{0x40,0x8200400c},
{0x44,0xb3286002},
{0x48,0xc2074000},
{0x4c,0x80a0401c},
{0x50,0x1480000c},
{0x54,0x9602e001},
{0x58,0xc2064015},
{0x5c,0x80a04014},
{0x60,0x36800002},
{0x64,0xa4102001},
{0x68,0x80a2e001},
{0x6c,0x04bfffc6},
{0x70,0x9214e080},
{0x74,0x80a4a000},
{0x78,0x32bfffae},
{0x7c,0x9e03c010},
{0xf0,0x45},
{0x00,0x80a2a000},
{0x04,0x12800003},
{0x08,0xb026000a},
{0x0c,0xb023c010},
{0x10,0x81c7e008},
{0x14,0x81e80000},
{0x18,0x94102000},
{0x1c,0xc2002514},
{0x20,0x80a28001},
{0x24,0x96102000},
{0x28,0x1a80000e},
{0x2c,0x9b2ae002},
{0x30,0xc20366e0},
{0x34,0x9602e001},
{0x38,0x80a06000},
{0x3c,0x02800006},
{0x40,0x992aa002},
{0x44,0xc22326e0},
{0x48,0xc2036708},
{0x4c,0x9402a001},
{0x50,0xc2232708},
{0x54,0xc2002514},
{0x58,0x10bffff4},
{0x5c,0x80a2c001},
{0x60,0x81c3e008},
{0x64,0xd4202514},
{0x68,0xd4020000},
{0x6c,0x03000018},
{0x70,0x9802800a},
{0x74,0x82106200},
{0x78,0xda130001},
{0x7c,0xc2002590},
{0xf0,0x46},
{0x00,0xc250400c},
{0x04,0x96a0400d},
{0x08,0x02800016},
{0x0c,0x03000018},
{0x10,0x80a2e000},
{0x14,0x04800009},
{0x18,0x82102001},
{0x1c,0xda022004},
{0x20,0x8328400d},
{0x24,0x80a2c001},
{0x28,0x3480000d},
{0x2c,0x973ac00d},
{0x30,0x1080000b},
{0x34,0x96102001},
{0x38,0x1680000a},
{0x3c,0x03000018},
{0x40,0xda022008},
{0x44,0x82103fff},
{0x48,0x8328400d},
{0x4c,0x80a2c001},
{0x50,0x36800003},
{0x54,0x96103fff},
{0x58,0x973ac00d},
{0x5c,0x03000018},
{0x60,0x92106200},
{0x64,0x8202800a},
{0x68,0xc2104009},
{0x6c,0x9602c001},
{0x70,0x808aa001},
{0x74,0x0280000f},
{0x78,0x9b3aa01f},
{0x7c,0x9b33601f},
{0xf0,0x47},
{0x00,0x9a02800d},
{0x04,0x9b3b6001},
{0x08,0x9b2b6002},
{0x0c,0xd8034009},
{0x10,0x033fffc0},
{0x14,0x980b0001},
{0x18,0x0300003f},
{0x1c,0x821063ff},
{0x20,0x820ac001},
{0x24,0x98030001},
{0x28,0x1080000d},
{0x2c,0xd8234009},
{0x30,0x9b33601f},
{0x34,0x9a02800d},
{0x38,0x9b3b6001},
{0x3c,0x9b2b6002},
{0x40,0x0300003f},
{0x44,0xd8034009},
{0x48,0x821063ff},
{0x4c,0x980b0001},
{0x50,0x832ae010},
{0x54,0x8200400c},
{0x58,0xc2234009},
{0x5c,0xc2020000},
{0x60,0xda00247c},
{0x64,0x8200400d},
{0x68,0x81c3e008},
{0x6c,0xc2220000},
{0x70,0x9de3bf98},
{0x74,0x833e201f},
{0x78,0xd0002320},
{0x7c,0x82204018},
{0xf0,0x48},
{0x00,0x80a22000},
{0x04,0x02800016},
{0x08,0x9b30601f},
{0x0c,0x033fc000},
{0x10,0xa0106020},
{0x14,0xc200231c},
{0x18,0x80a00001},
{0x1c,0x82402000},
{0x20,0x8088400d},
{0x24,0xda002318},
{0x28,0x821e000d},
{0x2c,0x02800009},
{0x30,0xb0086001},
{0x34,0x80a0000d},
{0x38,0x82603fff},
{0x3c,0x7ffffa56},
{0x40,0xc2240000},
{0x44,0xc2002318},
{0x48,0x10800005},
{0x4c,0xc2240000},
{0x50,0x033fc000},
{0x54,0x82106020},
{0x58,0xf0204000},
{0x5c,0x81c7e008},
{0x60,0x81e80000},
{0x64,0x9de3bf98},
{0x68,0x7ffffa54},
{0x6c,0x01000000},
{0x70,0x033fc040},
{0x74,0xe0002500},
{0x78,0x8210600c},
{0x7c,0x80a42026},
{0xf0,0x49},
{0x00,0x0880001e},
{0x04,0xc0204000},
{0x08,0x19169683},
{0x0c,0x9a132300},
{0x10,0xc2002f00},
{0x14,0x80a0400d},
{0x18,0x3280005b},
{0x1c,0xc2002500},
{0x20,0x9a1323fc},
{0x24,0xc2002ffc},
{0x28,0x80a0400d},
{0x2c,0x32800056},
{0x30,0xc2002500},
{0x34,0xc0202584},
{0x38,0xa2102000},
{0x3c,0x832c6002},
{0x40,0xc2006f04},
{0x44,0x80a06000},
{0x48,0x0280004e},
{0x4c,0xa2046001},
{0x50,0x9fc04000},
{0x54,0x01000000},
{0x58,0xc2002584},
{0x5c,0x80a06000},
{0x60,0x12800048},
{0x64,0x80a4603b},
{0x68,0x24bffff6},
{0x6c,0x832c6002},
{0x70,0x10800045},
{0x74,0xc2002500},
{0x78,0x80a42000},
{0x7c,0x1280000c},
{0xf0,0x4a},
{0x00,0x80a42014},
{0x04,0x7ffffc55},
{0x08,0x90102000},
{0x0c,0x1b3fc200},
{0x10,0xc2002330},
{0x14,0x9a136074},
{0x18,0xc2234000},
{0x1c,0x7ffffc3e},
{0x20,0x90102001},
{0x24,0x10800035},
{0x28,0xc2002fcc},
{0x2c,0x1880000c},
{0x30,0x80a42015},
{0x34,0x808c2001},
{0x38,0x32800033},
{0x3c,0xc2002500},
{0x40,0x90043ffe},
{0x44,0x7ffffbd7},
{0x48,0x91322001},
{0x4c,0x7ffffb61},
{0x50,0x01000000},
{0x54,0x1080002c},
{0x58,0xc2002500},
{0x5c,0x18800013},
{0x60,0x80a42016},
{0x64,0x11000018},
{0x68,0x7ffffda1},
{0x6c,0x90122200},
{0x70,0x033fc180},
{0x74,0xda0025b0},
{0x78,0x82106038},
{0x7c,0xda204000},
{0xf0,0x4b},
{0x00,0x033fc200},
{0x04,0x82106074},
{0x08,0xda00232c},
{0x0c,0xda204000},
{0x10,0x7ffffc21},
{0x14,0x90102000},
{0x18,0xc200266c},
{0x1c,0xc2202510},
{0x20,0x10800016},
{0x24,0xc2002fcc},
{0x28,0x28800017},
{0x2c,0xc2002500},
{0x30,0x80a42026},
{0x34,0x38800014},
{0x38,0xc2002500},
{0x3c,0x7ffffb26},
{0x40,0x23000018},
{0x44,0x92146200},
{0x48,0x7ffffd6b},
{0x4c,0x94043fea},
{0x50,0x80a42026},
{0x54,0x3280000c},
{0x58,0xc2002500},
{0x5c,0x90146200},
{0x60,0x7ffffd8b},
{0x64,0x92102008},
{0x68,0xc2002fd8},
{0x6c,0x80a06000},
{0x70,0x22800005},
{0x74,0xc2002500},
{0x78,0x9fc04000},
{0x7c,0x01000000},
{0xf0,0x4c},
{0x00,0xc2002500},
{0x04,0x80a40001},
{0x08,0x1280000b},
{0x0c,0x031fffff},
{0x10,0x821063f0},
{0x14,0x80a40001},
{0x18,0x38800003},
{0x1c,0x21040000},
{0x20,0xa0042001},
{0x24,0x033fc180},
{0x28,0x82106034},
{0x2c,0xe0204000},
{0x30,0xe0202500},
{0x34,0x81c7e008},
{0x38,0x81e80000},
{0x3c,0x81c3e008},
{0x40,0x01000000},
{0x44,0x03169696},
{0x48,0xda002180},
{0x4c,0x8210625a},
{0x50,0x80a34001},
{0x54,0x94102000},
{0x58,0x12800006},
{0x5c,0x96102000},
{0x60,0x033fc180},
{0x64,0x82106030},
{0x68,0x10800020},
{0x6c,0xda204000},
{0x70,0xc202c000},
{0x74,0x9602e004},
{0x78,0x80a2e4ff},
{0x7c,0x08bffffd},
{0xf0,0x4d},
{0x00,0x94028001},
{0x04,0x96102d00},
{0x08,0xd2002ff8},
{0x0c,0x03000019},
{0x10,0x80a2c009},
{0x14,0x1a80000b},
{0x18,0x901063ff},
{0x1c,0xd802c000},
{0x20,0x9602e004},
{0x24,0x80a2c009},
{0x28,0x9a402000},
{0x2c,0x80a2000b},
{0x30,0x82603fff},
{0x34,0x808b4001},
{0x38,0x12bffff9},
{0x3c,0x9402800c},
{0x40,0x03169696},
{0x44,0x8210625a},
{0x48,0x80a28001},
{0x4c,0x033fc180},
{0x50,0x82106030},
{0x54,0x02800005},
{0x58,0xd4204000},
{0x5c,0x03000008},
{0x60,0x81c063f0},
{0x64,0x90102001},
{0x68,0x01000000},
{0x6c,0x81c3e008},
{0x70,0x01000000},
{0x74,0x9de3bf98},
{0x78,0x9e100018},
{0x7c,0x03000019},
{0xf0,0x4e},
{0x00,0xb0100019},
{0x04,0xba106080},
{0x08,0xb6102000},
{0x0c,0x832ee002},
{0x10,0xb606e001},
{0x14,0x80a6e0d7},
{0x18,0x08bffffd},
{0x1c,0xc020401d},
{0x20,0xb6102000},
{0x24,0xc20022fc},
{0x28,0x80a6c001},
{0x2c,0x1a80001c},
{0x30,0x03000019},
{0x34,0xb21060b4},
{0x38,0xb4102000},
{0x3c,0xc20022f8},
{0x40,0x80a68001},
{0x44,0x1a800011},
{0x48,0x832ee002},
{0x4c,0xb8004019},
{0x50,0xc200247c},
{0x54,0xfa0ee380},
{0x58,0x825e8001},
{0x5c,0x8200401d},
{0x60,0x82004001},
{0x64,0xfa160001},
{0x68,0xc213c001},
{0x6c,0x8220401d},
{0x70,0xc2270000},
{0x74,0xb406a001},
{0x78,0xc20022f8},
{0x7c,0x80a68001},
{0xf0,0x4f},
{0x00,0x0abffff4},
{0x04,0xb8072030},
{0x08,0xb606e001},
{0x0c,0xc20022fc},
{0x10,0x80a6c001},
{0x14,0x0abfffea},
{0x18,0xb4102000},
{0x1c,0x81c7e008},
{0x20,0x81e80000},
{0x24,0x9de3bf98},
{0x28,0x21000018},
{0x2c,0xc2002fe4},
{0x30,0x9fc04000},
{0x34,0x90142200},
{0x38,0xc200254c},
{0x3c,0xda00259c},
{0x40,0x90142340},
{0x44,0x98087ffd},
{0x48,0x80886002},
{0x4c,0x0280002c},
{0x50,0xda202550},
{0x54,0xc2002664},
{0x58,0x9a004001},
{0x5c,0x9a034001},
{0x60,0xc200259c},
{0x64,0xb2006140},
{0x68,0x9a03400d},
{0x6c,0x82102061},
{0x70,0x8220400d},
{0x74,0x9b2e6007},
{0x78,0x973b601f},
{0x7c,0x8182e000},
{0xf0,0x50},
{0x00,0x01000000},
{0x04,0x01000000},
{0x08,0x01000000},
{0x0c,0xb27b4001},
{0x10,0xd820254c},
{0x14,0xc2002fe4},
{0x18,0x9fc04000},
{0x1c,0x01000000},
{0x20,0x11000017},
{0x24,0x90122240},
{0x28,0xe000259c},
{0x2c,0xc2002fe4},
{0x30,0x9fc04000},
{0x34,0x01000000},
{0x38,0x80a64010},
{0x3c,0x9a603fff},
{0x40,0xc200259c},
{0x44,0x80a64001},
{0x48,0x11000019},
{0x4c,0x82603fff},
{0x50,0x80934001},
{0x54,0x02800009},
{0x58,0x90122240},
{0x5c,0x7ffffa8a},
{0x60,0x01000000},
{0x64,0x7ffffa9b},
{0x68,0x01000000},
{0x6c,0x82102015},
{0x70,0x10800011},
{0x74,0xc2202500},
{0x78,0xc020250c},
{0x7c,0x31000018},
{0xf0,0x51},
{0x00,0x33000017},
{0x04,0xc200250c},
{0x08,0xb0162200},
{0x0c,0x80a06000},
{0x10,0x12800009},
{0x14,0xb2166240},
{0x18,0x031696a9},
{0x1c,0x821061a5},
{0x20,0xc220250c},
{0x24,0xc0202668},
{0x28,0xc0202664},
{0x2c,0x7ffffd1b},
{0x30,0x81e80000},
{0x34,0x01000000},
{0x38,0x81c7e008},
{0x3c,0x81e80000},
{0x40,0x9de3bf58},
{0x44,0x94100018},
{0x48,0x9a102000},
{0x4c,0x96102000},
{0x50,0x98102000},
{0x54,0x9e102000},
{0x58,0x8203000f},
{0x5c,0xf6086441},
{0x60,0x80a6e000},
{0x64,0x02800021},
{0x68,0xf4086440},
{0x6c,0xf40ea37f},
{0x70,0xf60ee37f},
{0x74,0xb2102000},
{0x78,0xb007bff8},
{0x7c,0xc200247c},
{0xf0,0x52},
{0x00,0x82584019},
{0x04,0xba06c001},
{0x08,0x82068001},
{0x0c,0x82004001},
{0x10,0xf8528001},
{0x14,0xba07401d},
{0x18,0xc252801d},
{0x1c,0xb8270001},
{0x20,0x80a66000},
{0x24,0x02800007},
{0x28,0xf8263fc0},
{0x2c,0xc2063fbc},
{0x30,0x82a70001},
{0x34,0x2c800003},
{0x38,0x9a234001},
{0x3c,0x9a034001},
{0x40,0xc2002300},
{0x44,0xb2066001},
{0x48,0x82007fff},
{0x4c,0x80a64001},
{0x50,0x08bfffeb},
{0x54,0xb0062004},
{0x58,0x9e03e001},
{0x5c,0x80a3e00a},
{0x60,0x04bfffdf},
{0x64,0x8203000f},
{0x68,0x9602e001},
{0x6c,0x80a2e001},
{0x70,0x04bfffd9},
{0x74,0x9803200c},
{0x78,0xda20259c},
{0x7c,0x81c7e008},
{0xf0,0x53},
{0x00,0x81e80000},
{0x04,0x9de3bf58},
{0x08,0xc208224d},
{0x0c,0x80a06000},
{0x10,0x12800004},
{0x14,0x90067ffe},
{0x18,0xc020259c},
{0x1c,0x3080006a},
{0x20,0xac066002},
{0x24,0x80a20016},
{0x28,0x14800044},
{0x2c,0x9e102000},
{0x30,0x82020008},
{0x34,0x82004008},
{0x38,0xa1286002},
{0x3c,0xa8062002},
{0x40,0x92063ffe},
{0x44,0x80a24014},
{0x48,0x14800038},
{0x4c,0x82064019},
{0x50,0x82204008},
{0x54,0x98004001},
{0x58,0x98030001},
{0x5c,0x9b3a201f},
{0x60,0x96040009},
{0x64,0x952be002},
{0x68,0x03000019},
{0x6c,0x9a234008},
{0x70,0xae106080},
{0x74,0x972ae002},
{0x78,0x9402801e},
{0x7c,0xa72b2002},
{0xf0,0x54},
{0x00,0xab33601f},
{0x04,0x9602c017},
{0x08,0x9402bfb8},
{0x0c,0xa4063fff},
{0x10,0xa2062001},
{0x14,0x98067fff},
{0x18,0x82060018},
{0x1c,0x82204009},
{0x20,0x8204c001},
{0x24,0x80a24012},
{0x28,0x0680000b},
{0x2c,0x9b286002},
{0x30,0x80a24011},
{0x34,0x14800009},
{0x38,0x80a26000},
{0x3c,0x80a2000c},
{0x40,0x06800005},
{0x44,0x82066001},
{0x48,0x80a20001},
{0x4c,0x24800014},
{0x50,0x92026001},
{0x54,0x80a26000},
{0x58,0x2480000d},
{0x5c,0xc2034017},
{0x60,0xc2002308},
{0x64,0x80a04009},
{0x68,0x82603fff},
{0x6c,0x80884015},
{0x70,0x22800007},
{0x74,0xc2034017},
{0x78,0xc2002300},
{0x7c,0x80a20001},
{0xf0,0x55},
{0x00,0x38800003},
{0x04,0xc2034017},
{0x08,0xc202c000},
{0x0c,0xc2228000},
{0x10,0x9e03e001},
{0x14,0x9402a004},
{0x18,0x92026001},
{0x1c,0x80a24014},
{0x20,0x04bfffde},
{0x24,0x9602e004},
{0x28,0x90022001},
{0x2c,0x80a20016},
{0x30,0x04bfffc4},
{0x34,0xa004200c},
{0x38,0x9007bfb8},
{0x3c,0x7ffff8c6},
{0x40,0x92102010},
{0x44,0xd608224f},
{0x48,0xb00ae0ff},
{0x4c,0xd808224d},
{0x50,0x80a6000c},
{0x54,0x1480000b},
{0x58,0x9e102000},
{0x5c,0x832e2002},
{0x60,0x8200401e},
{0x64,0x9a007fb8},
{0x68,0xc2034000},
{0x6c,0xb0062001},
{0x70,0x9e03c001},
{0x74,0x80a6000c},
{0x78,0x04bffffc},
{0x7c,0x9a036004},
{0xf0,0x56},
{0x00,0x820ae0ff},
{0x04,0xda08224d},
{0x08,0x9a234001},
{0x0c,0xc208224c},
{0x10,0x9a036001},
{0x14,0x825bc001},
{0x18,0x9938601f},
{0x1c,0x81832000},
{0x20,0x01000000},
{0x24,0x01000000},
{0x28,0x01000000},
{0x2c,0x8278400d},
{0x30,0x9b38601f},
{0x34,0x9b336019},
{0x38,0x8200400d},
{0x3c,0x83386007},
{0x40,0xc220259c},
{0x44,0x81c7e008},
{0x48,0x81e80000},
{0x4c,0x9de3bf98},
{0x50,0xc2002588},
{0x54,0x80a06000},
{0x58,0x02800014},
{0x5c,0x11000018},
{0x60,0xc2002594},
{0x64,0x80a06000},
{0x68,0x12800004},
{0x6c,0x90122340},
{0x70,0x7ffffc1f},
{0x74,0x01000000},
{0x78,0xc2002588},
{0x7c,0xda002594},
{0xf0,0x57},
{0x00,0x82007fff},
{0x04,0x9a036001},
{0x08,0xc2202588},
{0x0c,0x7ffff9b2},
{0x10,0xda202594},
{0x14,0x33000018},
{0x18,0xb2166340},
{0x1c,0xf4002594},
{0x20,0x7ffffbf5},
{0x24,0x91e80008},
{0x28,0x01000000},
{0x2c,0x81c7e008},
{0x30,0x81e80000},
{0x34,0xc2002460},
{0x38,0x80a06000},
{0x3c,0x12800018},
{0x40,0xda002298},
{0x44,0xc2002588},
{0x48,0x80a06001},
{0x4c,0x12800015},
{0x50,0x033fc200},
{0x54,0xc2002208},
{0x58,0x80a06000},
{0x5c,0x22800007},
{0x60,0xc2102548},
{0x64,0xc2002558},
{0x68,0x80a06000},
{0x6c,0x22800007},
{0x70,0xc0202598},
{0x74,0xc2102548},
{0x78,0x80886001},
{0x7c,0x22800005},
{0xf0,0x58},
{0x00,0xc2002598},
{0x04,0xc0202598},
{0x08,0x10800005},
{0x0c,0xda002234},
{0x10,0x80a06000},
{0x14,0x22800002},
{0x18,0xda00233c},
{0x1c,0x033fc200},
{0x20,0x82106070},
{0x24,0x81c3e008},
{0x28,0xda204000},
{0x2c,0x9de3bf98},
{0x30,0xc2002588},
{0x34,0x80a06000},
{0x38,0x0280000f},
{0x3c,0x11000018},
{0x40,0xc2102548},
{0x44,0x80886001},
{0x48,0x22800010},
{0x4c,0xc200258c},
{0x50,0xc2002558},
{0x54,0x80a06000},
{0x58,0x3280000c},
{0x5c,0xc200258c},
{0x60,0xc2002594},
{0x64,0x80a06001},
{0x68,0x32800008},
{0x6c,0xc200258c},
{0x70,0x11000018},
{0x74,0x90122340},
{0x78,0xd0202590},
{0x7c,0xc0202588},
{0xf0,0x59},
{0x00,0x10800014},
{0x04,0xd2002594},
{0x08,0x80a06000},
{0x0c,0x1280000f},
{0x10,0x82102001},
{0x14,0xd2002598},
{0x18,0xc2002554},
{0x1c,0x80a24001},
{0x20,0x1a800007},
{0x24,0x11000017},
{0x28,0xc220258c},
{0x2c,0x82102001},
{0x30,0xc2202584},
{0x34,0x10800028},
{0x38,0xc0202598},
{0x3c,0x90122100},
{0x40,0x10800004},
{0x44,0xd0202590},
{0x48,0x10800023},
{0x4c,0xc2202584},
{0x50,0x7ffffbcf},
{0x54,0x01000000},
{0x58,0x13000018},
{0x5c,0xc2002fd0},
{0x60,0x92126200},
{0x64,0x9fc04000},
{0x68,0xd0002590},
{0x6c,0xc20026a0},
{0x70,0x82087dff},
{0x74,0xda08254e},
{0x78,0x80a36000},
{0x7c,0x12800006},
{0xf0,0x5a},
{0x00,0xc22026a0},
{0x04,0xc200218c},
{0x08,0x80a06000},
{0x0c,0x32800004},
{0x10,0xc220256c},
{0x14,0x82102080},
{0x18,0xc220256c},
{0x1c,0x033fc200},
{0x20,0x82106030},
{0x24,0xda004000},
{0x28,0xc2002670},
{0x2c,0x80a34001},
{0x30,0x32800007},
{0x34,0xc2002548},
{0x38,0xc2002200},
{0x3c,0x80a06000},
{0x40,0x02800005},
{0x44,0x01000000},
{0x48,0xc2002548},
{0x4c,0x82106001},
{0x50,0xc2202548},
{0x54,0x81c7e008},
{0x58,0x81e80000},
{0x5c,0x1500003f},
{0x60,0xd8002508},
{0x64,0x8212a300},
{0x68,0x9a0b0001},
{0x6c,0x808b3f00},
{0x70,0x02800015},
{0x74,0x901020a5},
{0x78,0xc200254c},
{0x7c,0x8210400d},
{0xf0,0x5b},
{0x00,0xc220254c},
{0x04,0x1b3fc000},
{0x08,0xc2002500},
{0x0c,0x960b000d},
{0x10,0x80a06026},
{0x14,0xc0202508},
{0x18,0x0880000b},
{0x1c,0x033fffc0},
{0x20,0x9a0b0001},
{0x24,0x03168000},
{0x28,0x80a2c001},
{0x2c,0x12800006},
{0x30,0x9412a3ff},
{0x34,0xc2002548},
{0x38,0x8208400a},
{0x3c,0x8210400d},
{0x40,0xc2202548},
{0x44,0x03000006},
{0x48,0x81c0630c},
{0x4c,0x01000000},
{0x50,0x01000000},
{0x54,0xda00247c},
{0x58,0xc20022f8},
{0x5c,0x8258400d},
{0x60,0x83306001},
{0x64,0x9a102000},
{0x68,0x80a34001},
{0x6c,0x1a800015},
{0x70,0x031fffdf},
{0x74,0x961063ff},
{0x78,0x98036001},
{0x7c,0x80a26008},
{0xf0,0x5c},
{0x00,0x04800006},
{0x04,0x9b2b6002},
{0x08,0xc202000d},
{0x0c,0x83306001},
{0x10,0x10800003},
{0x14,0x8208400b},
{0x18,0xc202000d},
{0x1c,0x82584009},
{0x20,0xc222000d},
{0x24,0xda00247c},
{0x28,0xc20022f8},
{0x2c,0x8258400d},
{0x30,0x83306001},
{0x34,0x80a30001},
{0x38,0x0abffff0},
{0x3c,0x9a10000c},
{0x40,0x81c3e008},
{0x44,0x01000000},
{0x48,0x9de3bf98},
{0x4c,0xe6002460},
{0x50,0x80a4e000},
{0x54,0x02800070},
{0x58,0x01000000},
{0x5c,0xc2002594},
{0x60,0xee002588},
{0x64,0x9805c001},
{0x68,0xc2002554},
{0x6c,0x80a30001},
{0x70,0x12800069},
{0x74,0x01000000},
{0x78,0xda002598},
{0x7c,0xc200258c},
{0xf0,0x5d},
{0x00,0x8200400d},
{0x04,0x80a0400c},
{0x08,0x02800004},
{0x0c,0x80a36000},
{0x10,0x12800061},
{0x14,0x01000000},
{0x18,0x96102001},
{0x1c,0xe20022fc},
{0x20,0x80a2c011},
{0x24,0x1880002d},
{0x28,0x9e102000},
{0x2c,0xe40022f8},
{0x30,0x13000019},
{0x34,0x94102001},
{0x38,0x80a28012},
{0x3c,0x18800020},
{0x40,0xa0102000},
{0x44,0x832ae002},
{0x48,0x98006030},
{0x4c,0xac126080},
{0x50,0xaa126050},
{0x54,0xa81260b0},
{0x58,0xd00022f8},
{0x5c,0xda030016},
{0x60,0x80a34013},
{0x64,0x26800013},
{0x68,0x9402a001},
{0x6c,0x80a2a001},
{0x70,0x22800007},
{0x74,0xc20022f8},
{0x78,0xc2030015},
{0x7c,0x80a34001},
{0xf0,0x5e},
{0x00,0x2480000c},
{0x04,0x9402a001},
{0x08,0xc20022f8},
{0x0c,0x80a28001},
{0x10,0x22800007},
{0x14,0xa0042001},
{0x18,0xc2030014},
{0x1c,0x80a34001},
{0x20,0x26800004},
{0x24,0x9402a001},
{0x28,0xa0042001},
{0x2c,0x9402a001},
{0x30,0x80a28008},
{0x34,0x08bfffea},
{0x38,0x98032030},
{0x3c,0x80a4000f},
{0x40,0x34800002},
{0x44,0x9e100010},
{0x48,0x9602e001},
{0x4c,0x80a2c011},
{0x50,0x28bfffda},
{0x54,0x94102001},
{0x58,0x96102000},
{0x5c,0xc20ae464},
{0x60,0x80a06000},
{0x64,0x22800006},
{0x68,0x9602e001},
{0x6c,0x80a3c001},
{0x70,0x34800007},
{0x74,0xc20ae278},
{0x78,0x9602e001},
{0x7c,0x80a2e003},
{0xf0,0x5f},
{0x00,0x24bffff8},
{0x04,0xc20ae464},
{0x08,0x30800023},
{0x0c,0xda00256c},
{0x10,0x8258400d},
{0x14,0x83306007},
{0x18,0xc220256c},
{0x1c,0xe00ae468},
{0x20,0x80a42000},
{0x24,0x0280001c},
{0x28,0x80a5e000},
{0x2c,0x32800007},
{0x30,0xc200258c},
{0x34,0x11000018},
{0x38,0x90122340},
{0x3c,0x7fffff86},
{0x40,0xd2002594},
{0x44,0xc200258c},
{0x48,0x80a06000},
{0x4c,0x32800007},
{0x50,0xc2002588},
{0x54,0x11000017},
{0x58,0x90122100},
{0x5c,0x7fffff7e},
{0x60,0xd2002598},
{0x64,0xc2002588},
{0x68,0x82004010},
{0x6c,0xc2202588},
{0x70,0xda00258c},
{0x74,0xc2002554},
{0x78,0x80a34001},
{0x7c,0x18800005},
{0xf0,0x60},
{0x00,0x82102001},
{0x04,0x82034010},
{0x08,0xc220258c},
{0x0c,0x82102001},
{0x10,0xc2202584},
{0x14,0x81c7e008},
{0x18,0x81e80000},
{0x1c,0x9de3bf98},
{0x20,0xc20025a8},
{0x24,0x82006001},
{0x28,0xda002310},
{0x2c,0x80a0400d},
{0x30,0x0a800060},
{0x34,0xc22025a8},
{0x38,0xd800227c},
{0x3c,0x80a32000},
{0x40,0x02800038},
{0x44,0xc02025a8},
{0x48,0x1b000007},
{0x4c,0x9a1363ff},
{0x50,0x8333200d},
{0x54,0x9208400d},
{0x58,0xc200258c},
{0x5c,0x80a06000},
{0x60,0x03000017},
{0x64,0xa4106100},
{0x68,0x900b000d},
{0x6c,0xa2102000},
{0x70,0x02800004},
{0x74,0x94102000},
{0x78,0x82006400},
{0x7c,0xa4106340},
{0xf0,0x61},
{0x00,0xda0022f8},
{0x04,0xc200247c},
{0x08,0x9a5b4001},
{0x0c,0xa0102000},
{0x10,0x80a4000d},
{0x14,0x1a800013},
{0x18,0x03000018},
{0x1c,0x9e106200},
{0x20,0x9610000d},
{0x24,0x9a040010},
{0x28,0xc214800d},
{0x2c,0x80a24001},
{0x30,0xa2400011},
{0x34,0xc213400f},
{0x38,0x80a04008},
{0x3c,0x0a800005},
{0x40,0xa0042001},
{0x44,0x80a04009},
{0x48,0x08800004},
{0x4c,0x80a4000b},
{0x50,0x9402a001},
{0x54,0x80a4000b},
{0x58,0x0abffff4},
{0x5c,0x9a040010},
{0x60,0xa133201a},
{0x64,0x80a44010},
{0x68,0x14800003},
{0x6c,0x9a102001},
{0x70,0x9a102000},
{0x74,0x80a28010},
{0x78,0x14800003},
{0x7c,0x82102001},
{0xf0,0x62},
{0x00,0x82102000},
{0x04,0x80934001},
{0x08,0x22800007},
{0x0c,0xc2002274},
{0x10,0x033fc180},
{0x14,0x1b008000},
{0x18,0x8210603c},
{0x1c,0xda204000},
{0x20,0xc2002274},
{0x24,0x80a06000},
{0x28,0x02800022},
{0x2c,0xa2102000},
{0x30,0xc20023d4},
{0x34,0x80a44001},
{0x38,0xa4102000},
{0x3c,0x1a800016},
{0x40,0xa0102000},
{0x44,0xc200247c},
{0x48,0x80a40001},
{0x4c,0x3a80000f},
{0x50,0xa404a001},
{0x54,0x7ffff8c3},
{0x58,0x90100010},
{0x5c,0x92100008},
{0x60,0x7ffff868},
{0x64,0x90100012},
{0x68,0x0300003f},
{0x6c,0xda002274},
{0x70,0x821063ff},
{0x74,0x9a0b4001},
{0x78,0x80a2000d},
{0x7c,0xa2400011},
{0xf0,0x63},
{0x00,0x10bffff1},
{0x04,0xa0042001},
{0x08,0xc20023d4},
{0x0c,0x10bfffec},
{0x10,0x80a48001},
{0x14,0xc2102274},
{0x18,0x80a44001},
{0x1c,0x08800005},
{0x20,0x033fc180},
{0x24,0x1b004000},
{0x28,0x8210603c},
{0x2c,0xda204000},
{0x30,0x81c7e008},
{0x34,0x81e80000},
{0x38,0x9de3bf98},
{0x3c,0xda002310},
{0x40,0x80a36000},
{0x44,0x02800058},
{0x48,0x01000000},
{0x4c,0xc200254c},
{0x50,0x80886100},
{0x54,0x12800054},
{0x58,0x01000000},
{0x5c,0xc2002578},
{0x60,0x82006001},
{0x64,0x80a0400d},
{0x68,0x0a80004f},
{0x6c,0xc2202578},
{0x70,0xa4102000},
{0x74,0xc20023d4},
{0x78,0x80a48001},
{0x7c,0xc0202578},
{0xf0,0x64},
{0x00,0xa2102000},
{0x04,0x1a80002c},
{0x08,0xa72c6002},
{0x0c,0xc204e364},
{0x10,0x80a06000},
{0x14,0x02800024},
{0x18,0xa0102000},
{0x1c,0xc20022fc},
{0x20,0x80a40001},
{0x24,0x1a800020},
{0x28,0x15000018},
{0x2c,0xc2002548},
{0x30,0x80886020},
{0x34,0x03000017},
{0x38,0x9a106100},
{0x3c,0xc20c2380},
{0x40,0x90100011},
{0x44,0x9412a200},
{0x48,0x02800009},
{0x4c,0x920860ff},
{0x50,0xc200258c},
{0x54,0x80a06000},
{0x58,0x22800005},
{0x5c,0x9410000d},
{0x60,0x03000018},
{0x64,0x9a106340},
{0x68,0x9410000d},
{0x6c,0x7ffff84e},
{0x70,0xa0042001},
{0x74,0xc204e364},
{0x78,0xda002348},
{0x7c,0x98020001},
{0xf0,0x65},
{0x00,0x82034001},
{0x04,0x80a20001},
{0x08,0x38bfffe5},
{0x0c,0xa404a001},
{0x10,0x80a3000d},
{0x14,0x3abfffe3},
{0x18,0xc20022fc},
{0x1c,0x10bfffe0},
{0x20,0xa404a001},
{0x24,0xa2046001},
{0x28,0xc20023d4},
{0x2c,0x10bfffd6},
{0x30,0x80a44001},
{0x34,0xd8002574},
{0x38,0x80a0000c},
{0x3c,0x9a603fff},
{0x40,0x80a00012},
{0x44,0x82603fff},
{0x48,0x808b4001},
{0x4c,0x0280000a},
{0x50,0x80a4a000},
{0x54,0xda002548},
{0x58,0x83336005},
{0x5c,0x82086001},
{0x60,0x82186001},
{0x64,0x83286005},
{0x68,0x9a0b7fdf},
{0x6c,0x9a134001},
{0x70,0xda202548},
{0x74,0x12800004},
{0x78,0x82032001},
{0x7c,0x10800003},
{0xf0,0x66},
{0x00,0xc0202574},
{0x04,0xc2202574},
{0x08,0xc2002574},
{0x0c,0x80a06002},
{0x10,0x08800005},
{0x14,0x1b000040},
{0x18,0xc200254c},
{0x1c,0x8210400d},
{0x20,0xc220254c},
{0x24,0x81c7e008},
{0x28,0x81e80000},
{0x2c,0x9de3bf58},
{0x30,0xc2002548},
{0x34,0x80886001},
{0x38,0x1280006d},
{0x3c,0x01000000},
{0x40,0xfa002500},
{0x44,0xc20021f4},
{0x48,0x80a74001},
{0x4c,0x18800068},
{0x50,0x01000000},
{0x54,0xc200254c},
{0x58,0x8330600b},
{0x5c,0x82086001},
{0x60,0x80a00001},
{0x64,0x9a603fff},
{0x68,0x9403400d},
{0x6c,0xc252a210},
{0x70,0x80a06000},
{0x74,0x0280005e},
{0x78,0x8207bfb8},
{0x7c,0xb810200f},
{0xf0,0x67},
{0x00,0xc0204000},
{0x04,0xb8873fff},
{0x08,0x1cbffffe},
{0x0c,0x82006004},
{0x10,0xb0102001},
{0x14,0xc2002300},
{0x18,0x80a60001},
{0x1c,0x1880003b},
{0x20,0x03000019},
{0x24,0x82106080},
{0x28,0x96006030},
{0x2c,0xb4102001},
{0x30,0xc2002308},
{0x34,0x80a68001},
{0x38,0x38800030},
{0x3c,0xb0062001},
{0x40,0xb202e004},
{0x44,0xfa52a210},
{0x48,0xc2064000},
{0x4c,0x80a0401d},
{0x50,0x36800025},
{0x54,0xb406a001},
{0x58,0x832ea018},
{0x5c,0xbb2e2010},
{0x60,0x8200401d},
{0x64,0x9e006001},
{0x68,0xb8102000},
{0x6c,0x98102001},
{0x70,0xb607bfb8},
{0x74,0xbb2f2002},
{0x78,0xc20f67f8},
{0x7c,0x80a68001},
{0xf0,0x68},
{0x00,0x1280000f},
{0x04,0xb8072001},
{0x08,0xc20f67f9},
{0x0c,0x80a60001},
{0x10,0x3280000c},
{0x14,0xc21767f8},
{0x18,0xd826c000},
{0x1c,0xc21767fa},
{0x20,0x80a061fe},
{0x24,0x38800010},
{0x28,0xb406a001},
{0x2c,0xc20767f8},
{0x30,0x82006001},
{0x34,0x1080000b},
{0x38,0xc22767f8},
{0x3c,0xc21767f8},
{0x40,0x80a06000},
{0x44,0x12800005},
{0x48,0x80a7200f},
{0x4c,0xd826c000},
{0x50,0x10800004},
{0x54,0xde2767f8},
{0x58,0x08bfffe7},
{0x5c,0xb606e004},
{0x60,0xb406a001},
{0x64,0xc2002308},
{0x68,0x80a68001},
{0x6c,0x08bfffd6},
{0x70,0xb2066004},
{0x74,0xb0062001},
{0x78,0xc2002300},
{0x7c,0x80a60001},
{0xf0,0x69},
{0x00,0x08bfffcb},
{0x04,0x9602e030},
{0x08,0xb4102000},
{0x0c,0xb8102000},
{0x10,0xb607bff8},
{0x14,0xbb2f2002},
{0x18,0x8207401b},
{0x1c,0xc2007fc0},
{0x20,0x80a06000},
{0x24,0x32800004},
{0x28,0xfa1767fa},
{0x2c,0x10800005},
{0x30,0xc02767f8},
{0x34,0xc20b63cc},
{0x38,0x80a74001},
{0x3c,0xb466bfff},
{0x40,0xb8072001},
{0x44,0x80a7200f},
{0x48,0x08bffff4},
{0x4c,0xbb2f2002},
{0x50,0xc20b63ce},
{0x54,0x80a68001},
{0x58,0x08800005},
{0x5c,0x3b000200},
{0x60,0xc200254c},
{0x64,0x8210401d},
{0x68,0xc220254c},
{0x6c,0x81c7e008},
{0x70,0x81e80000},
{0x74,0x9de3bf90},
{0x78,0xc2002200},
{0x7c,0x80a06000},
{0xf0,0x6a},
{0x00,0x1280000a},
{0x04,0xba102000},
{0x08,0xc2002548},
{0x0c,0x82087ffb},
{0x10,0xc2202548},
{0x14,0x033fc180},
{0x18,0x8210602c},
{0x1c,0xc0204000},
{0x20,0x1080007b},
{0x24,0xc020253c},
{0x28,0x9a102001},
{0x2c,0xd6102238},
{0x30,0x1080002e},
{0x34,0x9810200c},
{0x38,0x92106080},
{0x3c,0x9e102000},
{0x40,0xb407bff8},
{0x44,0xb0102000},
{0x48,0x15000004},
{0x4c,0xd426bff8},
{0x50,0xb2102000},
{0x54,0x82060019},
{0x58,0xf8086440},
{0x5c,0x8203001c},
{0x60,0x80a72000},
{0x64,0x02800010},
{0x68,0x83286002},
{0x6c,0xf8004009},
{0x70,0xc206bff8},
{0x74,0x80a70001},
{0x78,0x16800003},
{0x7c,0xb2066001},
{0xf0,0x6b},
{0x00,0xf826bff8},
{0x04,0xc210223a},
{0x08,0x80a70001},
{0x0c,0x04800003},
{0x10,0xb6270001},
{0x14,0xba07401b},
{0x18,0x80a6600b},
{0x1c,0x28bfffef},
{0x20,0x82060019},
{0x24,0x80a66000},
{0x28,0x2280000a},
{0x2c,0x9e03e001},
{0x30,0xf810223a},
{0x34,0xc206bff8},
{0x38,0x80a0401c},
{0x3c,0x26800004},
{0x40,0xf826bff8},
{0x44,0x82584019},
{0x48,0xba274001},
{0x4c,0x9e03e001},
{0x50,0xb006200c},
{0x54,0x80a3e001},
{0x58,0x08bfffdd},
{0x5c,0xb406a004},
{0x60,0x9a036001},
{0x64,0x9803200c},
{0x68,0x80a2e000},
{0x6c,0x32800004},
{0x70,0x80a3400b},
{0x74,0xc2002200},
{0x78,0x80a34001},
{0x7c,0x08bfffcf},
{0xf0,0x6c},
{0x00,0x03000019},
{0x04,0x80a76000},
{0x08,0x04800015},
{0x0c,0xc207bff0},
{0x10,0xf807bff4},
{0x14,0xba5f4001},
{0x18,0x82070001},
{0x1c,0xbb2f6002},
{0x20,0x9b3f601f},
{0x24,0x81836000},
{0x28,0x01000000},
{0x2c,0x01000000},
{0x30,0x01000000},
{0x34,0xba7f4001},
{0x38,0xba5f401c},
{0x3c,0x9b3f601f},
{0x40,0x81836000},
{0x44,0x01000000},
{0x48,0x01000000},
{0x4c,0x01000000},
{0x50,0xba7f4001},
{0x54,0x10800003},
{0x58,0xfa202504},
{0x5c,0xc0202504},
{0x60,0xfa10223e},
{0x64,0xc2002504},
{0x68,0x80a0401d},
{0x6c,0x3480000a},
{0x70,0xc2002548},
{0x74,0xfa10223c},
{0x78,0x80a76000},
{0x7c,0x2280000b},
{0xf0,0x6d},
{0x00,0xc2002548},
{0x04,0xc2082517},
{0x08,0x80a0401d},
{0x0c,0x0a800007},
{0x10,0xc2002548},
{0x14,0x80886008},
{0x18,0x22800008},
{0x1c,0xc200253c},
{0x20,0x10800008},
{0x24,0xc020253c},
{0x28,0x80886008},
{0x2c,0x22800005},
{0x30,0xc020253c},
{0x34,0xc200253c},
{0x38,0x82006001},
{0x3c,0xc220253c},
{0x40,0xfa00253c},
{0x44,0xc2002290},
{0x48,0x80a74001},
{0x4c,0x0880000b},
{0x50,0xfa002548},
{0x54,0x83376003},
{0x58,0x82086001},
{0x5c,0x82186001},
{0x60,0x83286002},
{0x64,0xba0f7ffb},
{0x68,0xba174001},
{0x6c,0xfa202548},
{0x70,0xc020253c},
{0x74,0xfa002548},
{0x78,0xbb376002},
{0x7c,0x033fc180},
{0xf0,0x6e},
{0x00,0xba0f6001},
{0x04,0x8210602c},
{0x08,0xfa204000},
{0x0c,0x81c7e008},
{0x10,0x81e80000},
{0x14,0x9de3bf70},
{0x18,0xc2002548},
{0x1c,0x80886400},
{0x20,0x12800098},
{0x24,0x1b00003f},
{0x28,0xc2002350},
{0x2c,0x9a1363ff},
{0x30,0xba08400d},
{0x34,0xa4102001},
{0x38,0xda002300},
{0x3c,0x80a4800d},
{0x40,0x18800055},
{0x44,0xa3306010},
{0x48,0xae10200c},
{0x4c,0xac10200c},
{0x50,0xaa102000},
{0x54,0xa8102000},
{0x58,0xa6102000},
{0x5c,0x80a46000},
{0x60,0x0280002c},
{0x64,0xa0102000},
{0x68,0x03000019},
{0x6c,0x96106080},
{0x70,0x92102000},
{0x74,0x9807bfd0},
{0x78,0x8204c009},
{0x7c,0xda086440},
{0xf0,0x6f},
{0x00,0x8205800d},
{0x04,0x80a36000},
{0x08,0x02800008},
{0x0c,0x83286002},
{0x10,0xc200400b},
{0x14,0xc2230000},
{0x18,0x92026001},
{0x1c,0x80a2600b},
{0x20,0x04bffff6},
{0x24,0x98032004},
{0x28,0x7ffff58b},
{0x2c,0x9007bfd0},
{0x30,0x80a74011},
{0x34,0x1480000b},
{0x38,0x9210001d},
{0x3c,0x832f6002},
{0x40,0x8200401e},
{0x44,0x9a007fd0},
{0x48,0xc2034000},
{0x4c,0x92026001},
{0x50,0xa0040001},
{0x54,0x80a24011},
{0x58,0x04bffffc},
{0x5c,0x9a036004},
{0x60,0x8224401d},
{0x64,0x82006001},
{0x68,0x9b3c201f},
{0x6c,0x81836000},
{0x70,0x01000000},
{0x74,0x01000000},
{0x78,0x01000000},
{0x7c,0xa07c0001},
{0xf0,0x70},
{0x00,0xc25021ae},
{0x04,0x80a40001},
{0x08,0x26800002},
{0x0c,0xa0100001},
{0x10,0x92102000},
{0x14,0x15000019},
{0x18,0x82050009},
{0x1c,0xda086440},
{0x20,0x8205c00d},
{0x24,0x92026001},
{0x28,0x9612a080},
{0x2c,0x80a36000},
{0x30,0x0280000e},
{0x34,0x99286002},
{0x38,0xc20023c8},
{0x3c,0x83306011},
{0x40,0xda03000b},
{0x44,0x80886001},
{0x48,0x02800005},
{0x4c,0x9a234010},
{0x50,0xc20ca2af},
{0x54,0x825b4001},
{0x58,0x9b386007},
{0x5c,0x80a2600b},
{0x60,0x04bfffee},
{0x64,0xda23000b},
{0x68,0xaa056001},
{0x6c,0xa604e00c},
{0x70,0x80a56001},
{0x74,0x04bfffba},
{0x78,0xa805200c},
{0x7c,0xa404a001},
{0xf0,0x71},
{0x00,0xc2002300},
{0x04,0x80a48001},
{0x08,0xac05a00c},
{0x0c,0x08bfffb1},
{0x10,0xae05e00c},
{0x14,0xc2082247},
{0x18,0x80a06000},
{0x1c,0x02800039},
{0x20,0x01000000},
{0x24,0xc20022f8},
{0x28,0x80a48001},
{0x2c,0x18800035},
{0x30,0x82048012},
{0x34,0x82004012},
{0x38,0xa1286004},
{0x3c,0xa2100010},
{0x40,0x92102001},
{0x44,0xc20022fc},
{0x48,0x80a24001},
{0x4c,0x1880000e},
{0x50,0x03000019},
{0x54,0x82106080},
{0x58,0x82044001},
{0x5c,0x9a006004},
{0x60,0x9807bfd0},
{0x64,0xc2034000},
{0x68,0xc2230000},
{0x6c,0x92026001},
{0x70,0xc20022fc},
{0x74,0x80a24001},
{0x78,0x9a036004},
{0x7c,0x08bffffa},
{0xf0,0x72},
{0x00,0x98032004},
{0x04,0x9007bfd0},
{0x08,0x7ffff533},
{0x0c,0xd20022fc},
{0x10,0xc2082247},
{0x14,0x83286002},
{0x18,0x8200401e},
{0x1c,0xda007fd0},
{0x20,0x80a36000},
{0x24,0x26800012},
{0x28,0xa404a001},
{0x2c,0x92102001},
{0x30,0xc20022fc},
{0x34,0x80a24001},
{0x38,0x1880000c},
{0x3c,0x03000019},
{0x40,0x96106080},
{0x44,0x98042004},
{0x48,0xc203000b},
{0x4c,0x8220400d},
{0x50,0xc223000b},
{0x54,0x92026001},
{0x58,0xc20022fc},
{0x5c,0x80a24001},
{0x60,0x08bffffa},
{0x64,0x98032004},
{0x68,0xa404a001},
{0x6c,0xc20022f8},
{0x70,0x80a48001},
{0x74,0xa2046030},
{0x78,0x08bfffd2},
{0x7c,0xa0042030},
{0xf0,0x73},
{0x00,0x81c7e008},
{0x04,0x81e80000},
{0x08,0x9de3bf58},
{0x0c,0xe2502458},
{0x10,0x80a46000},
{0x14,0x02800058},
{0x18,0x01000000},
{0x1c,0xc20022f8},
{0x20,0x80a44001},
{0x24,0x1a800054},
{0x28,0xa0102001},
{0x2c,0xc20022fc},
{0x30,0x80a40001},
{0x34,0x18800050},
{0x38,0xe450245a},
{0x3c,0x96102001},
{0x40,0xc20022f8},
{0x44,0x80a2c001},
{0x48,0x1880000f},
{0x4c,0x03000019},
{0x50,0x9b2c2002},
{0x54,0x82106080},
{0x58,0x9a034001},
{0x5c,0x9a036030},
{0x60,0x9807bfb8},
{0x64,0xc2034000},
{0x68,0xc2230000},
{0x6c,0x9602e001},
{0x70,0xc20022f8},
{0x74,0x80a2c001},
{0x78,0x9a036030},
{0x7c,0x08bffffa},
{0xf0,0x74},
{0x00,0x98032004},
{0x04,0x9007bfb8},
{0x08,0x7ffff4f3},
{0x0c,0xd20022f8},
{0x10,0x96100012},
{0x14,0x80a48011},
{0x18,0x1480000b},
{0x1c,0x94102000},
{0x20,0x832ca002},
{0x24,0x8200401e},
{0x28,0x9a007fb8},
{0x2c,0xc2034000},
{0x30,0x9602e001},
{0x34,0x94028001},
{0x38,0x80a2c011},
{0x3c,0x04bffffc},
{0x40,0x9a036004},
{0x44,0x82244012},
{0x48,0x82006001},
{0x4c,0x9b3aa01f},
{0x50,0x81836000},
{0x54,0x01000000},
{0x58,0x01000000},
{0x5c,0x01000000},
{0x60,0x947a8001},
{0x64,0xc25021ac},
{0x68,0x80a28001},
{0x6c,0x26800002},
{0x70,0x94100001},
{0x74,0x96102001},
{0x78,0xc20022f8},
{0x7c,0x80a2c001},
{0xf0,0x75},
{0x00,0x18800018},
{0x04,0x9b2c2002},
{0x08,0x03000019},
{0x0c,0x92106080},
{0x10,0x98036030},
{0x14,0xc2030009},
{0x18,0x9a20400a},
{0x1c,0xda230009},
{0x20,0xc20023c8},
{0x24,0x83306012},
{0x28,0x80886001},
{0x2c,0x02800009},
{0x30,0x9602e001},
{0x34,0xc20c22af},
{0x38,0x825b4001},
{0x3c,0x9b38601f},
{0x40,0x9b336019},
{0x44,0x8200400d},
{0x48,0x83386007},
{0x4c,0xc2230009},
{0x50,0xc20022f8},
{0x54,0x80a2c001},
{0x58,0x08bfffef},
{0x5c,0x98032030},
{0x60,0xa0042001},
{0x64,0xc20022fc},
{0x68,0x80a40001},
{0x6c,0x08bfffb5},
{0x70,0x96102001},
{0x74,0x81c7e008},
{0x78,0x81e80000},
{0x7c,0x9de3bf98},
{0xf0,0x76},
{0x00,0xfa5023c6},
{0x04,0x80a76000},
{0x08,0x0280003d},
{0x0c,0x9e102001},
{0x10,0xc20022fc},
{0x14,0x80a3c001},
{0x18,0x18800039},
{0x1c,0x17000019},
{0x20,0x8212e080},
{0x24,0x9810001d},
{0x28,0x9a006004},
{0x2c,0xb6102001},
{0x30,0xf20022f8},
{0x34,0x80a6c019},
{0x38,0xb4102000},
{0x3c,0x1880002b},
{0x40,0x82102000},
{0x44,0xf05023c4},
{0x48,0xba036030},
{0x4c,0xf8074000},
{0x50,0xb606e001},
{0x54,0x80a70018},
{0x58,0x06800004},
{0x5c,0xba076030},
{0x60,0xb406801c},
{0x64,0x82006001},
{0x68,0x80a6c019},
{0x6c,0x28bffff9},
{0x70,0xf8074000},
{0x74,0x80a06000},
{0x78,0x2280001d},
{0x7c,0x9e03e001},
{0xf0,0x77},
{0x00,0x953ea01f},
{0x04,0x8182a000},
{0x08,0x01000000},
{0x0c,0x01000000},
{0x10,0x01000000},
{0x14,0x827e8001},
{0x18,0x8258400c},
{0x1c,0xbb38601f},
{0x20,0xbb376016},
{0x24,0x8200401d},
{0x28,0xb6102001},
{0x2c,0xfa0022f8},
{0x30,0x80a6c01d},
{0x34,0x1880000d},
{0x38,0xb538600a},
{0x3c,0x832be002},
{0x40,0xba006030},
{0x44,0xb812e080},
{0x48,0xc207401c},
{0x4c,0x8220401a},
{0x50,0xc227401c},
{0x54,0xb606e001},
{0x58,0xc20022f8},
{0x5c,0x80a6c001},
{0x60,0x08bffffa},
{0x64,0xba076030},
{0x68,0x9e03e001},
{0x6c,0xc20022fc},
{0x70,0x80a3c001},
{0x74,0x08bfffce},
{0x78,0x9a036004},
{0x7c,0x81c7e008},
{0xf0,0x78},
{0x00,0x81e80000},
{0x04,0xc2082673},
{0x08,0xda00256c},
{0x0c,0x82006001},
{0x10,0xd808257f},
{0x14,0x9a5b4001},
{0x18,0x98032001},
{0x1c,0x81800000},
{0x20,0x01000000},
{0x24,0x01000000},
{0x28,0x01000000},
{0x2c,0x9a73400c},
{0x30,0xda20256c},
{0x34,0x96102000},
{0x38,0x832ae002},
{0x3c,0xd800256c},
{0x40,0xda1063b6},
{0x44,0x9a5b400c},
{0x48,0x9b336007},
{0x4c,0x9602e001},
{0x50,0x80a2e003},
{0x54,0x04bffff9},
{0x58,0xda206520},
{0x5c,0xc20023c0},
{0x60,0x80a06000},
{0x64,0x02800007},
{0x68,0x82103001},
{0x6c,0xc2002200},
{0x70,0x80a06000},
{0x74,0x22800005},
{0x78,0xc2002540},
{0x7c,0x82103001},
{0xf0,0x79},
{0x00,0xc220252c},
{0x04,0xc2002540},
{0x08,0x80a06000},
{0x0c,0x02800005},
{0x10,0xc2002288},
{0x14,0x9b306001},
{0x18,0x83306002},
{0x1c,0x8200400d},
{0x20,0xc220251c},
{0x24,0x03000007},
{0x28,0x81c0626c},
{0x2c,0x01000000},
{0x30,0x01000000},
{0x34,0x9de3bf98},
{0x38,0xc2002548},
{0x3c,0x80886100},
{0x40,0xac102000},
{0x44,0x128000cf},
{0x48,0xa6102000},
{0x4c,0xc2002568},
{0x50,0x80a06000},
{0x54,0x02800004},
{0x58,0xa2102001},
{0x5c,0x82007fff},
{0x60,0xc2202568},
{0x64,0xc2002300},
{0x68,0x80a44001},
{0x6c,0x388000a9},
{0x70,0xda002530},
{0x74,0xae10200c},
{0x78,0xa4102001},
{0x7c,0xc2002308},
{0xf0,0x7a},
{0x00,0x80a48001},
{0x04,0x18800092},
{0x08,0x9b2de002},
{0x0c,0x03000050},
{0x10,0xaa044001},
{0x14,0xa8036004},
{0x18,0xc2002514},
{0x1c,0x80a06009},
{0x20,0x1880009b},
{0x24,0x03000019},
{0x28,0x82106080},
{0x2c,0xda050001},
{0x30,0xc2002474},
{0x34,0x80a34001},
{0x38,0x0680007f},
{0x3c,0x03000040},
{0x40,0x90100012},
{0x44,0x7ffff80e},
{0x48,0x92100011},
{0x4c,0x80a22000},
{0x50,0x02800079},
{0x54,0x03000040},
{0x58,0xc2002ff0},
{0x5c,0x80a06000},
{0x60,0x2280000a},
{0x64,0xc2002fe0},
{0x68,0x90100012},
{0x6c,0x9fc04000},
{0x70,0x92100011},
{0x74,0xc200259c},
{0x78,0x80a06000},
{0x7c,0x1280006e},
{0xf0,0x7b},
{0x00,0x03000040},
{0x04,0xc2002fe0},
{0x08,0x80a06000},
{0x0c,0x2280000b},
{0x10,0xc2002ff4},
{0x14,0x90100012},
{0x18,0x92100011},
{0x1c,0x9fc04000},
{0x20,0xd4002470},
{0x24,0xc200259c},
{0x28,0x80a06000},
{0x2c,0x12800062},
{0x30,0x03000040},
{0x34,0xc2002ff4},
{0x38,0x80a06000},
{0x3c,0x02800006},
{0x40,0xa0102000},
{0x44,0x90100012},
{0x48,0x9fc04000},
{0x4c,0x92100011},
{0x50,0xe000259c},
{0x54,0x90100012},
{0x58,0x92100011},
{0x5c,0x94100010},
{0x60,0x7ffff831},
{0x64,0xd6002470},
{0x68,0x80a22000},
{0x6c,0x02800052},
{0x70,0x03000040},
{0x74,0xc2002fe0},
{0x78,0x80a06000},
{0x7c,0x02800007},
{0xf0,0x7c},
{0x00,0x90100012},
{0x04,0x92100011},
{0x08,0x9fc04000},
{0x0c,0x94102100},
{0x10,0x10800004},
{0x14,0x94100010},
{0x18,0xc020259c},
{0x1c,0x94100010},
{0x20,0x90100012},
{0x24,0x92100011},
{0x28,0x7ffff81f},
{0x2c,0x96102100},
{0x30,0x80a22000},
{0x34,0x22800011},
{0x38,0xc2002514},
{0x3c,0xc200259c},
{0x40,0x80a06000},
{0x44,0x3280000d},
{0x48,0xc2002514},
{0x4c,0xc2002280},
{0x50,0xd8002514},
{0x54,0xc2202568},
{0x58,0x9b2ca010},
{0x5c,0x832b2002},
{0x60,0x9a034011},
{0x64,0xda2066e0},
{0x68,0x98032001},
{0x6c,0xd8202514},
{0x70,0x10800006},
{0x74,0xac05a001},
{0x78,0x9b286002},
{0x7c,0xea2366e0},
{0xf0,0x7d},
{0x00,0x82006001},
{0x04,0xc2202514},
{0x08,0xc2002514},
{0x0c,0x80a0600a},
{0x10,0x12800029},
{0x14,0x03000040},
{0x18,0x03000019},
{0x1c,0x9e106080},
{0x20,0xe60026e0},
{0x24,0x90102001},
{0x28,0x932a2002},
{0x2c,0xd40266e0},
{0x30,0x980aafff},
{0x34,0x960cefff},
{0x38,0x8203000c},
{0x3c,0x9a02c00b},
{0x40,0x8200400c},
{0x44,0x9a03400b},
{0x48,0x9932a010},
{0x4c,0x980b2fff},
{0x50,0x9734e010},
{0x54,0x83286002},
{0x58,0x8200400c},
{0x5c,0x960aefff},
{0x60,0x9b2b6002},
{0x64,0x83286002},
{0x68,0x9a03400b},
{0x6c,0xd800400f},
{0x70,0x9b2b6002},
{0x74,0xc203400f},
{0x78,0x80a30001},
{0x7c,0x36800004},
{0xf0,0x7e},
{0x00,0xd42266dc},
{0x04,0xe62266dc},
{0x08,0xa610000a},
{0x0c,0x90022001},
{0x10,0xda002514},
{0x14,0x80a2000d},
{0x18,0x2abfffe5},
{0x1c,0x932a2002},
{0x20,0x832b6002},
{0x24,0xc02066e0},
{0x28,0x82037fff},
{0x2c,0xc2202514},
{0x30,0x03000040},
{0x34,0xaa054001},
{0x38,0xa404a001},
{0x3c,0xc2002308},
{0x40,0x80a48001},
{0x44,0x08bfff75},
{0x48,0xa8052004},
{0x4c,0xa2046001},
{0x50,0xc2002300},
{0x54,0x80a44001},
{0x58,0x08bfff68},
{0x5c,0xae05e00c},
{0x60,0x80a4e000},
{0x64,0x2280000b},
{0x68,0xda002530},
{0x6c,0xda002514},
{0x70,0x80a36009},
{0x74,0x38800007},
{0x78,0xda002530},
{0x7c,0x832b6002},
{0xf0,0x7f},
{0x00,0xe62066e0},
{0x04,0x82036001},
{0x08,0xc2202514},
{0x0c,0xda002530},
{0x10,0x80a5800d},
{0x14,0x14800006},
{0x18,0x82100016},
{0x1c,0xc2002514},
{0x20,0x80a34001},
{0x24,0x28800002},
{0x28,0x8210000d},
{0x2c,0x80a5a000},
{0x30,0x02800004},
{0x34,0xc2202530},
{0x38,0x1080000a},
{0x3c,0xc20021f8},
{0x40,0x80a06000},
{0x44,0x22800009},
{0x48,0xc2002530},
{0x4c,0xc20025ac},
{0x50,0x80a06000},
{0x54,0x22800004},
{0x58,0xc0202530},
{0x5c,0x82006001},
{0x60,0xc22025ac},
{0x64,0xc2002530},
{0x68,0x80a06000},
{0x6c,0x02800005},
{0x70,0x01000000},
{0x74,0xc2002548},
{0x78,0x82106040},
{0x7c,0xc2202548},
{0xf0,0x80},
{0x00,0x81c7e008},
{0x04,0x81e80000},
{0x08,0xd2002208},
{0x0c,0x80a26000},
{0x10,0x0280001a},
{0x14,0x01000000},
{0x18,0xc2102548},
{0x1c,0x80886001},
{0x20,0x12800016},
{0x24,0x01000000},
{0x28,0xc2002514},
{0x2c,0x80a06000},
{0x30,0x12800007},
{0x34,0xc2002558},
{0x38,0x80a06000},
{0x3c,0x0280000f},
{0x40,0x9a007fff},
{0x44,0x1080000d},
{0x48,0xda202558},
{0x4c,0x15200040},
{0x50,0x1b3fc200},
{0x54,0x9812a001},
{0x58,0x80a06000},
{0x5c,0x12800006},
{0x60,0x96136070},
{0x64,0xd8234000},
{0x68,0xc2002298},
{0x6c,0xc222c000},
{0x70,0xd4234000},
{0x74,0xd2202558},
{0x78,0x81c3e008},
{0x7c,0x01000000},
{0xf0,0x81},
{0x00,0x82220009},
{0x04,0x9a58400a},
{0x08,0x833b601f},
{0x0c,0x80a20009},
{0x10,0x83306019},
{0x14,0x04800004},
{0x18,0x90102000},
{0x1c,0x82034001},
{0x20,0x91386007},
{0x24,0x81c3e008},
{0x28,0x01000000},
{0x2c,0x9de3bf98},
{0x30,0xc20022f8},
{0x34,0x80a07fff},
{0x38,0x0280001d},
{0x3c,0xa8102001},
{0x40,0xa6102003},
{0x44,0x23000019},
{0x48,0xa12ce004},
{0x4c,0x82146088},
{0x50,0xa4146084},
{0x54,0xd2040001},
{0x58,0xd408228c},
{0x5c,0x7fffffe9},
{0x60,0xd0040012},
{0x64,0x9a146080},
{0x68,0xd024000d},
{0x6c,0xc2002308},
{0x70,0xa12ce002},
{0x74,0xa0040001},
{0x78,0xa12c2002},
{0x7c,0xa214607c},
{0xf0,0x82},
{0x00,0xd004000d},
{0x04,0xd2040011},
{0x08,0x7fffffde},
{0x0c,0xd408228d},
{0x10,0xd0240012},
{0x14,0xc20022f8},
{0x18,0xa8052001},
{0x1c,0x82006001},
{0x20,0x80a50001},
{0x24,0x08bfffe8},
{0x28,0xa604e003},
{0x2c,0xa6102001},
{0x30,0xc2002308},
{0x34,0x80a4c001},
{0x38,0x1880001c},
{0x3c,0x23000019},
{0x40,0xa12ce002},
{0x44,0x821460e0},
{0x48,0xa41460b0},
{0x4c,0xd2040001},
{0x50,0xd408228e},
{0x54,0x7fffffcb},
{0x58,0xd0040012},
{0x5c,0x9a146080},
{0x60,0xd024000d},
{0x64,0xc2002300},
{0x68,0xa0004001},
{0x6c,0xa0040001},
{0x70,0xa12c2002},
{0x74,0xa0040013},
{0x78,0xa12c2002},
{0x7c,0xa2146050},
{0xf0,0x83},
{0x00,0xd004000d},
{0x04,0xd2040011},
{0x08,0x7fffffbe},
{0x0c,0xd408228f},
{0x10,0xd0240012},
{0x14,0xa604e001},
{0x18,0xc2002308},
{0x1c,0x80a4c001},
{0x20,0x08bfffe8},
{0x24,0x23000019},
{0x28,0x81c7e008},
{0x2c,0x81e80000},
{0x30,0x9de3bf88},
{0x34,0xc2002fe4},
{0x38,0x9fc04000},
{0x3c,0xd0002590},
{0x40,0xda002550},
{0x44,0x832b6004},
{0x48,0x8220400d},
{0x4c,0xe000259c},
{0x50,0x82040001},
{0x54,0x83306004},
{0x58,0xc2202550},
{0x5c,0x11000018},
{0x60,0xc2002fe4},
{0x64,0x9fc04000},
{0x68,0x90122200},
{0x6c,0xc2002308},
{0x70,0xda002300},
{0x74,0x9a5b4001},
{0x78,0xc200259c},
{0x7c,0x8200400d},
{0xf0,0x84},
{0x00,0xc220259c},
{0x04,0xda00259c},
{0x08,0xc2002550},
{0x0c,0x80a34001},
{0x10,0x28800011},
{0x14,0xc2002548},
{0x18,0xc200259c},
{0x1c,0x80a04010},
{0x20,0x0880000d},
{0x24,0xc2002548},
{0x28,0x80a42000},
{0x2c,0x0280000a},
{0x30,0x01000000},
{0x34,0x82087f7f},
{0x38,0xc2202548},
{0x3c,0xc2002668},
{0x40,0x80a06000},
{0x44,0x26800006},
{0x48,0xc0202668},
{0x4c,0x10800005},
{0x50,0xc208254e},
{0x54,0x82106080},
{0x58,0xc2202548},
{0x5c,0xc208254e},
{0x60,0x80a00001},
{0x64,0x82602000},
{0x68,0xa0087ffe},
{0x6c,0xd8002548},
{0x70,0x83332010},
{0x74,0x80886001},
{0x78,0x02800004},
{0x7c,0xa0042003},
{0xf0,0x85},
{0x00,0x1080001d},
{0x04,0xa0102000},
{0x08,0x808b2001},
{0x0c,0x1280003f},
{0x10,0x03000007},
{0x14,0xda0026a0},
{0x18,0x808b4001},
{0x1c,0x3280003c},
{0x20,0xc0202538},
{0x24,0xda002664},
{0x28,0xc20021dc},
{0x2c,0x80a34001},
{0x30,0x2a800008},
{0x34,0xc2002514},
{0x38,0xc200254c},
{0x3c,0x8330600e},
{0x40,0x80886001},
{0x44,0x1280000a},
{0x48,0x808b2040},
{0x4c,0xc2002514},
{0x50,0x80a06000},
{0x54,0x22800009},
{0x58,0xc20c2314},
{0x5c,0x808b2080},
{0x60,0x22800006},
{0x64,0xc20c2314},
{0x68,0x808b2040},
{0x6c,0x32800028},
{0x70,0xc0202538},
{0x74,0xc20c2314},
{0x78,0x80a06000},
{0x7c,0x22800024},
{0xf0,0x86},
{0x00,0xc0202538},
{0x04,0xc2002538},
{0x08,0x82006001},
{0x0c,0xc2202538},
{0x10,0xda0c2314},
{0x14,0x80a0400d},
{0x18,0x0680001d},
{0x1c,0x01000000},
{0x20,0xc0202538},
{0x24,0xc20c234c},
{0x28,0xc227bfec},
{0x2c,0xc20c230c},
{0x30,0xc227bff0},
{0x34,0xa0102000},
{0x38,0xc2002308},
{0x3c,0x80a40001},
{0x40,0x1a800013},
{0x44,0x01000000},
{0x48,0xc20c2380},
{0x4c,0xc227bfe8},
{0x50,0xa2102000},
{0x54,0xc2002300},
{0x58,0x80a44001},
{0x5c,0x3a800006},
{0x60,0xa0042001},
{0x64,0x7ffff7e1},
{0x68,0x9007bfe8},
{0x6c,0x10bffffa},
{0x70,0xa2046001},
{0x74,0xc2002308},
{0x78,0x80a40001},
{0x7c,0x2abffff4},
{0xf0,0x87},
{0x00,0xc20c2380},
{0x04,0x30800002},
{0x08,0xc0202538},
{0x0c,0x81c7e008},
{0x10,0x81e80000},
{0x14,0x9de3bf80},
{0x18,0x03003fc0},
{0x1c,0x82106001},
{0x20,0xc227bff4},
{0x24,0xc227bff0},
{0x28,0xa4102000},
{0x2c,0xc2002514},
{0x30,0x80a48001},
{0x34,0x1a800025},
{0x38,0xa2102000},
{0x3c,0x8207bff8},
{0x40,0x9a044001},
{0x44,0xa12c6002},
{0x48,0xa0040001},
{0x4c,0xd44b7ff9},
{0x50,0x90100012},
{0x54,0x7ffff72a},
{0x58,0xd24b7ff8},
{0x5c,0xa2046001},
{0x60,0x80a46003},
{0x64,0x04bffff6},
{0x68,0xd0243fe8},
{0x6c,0xc2002fe8},
{0x70,0x80a06000},
{0x74,0x02800005},
{0x78,0xda07bfe4},
{0x7c,0x9fc04000},
{0xf0,0x88},
{0x00,0x9007bfe0},
{0x04,0xda07bfe4},
{0x08,0xc207bfec},
{0x0c,0x83286010},
{0x10,0x9b2b6018},
{0x14,0x9a034001},
{0x18,0xc207bfe0},
{0x1c,0x83286008},
{0x20,0x9a034001},
{0x24,0xc207bfe8},
{0x28,0x9a034001},
{0x2c,0x832ca002},
{0x30,0xda206708},
{0x34,0xa404a001},
{0x38,0xc2002514},
{0x3c,0x80a48001},
{0x40,0x0abfffdf},
{0x44,0xa2102000},
{0x48,0x81c7e008},
{0x4c,0x81e80000},
{0x50,0x9de3bf98},
{0x54,0x90102000},
{0x58,0xc2002514},
{0x5c,0x80a20001},
{0x60,0x1a800077},
{0x64,0x92102000},
{0x68,0xb72a2002},
{0x6c,0xf20ee708},
{0x70,0xc20ee709},
{0x74,0x80a64001},
{0x78,0x9e102000},
{0x7c,0x9a102000},
{0xf0,0x89},
{0x00,0x14800024},
{0x04,0x98102000},
{0x08,0x82064019},
{0x0c,0x82004019},
{0x10,0x3b000019},
{0x14,0xa0176080},
{0x18,0xb9286002},
{0x1c,0xc20ee70b},
{0x20,0xf40ee70a},
{0x24,0x80a68001},
{0x28,0x14800014},
{0x2c,0x8207001a},
{0x30,0x83286002},
{0x34,0xb0004010},
{0x38,0x94066001},
{0x3c,0xd60a670b},
{0x40,0xf6060000},
{0x44,0x8206a001},
{0x48,0xb4100001},
{0x4c,0xba5ec001},
{0x50,0xb0062004},
{0x54,0x80a6e000},
{0x58,0x04800005},
{0x5c,0x825ec00a},
{0x60,0x9a034001},
{0x64,0x9803001d},
{0x68,0x9e03c01b},
{0x6c,0x80a6800b},
{0x70,0x24bffff5},
{0x74,0xf6060000},
{0x78,0xb72a2002},
{0x7c,0xb2066001},
{0xf0,0x8a},
{0x00,0xc20ee709},
{0x04,0x80a64001},
{0x08,0x04bfffe5},
{0x0c,0xb807200c},
{0x10,0x832b6006},
{0x14,0xb92b2006},
{0x18,0x9b38601f},
{0x1c,0x81836000},
{0x20,0x01000000},
{0x24,0x01000000},
{0x28,0x01000000},
{0x2c,0xb678400f},
{0x30,0xfa0266e0},
{0x34,0x833f201f},
{0x38,0x81806000},
{0x3c,0x01000000},
{0x40,0x01000000},
{0x44,0x01000000},
{0x48,0xb87f000f},
{0x4c,0xbb37600c},
{0x50,0x808f6001},
{0x54,0x9a06ffa0},
{0x58,0x02800007},
{0x5c,0x98073fa0},
{0x60,0xc200237c},
{0x64,0x80a06000},
{0x68,0x22800003},
{0x6c,0x9a06ff60},
{0x70,0x98073f60},
{0x74,0x80a36000},
{0x78,0x24800002},
{0x7c,0x9a102001},
{0xf0,0x8b},
{0x00,0x80a32000},
{0x04,0x24800002},
{0x08,0x98102001},
{0x0c,0xfa0022f8},
{0x10,0x832f6006},
{0x14,0x80a34001},
{0x18,0x3a800002},
{0x1c,0x9a007fff},
{0x20,0xc20022fc},
{0x24,0x83286006},
{0x28,0x80a30001},
{0x2c,0x3a800002},
{0x30,0x98007fff},
{0x34,0xc20021e0},
{0x38,0x80a06000},
{0x3c,0x22800012},
{0x40,0x9e102000},
{0x44,0x80a76040},
{0x48,0x3880000f},
{0x4c,0x9e102000},
{0x50,0x81800000},
{0x54,0x01000000},
{0x58,0x01000000},
{0x5c,0x01000000},
{0x60,0x9ef3c001},
{0x64,0x12800004},
{0x68,0x80a3e00f},
{0x6c,0x10800006},
{0x70,0x9e102001},
{0x74,0x34800004},
{0x78,0x9e10200f},
{0x7c,0x10800003},
{0xf0,0x8c},
{0x00,0x832b6010},
{0x04,0x832b6010},
{0x08,0x8200400c},
{0x0c,0xbb2be01c},
{0x10,0xba074001},
{0x14,0xf80266e0},
{0x18,0x0300003c},
{0x1c,0xb80f0001},
{0x20,0xba07401c},
{0x24,0xfa2266e0},
{0x28,0x90022001},
{0x2c,0xc2002514},
{0x30,0x80a20001},
{0x34,0x0abfff8d},
{0x38,0x92026004},
{0x3c,0x7ffff534},
{0x40,0x91e8205a},
{0x44,0x01000000},
{0x48,0x9de3bf98},
{0x4c,0xd8002548},
{0x50,0x808b2001},
{0x54,0x12800081},
{0x58,0x01000000},
{0x5c,0xc208254d},
{0x60,0x80a06000},
{0x64,0x1280007d},
{0x68,0x01000000},
{0x6c,0xc208254e},
{0x70,0x80a06000},
{0x74,0x02800079},
{0x78,0x01000000},
{0x7c,0xc2002554},
{0xf0,0x8d},
{0x00,0x825860fa},
{0x04,0xda002500},
{0x08,0x80a34001},
{0x0c,0x0a800073},
{0x10,0x01000000},
{0x14,0xd6002668},
{0x18,0x80a2e000},
{0x1c,0x1480001c},
{0x20,0x8202ffff},
{0x24,0xc2002514},
{0x28,0x80a06001},
{0x2c,0x3280006b},
{0x30,0xc0202668},
{0x34,0xc20026e0},
{0x38,0x80a06000},
{0x3c,0x12800004},
{0x40,0x808b2040},
{0x44,0x10800065},
{0x48,0xc0202668},
{0x4c,0x32800006},
{0x50,0xd800239c},
{0x54,0x80a2e000},
{0x58,0x0680000d},
{0x5c,0x8202e001},
{0x60,0xd800239c},
{0x64,0x0300003f},
{0x68,0x9b332010},
{0x6c,0x821063ff},
{0x70,0x980b0001},
{0x74,0x9a38000d},
{0x78,0x9a23400c},
{0x7c,0x80a2c00d},
{0xf0,0x8e},
{0x00,0x06800005},
{0x04,0x03296956},
{0x08,0x8202ffff},
{0x0c,0x10800053},
{0x10,0xc2202668},
{0x14,0x9a10625a},
{0x18,0xc200250c},
{0x1c,0x80a0400d},
{0x20,0x02800004},
{0x24,0xa0102000},
{0x28,0xda20250c},
{0x2c,0xc0202664},
{0x30,0x832c2002},
{0x34,0x92006620},
{0x38,0xc2006620},
{0x3c,0x901026e0},
{0x40,0x80a06000},
{0x44,0x0280000d},
{0x48,0xa0042001},
{0x4c,0x7ffff57c},
{0x50,0x01000000},
{0x54,0xc2002300},
{0x58,0xda002308},
{0x5c,0x82584001},
{0x60,0x9a5b400d},
{0x64,0x8200400d},
{0x68,0x83286006},
{0x6c,0x80a20001},
{0x70,0x0a80003a},
{0x74,0x01000000},
{0x78,0x80a4200f},
{0x7c,0x08bfffee},
{0xf0,0x8f},
{0x00,0x832c2002},
{0x04,0x030041eb},
{0x08,0xc2202668},
{0x0c,0xa010200f},
{0x10,0x9b2c2002},
{0x14,0xc203661c},
{0x18,0xa0843fff},
{0x1c,0x12bffffd},
{0x20,0xc2236620},
{0x24,0xda002664},
{0x28,0xc20026e0},
{0x2c,0xc2202620},
{0x30,0x80a3600f},
{0x34,0x14800003},
{0x38,0x9010200f},
{0x3c,0x9010000d},
{0x40,0x03000017},
{0x44,0x9e106240},
{0x48,0x82006400},
{0x4c,0xa2106200},
{0x50,0x0300003f},
{0x54,0xa61063ff},
{0x58,0x92022001},
{0x5c,0xa0102000},
{0x60,0xa410000f},
{0x64,0x972c2002},
{0x68,0x8203c00b},
{0x6c,0xda106002},
{0x70,0x9804400b},
{0x74,0xd4132002},
{0x78,0xc213c00b},
{0x7c,0xd814400b},
{0xf0,0x90},
{0x00,0x82584008},
{0x04,0x9a5b4008},
{0x08,0x8200400c},
{0x0c,0x9a03400a},
{0x10,0x81800000},
{0x14,0x01000000},
{0x18,0x01000000},
{0x1c,0x01000000},
{0x20,0x82704009},
{0x24,0x81800000},
{0x28,0x01000000},
{0x2c,0x01000000},
{0x30,0x01000000},
{0x34,0x9a734009},
{0x38,0x83286010},
{0x3c,0x9a0b4013},
{0x40,0x8200400d},
{0x44,0xa0042001},
{0x48,0x80a4204f},
{0x4c,0x08bfffe6},
{0x50,0xc222c012},
{0x54,0xd2202664},
{0x58,0x81c7e008},
{0x5c,0x81e80000},
{0x60,0x9de3bf98},
{0x64,0xa2102000},
{0x68,0xc2002514},
{0x6c,0x80a44001},
{0x70,0xa0102000},
{0x74,0x1a800012},
{0x78,0x832c2002},
{0x7c,0x920066e0},
{0xf0,0x91},
{0x00,0xc20066e0},
{0x04,0x80a06000},
{0x08,0x02800009},
{0x0c,0x90100018},
{0x10,0x7ffff52b},
{0x14,0x01000000},
{0x18,0x82102001},
{0x1c,0x80a20019},
{0x20,0x1a800003},
{0x24,0x83284010},
{0x28,0xa2144001},
{0x2c,0xa0042001},
{0x30,0xc2002514},
{0x34,0x10bffff0},
{0x38,0x80a40001},
{0x3c,0x81c7e008},
{0x40,0x91e80011},
{0x44,0x9de3bf90},
{0x48,0x03003fc0},
{0x4c,0x82106001},
{0x50,0xc227bff0},
{0x54,0xc027bff4},
{0x58,0xa0102000},
{0x5c,0x8207bff8},
{0x60,0x82040001},
{0x64,0xd2487ff9},
{0x68,0xd0487ff8},
{0x6c,0x90060008},
{0x70,0x92064009},
{0x74,0x94102000},
{0x78,0x7ffff56b},
{0x7c,0x9610001a},
{0xf0,0x92},
{0x00,0x80a22000},
{0x04,0x02800004},
{0x08,0xa0042001},
{0x0c,0x10800006},
{0x10,0xb0102001},
{0x14,0x80a42004},
{0x18,0x04bffff2},
{0x1c,0x8207bff8},
{0x20,0xb0102000},
{0x24,0x81c7e008},
{0x28,0x81e80000},
{0x2c,0x9de3bf90},
{0x30,0x03003fc0},
{0x34,0x82106001},
{0x38,0xc227bff0},
{0x3c,0xc027bff4},
{0x40,0xda002500},
{0x44,0xc20022d0},
{0x48,0x80a34001},
{0x4c,0xb8102000},
{0x50,0xba102000},
{0x54,0x18800006},
{0x58,0xae102000},
{0x5c,0xc2002548},
{0x60,0x80886001},
{0x64,0x22800004},
{0x68,0xc200254c},
{0x6c,0xba102001},
{0x70,0xc200254c},
{0x74,0x80886200},
{0x78,0x32800010},
{0x7c,0xc20026a0},
{0xf0,0x93},
{0x00,0x03296956},
{0x04,0xda00250c},
{0x08,0x8210625a},
{0x0c,0x80a34001},
{0x10,0x12800006},
{0x14,0xc20023c8},
{0x18,0x80886800},
{0x1c,0x32800007},
{0x20,0xc20026a0},
{0x24,0xc20023c8},
{0x28,0x80886400},
{0x2c,0x22800014},
{0x30,0xec0022ac},
{0x34,0xc20026a0},
{0x38,0x80886200},
{0x3c,0x1280000a},
{0x40,0xb8102001},
{0x44,0x13000017},
{0x48,0xc2002fd0},
{0x4c,0x92126240},
{0x50,0x9fc04000},
{0x54,0xd0002590},
{0x58,0xc20026a0},
{0x5c,0x82106200},
{0x60,0xc22026a0},
{0x64,0x10800006},
{0x68,0xec0023a0},
{0x6c,0x03000080},
{0x70,0x82134001},
{0x74,0x1080007d},
{0x78,0xc220254c},
{0x7c,0x7ffff444},
{0xf0,0x94},
{0x00,0x901020aa},
{0x04,0xaa102000},
{0x08,0xa12d6003},
{0x0c,0xc2042730},
{0x10,0x80a06000},
{0x14,0x22800072},
{0x18,0xaa056001},
{0x1c,0x80a56000},
{0x20,0x12800008},
{0x24,0x80a76000},
{0x28,0xc2002540},
{0x2c,0x80a06000},
{0x30,0x1280000c},
{0x34,0x29200000},
{0x38,0x1080000a},
{0x3c,0xa8102000},
{0x40,0x02800005},
{0x44,0x90042730},
{0x48,0xc0242734},
{0x4c,0x10800063},
{0x50,0xc0242730},
{0x54,0x7fffff83},
{0x58,0x92100016},
{0x5c,0xa8100008},
{0x60,0x80a52000},
{0x64,0x1280000b},
{0x68,0xae15c014},
{0x6c,0xc2142734},
{0x70,0x80a06000},
{0x74,0x22800058},
{0x78,0xc0242734},
{0x7c,0xc2042734},
{0xf0,0x95},
{0x00,0x1b3fffc0},
{0x04,0x8200400d},
{0x08,0x10800054},
{0x0c,0xc2242734},
{0x10,0xc2142736},
{0x14,0x80a06000},
{0x18,0x0280000a},
{0x1c,0x80a56000},
{0x20,0xc2042734},
{0x24,0x82007fff},
{0x28,0xc2242734},
{0x2c,0xc2142736},
{0x30,0x80a06000},
{0x34,0x3280004a},
{0x38,0xaa056001},
{0x3c,0x80a56000},
{0x40,0x1280000c},
{0x44,0x1b004000},
{0x48,0xc200254c},
{0x4c,0x8210400d},
{0x50,0x10800042},
{0x54,0xc220254c},
{0x58,0xc200254c},
{0x5c,0x1b000080},
{0x60,0x8210400d},
{0x64,0xc220254c},
{0x68,0x10800037},
{0x6c,0xc0202570},
{0x70,0xda00254c},
{0x74,0x83336019},
{0x78,0x80886001},
{0x7c,0x12bfffbc},
{0xf0,0x96},
{0x00,0x80a72000},
{0x04,0x02bfffba},
{0x08,0xa2102000},
{0x0c,0xc2002514},
{0x10,0x80a44001},
{0x14,0x1a80002c},
{0x18,0x83350011},
{0x1c,0x80886001},
{0x20,0x02800027},
{0x24,0x9b2c6002},
{0x28,0xc20366e0},
{0x2c,0x9b306016},
{0x30,0x82086fff},
{0x34,0x83386006},
{0x38,0x9a0b603f},
{0x3c,0xa4006001},
{0x40,0xa6036001},
{0x44,0x92100013},
{0x48,0xd410246e},
{0x4c,0x7fffff5e},
{0x50,0x90100012},
{0x54,0x80a22000},
{0x58,0x12800011},
{0x5c,0x82102001},
{0x60,0xd410246c},
{0x64,0x80a2a000},
{0x68,0x22800011},
{0x6c,0xc2002570},
{0x70,0xc2002548},
{0x74,0x90100012},
{0x78,0x80886080},
{0x7c,0x0280000b},
{0xf0,0x97},
{0x00,0x92100013},
{0x04,0x7fffff50},
{0x08,0x01000000},
{0x0c,0x80a22000},
{0x10,0x22800007},
{0x14,0xc2002570},
{0x18,0x82102001},
{0x1c,0x83284011},
{0x20,0x10800007},
{0x24,0xa82d0001},
{0x28,0xc2002570},
{0x2c,0x82006001},
{0x30,0x80a06004},
{0x34,0x18bfffc9},
{0x38,0xc2202570},
{0x3c,0x10bfffd4},
{0x40,0xa2046001},
{0x44,0x80a52000},
{0x48,0x32800005},
{0x4c,0xaa056001},
{0x50,0xc0242734},
{0x54,0xc0242730},
{0x58,0xaa056001},
{0x5c,0x80a56013},
{0x60,0x04bfff8b},
{0x64,0xa12d6003},
{0x68,0x80a5e000},
{0x6c,0x22800002},
{0x70,0xc0202570},
{0x74,0xc2002540},
{0x78,0x80a06000},
{0x7c,0x0280000a},
{0xf0,0x98},
{0x00,0x80a76000},
{0x04,0xc2002730},
{0x08,0x80a06000},
{0x0c,0x12800006},
{0x10,0x80a76000},
{0x14,0x03000004},
{0x18,0xc2202730},
{0x1c,0xc2002248},
{0x20,0xc2202734},
{0x24,0x12800027},
{0x28,0xaa102000},
{0x2c,0xc2002514},
{0x30,0x80a54001},
{0x34,0x1a800023},
{0x38,0x96102001},
{0x3c,0x992d6002},
{0x40,0xc20326e0},
{0x44,0x8330600c},
{0x48,0x80886001},
{0x4c,0x32800019},
{0x50,0xaa056001},
{0x54,0x832ac015},
{0x58,0x808dc001},
{0x5c,0x32800015},
{0x60,0xaa056001},
{0x64,0xa2102001},
{0x68,0x9b2c6003},
{0x6c,0xc2036730},
{0x70,0x80a06000},
{0x74,0x1280000b},
{0x78,0xa2046001},
{0x7c,0xc20326e0},
{0xf0,0x99},
{0x00,0x80a72000},
{0x04,0x02800004},
{0x08,0xc2236730},
{0x0c,0x10800003},
{0x10,0xc200239c},
{0x14,0xc2002378},
{0x18,0x10800005},
{0x1c,0xc2236734},
{0x20,0x80a46013},
{0x24,0x04bffff2},
{0x28,0x9b2c6003},
{0x2c,0xaa056001},
{0x30,0xc2002514},
{0x34,0x80a54001},
{0x38,0x0abfffe2},
{0x3c,0x992d6002},
{0x40,0x81c7e008},
{0x44,0x81e80000},
{0x48,0x9de3bf98},
{0x4c,0xc2002510},
{0x50,0x80a06000},
{0x54,0x2280000b},
{0x58,0xc208254d},
{0x5c,0x82007fff},
{0x60,0x80a06000},
{0x64,0x12800006},
{0x68,0xc2202510},
{0x6c,0xc200254c},
{0x70,0x1b002000},
{0x74,0x8210400d},
{0x78,0xc220254c},
{0x7c,0xc208254d},
{0xf0,0x9a},
{0x00,0x80a06000},
{0x04,0x1280000d},
{0x08,0x033fc180},
{0x0c,0x033fc200},
{0x10,0x82106030},
{0x14,0xda004000},
{0x18,0xc200257c},
{0x1c,0x80a34001},
{0x20,0x02800021},
{0x24,0x01000000},
{0x28,0xc210223e},
{0x2c,0x80a06000},
{0x30,0x0280001d},
{0x34,0x033fc180},
{0x38,0xc0204000},
{0x3c,0xa0102002},
{0x40,0x11000099},
{0x44,0x7ffff014},
{0x48,0x9012233c},
{0x4c,0x7ffff5a9},
{0x50,0x90102002},
{0x54,0xa0843fff},
{0x58,0x3cbffffb},
{0x5c,0x11000099},
{0x60,0xda00254c},
{0x64,0x83336010},
{0x68,0x80886001},
{0x6c,0x32800002},
{0x70,0xc020250c},
{0x74,0x83336017},
{0x78,0x80886001},
{0x7c,0x32800005},
{0xf0,0x9b},
{0x00,0xc2002510},
{0x04,0xc2002188},
{0x08,0xc2202510},
{0x0c,0xc2002510},
{0x10,0xc220266c},
{0x14,0x7ffff231},
{0x18,0x90102015},
{0x1c,0x82102001},
{0x20,0xc2202584},
{0x24,0x81c7e008},
{0x28,0x81e80000},
{0x2c,0xc2002588},
{0x30,0x80a06000},
{0x34,0x32800006},
{0x38,0xc200258c},
{0x3c,0xc2002554},
{0x40,0xc2202588},
{0x44,0xc0202594},
{0x48,0xc200258c},
{0x4c,0x80a06000},
{0x50,0x12800005},
{0x54,0x01000000},
{0x58,0xc2002554},
{0x5c,0xc220258c},
{0x60,0xc0202598},
{0x64,0x81c3e008},
{0x68,0x01000000},
{0x6c,0x98102000},
{0x70,0xc2002514},
{0x74,0x80a30001},
{0x78,0x1a80000b},
{0x7c,0x033fc180},
{0xf0,0x9c},
{0x00,0x96106004},
{0x04,0x832b2002},
{0x08,0xda0066e0},
{0x0c,0xda20400b},
{0x10,0x98032001},
{0x14,0xc2002514},
{0x18,0x80a30001},
{0x1c,0x0abffffb},
{0x20,0x832b2002},
{0x24,0xda00254c},
{0x28,0x808b6001},
{0x2c,0x32800008},
{0x30,0xc208254e},
{0x34,0xc2002514},
{0x38,0x9a136001},
{0x3c,0x82106100},
{0x40,0xda20254c},
{0x44,0xc2202514},
{0x48,0xc208254e},
{0x4c,0x80a06000},
{0x50,0x3280000b},
{0x54,0xc2082517},
{0x58,0xc20023c8},
{0x5c,0x83306016},
{0x60,0x80886001},
{0x64,0x22800006},
{0x68,0xc2082517},
{0x6c,0xc2002514},
{0x70,0x82106200},
{0x74,0xc2202514},
{0x78,0xc2082517},
{0x7c,0x80a06000},
{0xf0,0x9d},
{0x00,0x32800007},
{0x04,0xda002500},
{0x08,0xc2002560},
{0x0c,0x80a06000},
{0x10,0x22800008},
{0x14,0xc2082517},
{0x18,0xda002500},
{0x1c,0xc2002514},
{0x20,0x9b2b6010},
{0x24,0x8210400d},
{0x28,0xc2202514},
{0x2c,0xc2082517},
{0x30,0x80a06000},
{0x34,0x22800012},
{0x38,0xda002514},
{0x3c,0xc2002548},
{0x40,0x80886800},
{0x44,0x22800006},
{0x48,0xc20023c8},
{0x4c,0xc2002514},
{0x50,0x82106400},
{0x54,0xc2202514},
{0x58,0xc20023c8},
{0x5c,0x80a06000},
{0x60,0x36800007},
{0x64,0xda002514},
{0x68,0xc2002514},
{0x6c,0x1b000004},
{0x70,0x8210400d},
{0x74,0xc2202514},
{0x78,0xda002514},
{0x7c,0x033fc180},
{0xf0,0x9e},
{0x00,0x81c3e008},
{0x04,0xda204000},
{0x08,0x9de3bf98},
{0x0c,0xc2102516},
{0x10,0x80a06000},
{0x14,0x02800006},
{0x18,0x90102001},
{0x1c,0xc2002548},
{0x20,0x80886004},
{0x24,0x0280000a},
{0x28,0x82102005},
{0x2c,0xc2002548},
{0x30,0x9b306003},
{0x34,0x83306002},
{0x38,0x82086001},
{0x3c,0x9a0b6001},
{0x40,0x80a0400d},
{0x44,0x02800004},
{0x48,0x82102005},
{0x4c,0x10800008},
{0x50,0xc2202560},
{0x54,0xc2002560},
{0x58,0x9a007fff},
{0x5c,0x80a06000},
{0x60,0x02800005},
{0x64,0x90102002},
{0x68,0xda202560},
{0x6c,0x7ffff521},
{0x70,0x01000000},
{0x74,0xc2002548},
{0x78,0x9a004001},
{0x7c,0x9a0b6008},
{0xf0,0x9f},
{0x00,0x82087ff7},
{0x04,0x8210400d},
{0x08,0xc2202548},
{0x0c,0x81c7e008},
{0x10,0x81e80000},
{0x14,0x00000000},
{0x18,0x00000000},
{0x1c,0x00000000},
{0x20,0x00000000},
{0x24,0x00000000},
{0x28,0x00000000},
{0x2c,0x00000000},
{0x30,0x00000000},
{0x34,0x00000000},
{0x38,0x00000000},
{0x3c,0x00000000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000000},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x00000000},
{0x6c,0x00000000},
{0x70,0x00000000},
{0x74,0x00000000},
{0x78,0x00000000},
{0x7c,0x00000000},
{0xf0,0xa0},
{0x00,0x00001688},
{0x04,0xa5010500},
{0x08,0xa5000000},
{0x0c,0x00000000},
{0x10,0x4c494348},
{0x14,0x49444449},
{0x18,0x88ecbdae},
{0x1c,0x39cf8648},
{0x20,0x80cdc96f},
{0x24,0xbe719243},
{0x28,0xc641c654},
{0x2c,0xcc5380cb},
{0x30,0x80d1c471},
{0x34,0xcce5c9e5},
{0x38,0xc400c643},
{0x3c,0xbd130000},
{0x40,0x00000000},
{0x44,0x00000000},
{0x48,0x00000000},
{0x4c,0x00000000},
{0x50,0x00000000},
{0x54,0x00000000},
{0x58,0x00000000},
{0x5c,0x00000000},
{0x60,0x00000000},
{0x64,0x00000000},
{0x68,0x4a756e20},
{0x6c,0x32362032},
{0x70,0x30313400},
{0x74,0x00000000},
{0x78,0x31343a35},
{0x7c,0x313a3337},



};

/*GW:wangruipeng 2012-7-3 modified for ssd end*/

/*  锟斤拷锟斤拷锟斤拷息锟斤拷锟酵ｏ拷锟斤拷锟疥，锟劫度和凤拷锟斤拷 */
static void tp_send_msg(__input_dev_t *dev, __ev_tp_msg_t *msg)
{
    __wrn("tp_send_msg, msg->msg_type=%d, msg->xpoint=%d, msg->ypoint=%d\n"
        , msg->msg_type, msg->xpoint, msg->ypoint);
    
    esINPUT_SendEvent(dev, EV_ABS, ABS_MISC, msg->msg_type);
    esINPUT_SendEvent(dev, EV_ABS, ABS_X, msg->xpoint);
    esINPUT_SendEvent(dev, EV_ABS, ABS_Y, msg->ypoint);
    esINPUT_SendEvent(dev, EV_ABS, ABS_RUDDER, msg->speed_dir);
    esINPUT_SendEvent(dev, EV_ABS, ABS_BRAKE, msg->speed_val);        
 // esINPUT_SendEvent(dev, EV_KEY, BTN_TOUCH, 0);/* KEY UP */
    esINPUT_SendEvent(dev, EV_SYN, SYN_REPORT, 0);    

   // eLIBs_printf("type = %x, x = %d, y = %d, dir = %x, speed(zoom) = %d \n", 
         //               msg->msg_type, msg->xpoint, msg->ypoint, msg->speed_dir, msg->speed_val);
}

static  __u16 join_bytes(__u8 a, __u8 b)
{
	__u16 ab = 0;
	ab = ab | a;
	ab = ab << 8 | b;
	return ab;
}


/* 锟斤拷4锟斤拷锟斤拷锟斤拷平锟斤拷锟斤拷去锟斤拷锟斤拷小值锟斤拷锟斤拷锟街碉拷锟饺★拷锟斤拷锟斤拷锟斤拷锟街碉拷锟狡斤拷锟� */
static int tp_filter(ts_sample_t   *ts_sample,ts_sample_t *ts_out)
{
    __u32 max_x = 0,max_y = 0;
    __u32 min_x = 0x7ff,min_y = 0x7ff;
    __u32 sum_x = 0,sum_y = 0;
    __u32 i;

    for(i= 0; i< 4;i++)
    {
        if(min_x > ts_sample[i].x)
            min_x = ts_sample[i].x;

        if(min_y > ts_sample[i].y)
            min_y = ts_sample[i].y;
            
        if(max_x < ts_sample[i].x)
            max_x = ts_sample[i].x;

        if(max_y < ts_sample[i].y)
            max_y = ts_sample[i].y;

        sum_x += ts_sample[i].x;
        sum_y += ts_sample[i].y;
    }

    sum_x = sum_x - min_x - max_x;
    sum_y = sum_y - min_y - max_y;

    ts_out->x = sum_x>>1;
    ts_out->y = sum_y>>1;

    return 0;
}
#endif


/* 锟斤拷锟斤拷,锟劫度硷拷锟斤拷锟斤拷 */
static void  tp_fp_sort(ts_sample_t *in4)
{
#define TP_SORT_LEN 4
    __s32 i,j;
    __s32 temp;
    
    for( i = TP_SORT_LEN - 1; i > 0; i--)
    {
        for(j = 0; j < i; j++)
        {
            if(in4[j].x > in4[j+1].x)
            {
                temp       = in4[j].x;
                in4[j].x   = in4[j+1].x;
                in4[j+1].x = temp;
            }
                
            if(in4[j].y > in4[j+1].y)
            {
                temp       = in4[j].y;
                in4[j].y   = in4[j+1].y;
                in4[j+1].y = temp;
            }        
        }
    }

    return;
}

static __s32 gslX680_ts_worker(void)
{
	int rc, i,ret = EPDK_OK;
	u8 touches;
	u16 x, y;
	__u8 GSL_DATA_REG =	0x80;
    int j;
    
	eLIBs_memset(touch_data,0,sizeof(touch_data));
	
	__wrn("=====gslX680_ts_worker=====\n");				 
	rc = iic_read_bytes(&GSL_DATA_REG, 1, touch_data, DATA_SIZE);
	if (rc < 0) 
	{
		__wrn("read failed\n");
		ret = EPDK_FAIL;
	}
	touches = touch_data[TOUCH_INDEX];
	__wrn("-----touches: %d -----\n", touches);
	if(touches > 1)
	{
	
	}		
	if(touches==0)
		return EPDK_FAIL;
	for(i= 0;i < (touches > MAX_FINGER_NUM ? MAX_FINGER_NUM: touches);i ++)
	{
        if(i > 0)
        {
            break;//锟斤拷锟斤拷
        }
        
		y = join_bytes( ( touch_data[Y_INDEX+ 4 * i + 1]& 0xf),
					touch_data[Y_INDEX + 4 * i]);
		x = join_bytes(touch_data[X_INDEX+ 4 * i + 1] & 0xf,
					touch_data[X_INDEX + 4 * i ]);
        //__msg("*************x = %d,y = %d\n**************\n",x,y);
        if(y<16)
        {
            y = 16;
        }
        if(y>630)
        {
            y = 630;
        }
        y= (y-16)*480/(630-16);

        ///547-959   1-480
        
        if(x>=1 && x<=480)//(a-1+(959-547))/(959-547+480)=x/800
        {
            x = (x-1+(959-544))*800/(959-544+480);
        }
        else if(x>=544&&x<=959)//(a-547)/(959-547+480)=x/800
        {
            x = (x-544)*800/(959-544+480);
        }
        else
        {
            ret = EPDK_FAIL;
            break;
        }

        if(x < 0)
        {
            x = 0;
        }
        else if(x>799)
        {
            x = 799;
        }

        if(y<0)
        {
            y=0;
        }
        else if(y>479)
        {
            y=479;
        }

        
		//__msg("*************x = %d,y = %d\n**************\n",x,y);

        if(1 == x_revert)
				x= tp_private.screen_max_x-1 - x;

        if(1 == y_revert)
				y= tp_private.screen_max_y-1 - y;
        
        if(sid)
        {
            u16 tmp=x;
            x = y;
            y = tmp;
        }
        
		__wrn("x_new = %d,y_new = %d\n",x,y);
		for(j = 0 ; j < TABLE_SIZE(tp_private.crt_x); j++)
	    {    
	        tp_private.crt_x[j] = x;
	    }

	    for(j = 0 ; j < TABLE_SIZE(tp_private.crt_y); j++)
	    {    
	        tp_private.crt_y[j] = y;  
	    }

        
	}
	return ret;
}



/*  锟斤拷取锟斤拷锟斤拷原始锟斤拷锟捷碉拷,锟斤拷锟斤拷 */
static  __s32  touchpanel_get_data(void)
{
    __s32 bok;
    __s32 ret;
    __s32 i;
    __u32 position;
    __u16 X_value;    
    __u16 Y_value;
    __u8  err;
    //__u8 touch_data[2 + 2 + 5*MAX_FINGER_NUM + 1] = {READ_TOUCH_ADDR_L, READ_TOUCH_ADDR_H,0, 0};  
/*GW:wangruipeng 2012-7-3 modified for ssd begin*/
 #if 1
	__s32 cur_dis;
	__s32 X_tmp;
	__s32 Y_tmp;
	__s32 FingerX[MAX_FINGER_NUM];
	__s32 FingerY[MAX_FINGER_NUM];
	char ssd_data[3];
	char REG_TMP;
	static __s32 distance = -1;
	
   	OS_SEM_DATA    pdata;
	
#endif
/*GW:wangruipeng 2012-7-3 modified for ssd end*/

    esKRNL_SemPend(tp_private.tp_sem_data, 12, &err);

    if(err != OS_NO_ERR)
    {
        //eLIBs_printf("sem time out\n");   //锟斤拷时锟斤拷取锟斤拷锟斤拷锟饺★拷锟�
        return EPDK_FAIL;
    }  
	
#if 1
	bok  = gslX680_ts_worker();

#endif
/*GW:wangruipeng 2012-7-3 modified for ssd end*/
    
 /*   for(i = 0 ; i < TABLE_SIZE(tp_private.crt_x); i++)
    {    
        tp_private.crt_x[i] = FingerX[0];
    }

    for(i = 0 ; i < TABLE_SIZE(tp_private.crt_y); i++)
    {    
        tp_private.crt_y[i] = FingerX[0];  
    }

	if( (FingerX[0]!=0xFFF)
		 &&(FingerX[1]!=0xFFF)
		 &&(FingerY[0]!=0xFFF)
		 &&(FingerY[1]!=0xFFF)
	  )
	{
	    X_tmp = FingerX[1] - FingerX[0];
		Y_tmp = FingerY[1] - FingerY[0];
	    cur_dis = (X_tmp * X_tmp) + (Y_tmp * Y_tmp);

		drv_tp_msg.xpoint    = FingerX[0];
        drv_tp_msg.ypoint    = FingerY[0]; 
        drv_tp_msg.speed_dir = 0;
        drv_tp_msg.speed_val = 0; 

        __wrn("simon  distance =%d\n",distance);
	    __wrn("simon  cur_dis =%d\n",cur_dis);

		if((-1) == distance)
		{
		    distance = cur_dis;
		}
		else
		{
		    if((cur_dis - distance) > MULTITOUCH_MIN_ZOOM_IN_DIS)
		    {   __wrn("\n\n\n");
		        __wrn("|==========================================|\n");
				__wrn("|                                          |\n");
		        __wrn("|              TOUCH ZOOM IN               |\n");    //锟脚达拷
		        __wrn("|                                          |\n");
				__wrn("|==========================================|\n");
				__wrn("\n\n\n");
		        distance = cur_dis; 
				drv_tp_msg.msg_type = EV_TP_PINCH_IN;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);
		    }
			else if((cur_dis - distance) < MULTITOUCH_MIN_ZOOM_OUT_DIS)
			{   __wrn("\n\n\n");
			    __wrn("|==========================================|\n");
				__wrn("|                                          |\n");
		        __wrn("|              TOUCH ZOOM OUT              |\n");    //锟斤拷小
		        __wrn("|                                          |\n");
				__wrn("|==========================================|\n");
				__wrn("\n\n\n");
			    distance = cur_dis; 
			    drv_tp_msg.msg_type = EV_TP_PINCH_OUT;  
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);
			}
		}
	}
  */	
     esKRNL_SemQuery(tp_private.tp_sem_data, &pdata);
    //__wrn("pdata.OSCnt=%d\n", pdata.OSCnt);
    
    if(0 == pdata.OSCnt)
    {
        //__wrn("tp_sem_data post...\n");
        esKRNL_SemPost(tp_private.tp_sem_data);
    }
	
    if(EPDK_OK == bok)
    {
        __wrn("fetch point xy ok...\n");
		return EPDK_OK;
    }
    else
    {
        __wrn("fetch point xy fail...\n");
		return EPDK_FAIL;
    }
}




/*
****************************************************************************************************
*
*             touchpanel_dealdata
*
*  Description:  X锟斤拷Y锟街憋拷锟斤拷锟斤拷锟洁不锟斤拷锟斤拷
*
*
*  Parameters:    
*                             
*
*  Return value:
*       EPDK_OK
*       EPDK_FAIL
****************************************************************************************************
*/
static __s32 touchpanel_dealdata(__s16 xpoint, __s16 ypoint, __u32 *msg_send_start, __u32 once_count)
{
    __u32 tmp_index;
    __s32 ret = EPDK_FAIL;

    /* 锟斤拷锟斤拷锟斤拷幕锟斤拷应锟斤拷锟斤拷锟� */
    //linear_read(tp_private.calibrate_para, xpoint, ypoint, &(tp_point.x[acount]), &(tp_point.y[acount]));
    tp_point.x[acount] = xpoint;
    tp_point.y[acount] = ypoint;
	__wrn("touchpanel_dealdata tp_point.x[acount]=%d \n",tp_point.x[acount]);
   	__wrn("touchpanel_dealdata tp_point.y[acount]=%d \n",tp_point.y[acount]); 
    ++acount;
    ++data_index;
    acount &= TP_DATA_BUFFER_MASK; 

    /* 锟斤拷锟较层发锟斤拷锟斤拷息 */
    if(data_index == TP_START_POINT)     
    {   
        /* 锟斤拷录锟斤拷一锟斤拷xy锟斤拷锟斤拷锟斤拷息 */
        tp_private.xpre = drv_tp_msg.xpoint = tp_point.x[0];
        tp_private.ypre = drv_tp_msg.ypoint = tp_point.y[0];        
        drv_tp_msg.msg_type = EV_TP_PRESS_START;       
        drv_tp_msg.speed_dir = 0;
        drv_tp_msg.speed_val = 0;   
        tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg); 
        
        xy_first_point[0] = tp_point.x[0];
        xy_first_point[1] = tp_point.y[0];
        
        *msg_send_start = once_count + TP_START_POINT;  /* 锟斤拷锟斤拷锟斤拷一锟轿的凤拷锟酵碉拷 */
        ret = EPDK_OK;
    }
    else if(data_index >= *msg_send_start)             
    {
        tmp_index = (acount + TP_DATA_BUFFER_SIZE - TP_START_POINT)&(TP_DATA_BUFFER_MASK);   
		__wrn("tmp_index = %d \n",tmp_index);
        drv_tp_msg.xpoint = tp_point.x[tmp_index];
        drv_tp_msg.ypoint = tp_point.y[tmp_index]; 
     //   eLIBs_printf("data_index =%d, acount =%d, tmp_index = %d\n",data_index,acount,tmp_index);
        if(pre_action != EV_TP_PRESS_MOVE)
        {
            /* x,y锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷值锟斤拷为锟斤拷move锟斤拷锟斤拷 */
            if((TP_ABS(tp_point.x[tmp_index] - tp_private.xpre) > tp_info.offset) || (TP_ABS(tp_point.y[tmp_index] - tp_private.ypre) > tp_info.offset))
            {    
                __wrn("pre_action = EV_TP_PRESS_MOVE off=%d \n",tp_info.offset);
                pre_action = EV_TP_PRESS_MOVE;
            }

			move_horizontal = 0;
			move_verital = 0;
			move_direction = EV_TP_ACTION_NULL;
        }
        else if(pre_action == EV_TP_PRESS_MOVE)
        {
            /* 前锟斤拷3锟斤拷锟斤拷锟斤拷锟斤拷龋锟斤拷贫锟斤拷锟斤拷袒锟斤拷锟斤拷hold锟斤拷锟斤拷锟斤拷锟街碉拷锟斤拷锟叫★拷锟斤拷锟絤ove锟斤拷锟斤拷要小 */
            if((TP_ABS(tp_point.x[tmp_index] - tp_private.xpre) < 2) 
                            && (TP_ABS(tp_point.y[tmp_index] - tp_private.ypre) < 2))
            {     
                if(tmp_index >= 2)
                {
                    if( (TP_ABS(tp_point.x[tmp_index-2] - tp_private.xpre) < 2)
                                && (TP_ABS(tp_point.y[tmp_index-2] - tp_private.ypre) < 2)) 
                    {
                      __wrn("pre_action = EV_TP_PRESS_HOLD \n");
                        pre_action = EV_TP_PRESS_HOLD;   
                    }
                }
            }
			else
			{
				if(move_horizontal)
				{
					if(tp_point.x[tmp_index] > tp_private.xpre)
					{
						if((tp_point.x[tmp_index] - tp_private.xpre) > tp_info.offset)
							move_direction = EV_TP_ACTION_RIGHT;
					}
					else
					{
						if((tp_private.xpre - tp_point.x[tmp_index]) > tp_info.offset)
							move_direction = EV_TP_ACTION_LEFT;
					}
				}
				else if(move_verital)
				{
					if(tp_point.y[tmp_index] > tp_private.ypre)
					{
						if((tp_point.y[tmp_index] - tp_private.ypre) > tp_info.offset)
							move_direction = EV_TP_ACTION_DOWN;
					}
					else
					{
						if((tp_private.ypre - tp_point.y[tmp_index]) > tp_info.offset)
							move_direction = EV_TP_ACTION_UP;
					}
				}
				else
				{
					if((TP_ABS(tp_point.x[tmp_index] - tp_private.xpre)) > (TP_ABS(tp_point.y[tmp_index] - tp_private.ypre)))
					{
						move_horizontal = 1;
						if(tp_point.x[tmp_index] > tp_private.xpre)
						{
							if((tp_point.x[tmp_index] - tp_private.xpre) > tp_info.offset)
								move_direction = EV_TP_ACTION_RIGHT;
						}
						else
						{
							if((tp_private.xpre - tp_point.x[tmp_index]) > tp_info.offset)
								move_direction = EV_TP_ACTION_LEFT;
						}
					}
					else
					{
						move_verital = 1;
						if(tp_point.y[tmp_index] > tp_private.ypre)
						{
							if((tp_point.y[tmp_index] - tp_private.ypre) > tp_info.offset)
								move_direction = EV_TP_ACTION_DOWN;
						}
						else
						{
							if((tp_private.ypre - tp_point.y[tmp_index]) > tp_info.offset)
								move_direction = EV_TP_ACTION_UP;
						}
					}
				}
			}
        }
        
        tp_private.xpre = tp_point.x[tmp_index];/* 锟斤拷录xy锟斤拷锟斤拷锟斤拷息 */
        tp_private.ypre = tp_point.y[tmp_index];    
                
        *msg_send_start += once_count;/* 锟斤拷锟斤拷锟斤拷一锟轿的凤拷锟酵碉拷 */

        drv_tp_msg.speed_dir = move_direction;/* direction */
		//eDbug("-- speed_dir = 0x%x -- \n", move_direction);
        drv_tp_msg.msg_type = pre_action;
        tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);
        
        ret = EPDK_OK;
    }
	
	__wrn("data_index=%d  \n",data_index);
	__wrn("msg_send_start=%d  \n",*msg_send_start);
	__wrn("ret=%d  \n",ret);

    return ret;
}

static __s32 touchpanel_dealdata_fast(__s16 xpoint, __s16 ypoint, __u32 *msg_send_start, __u32 once_count)
{
    __u32 tmp_index;
    __s32 ret = EPDK_FAIL;

    /* 锟斤拷锟斤拷锟斤拷幕锟斤拷应锟斤拷锟斤拷锟� */
    linear_read(tp_private.calibrate_para, xpoint, ypoint, &(tp_point.x[acount]), &(tp_point.y[acount]));
    
    ++acount;
    ++data_index;
    acount &= TP_DATA_BUFFER_MASK; 

    /* 锟斤拷锟较层发锟斤拷锟斤拷息 */
    if(data_index == TP_START_POINT)     
    {   
        /* 锟斤拷录锟斤拷一锟斤拷xy锟斤拷锟斤拷锟斤拷息 */
        tp_private.xpre = drv_tp_msg.xpoint = tp_point.x[0];
        tp_private.ypre = drv_tp_msg.ypoint = tp_point.y[0];        
        drv_tp_msg.msg_type = EV_TP_PRESS_START;       
        drv_tp_msg.speed_dir = 0;
        drv_tp_msg.speed_val = 0;   
        tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg); 
        
        xy_first_point[0] = tp_point.x[0];
        xy_first_point[1] = tp_point.y[0];
        
        *msg_send_start = once_count + TP_START_POINT;  /* 锟斤拷锟斤拷锟斤拷一锟轿的凤拷锟酵碉拷 */
        ret = EPDK_OK;
    }
    else if(data_index >= *msg_send_start)             
    {
        tmp_index = (acount + TP_DATA_BUFFER_SIZE - TP_START_POINT)&(TP_DATA_BUFFER_MASK);       
        drv_tp_msg.xpoint = tp_point.x[tmp_index];
        drv_tp_msg.ypoint = tp_point.y[tmp_index]; 
     //   eLIBs_printf("data_index =%d, acount =%d, tmp_index = %d\n",data_index,acount,tmp_index);
        if(pre_action != EV_TP_PRESS_MOVE)
        {
            /* x,y锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷值锟斤拷为锟斤拷move锟斤拷锟斤拷 */
            if((TP_ABS(tp_point.x[tmp_index] - tp_private.xpre) > tp_info.offset) || (TP_ABS(tp_point.y[tmp_index] - tp_private.ypre) > tp_info.offset))
            {
                pre_action = EV_TP_PRESS_MOVE;
            }
        }
        else if(pre_action == EV_TP_PRESS_MOVE)
        {
            /* 前锟斤拷3锟斤拷锟斤拷锟斤拷锟斤拷龋锟斤拷贫锟斤拷锟斤拷袒锟斤拷锟斤拷hold锟斤拷锟斤拷锟斤拷锟街碉拷锟斤拷锟叫★拷锟斤拷锟絤ove锟斤拷锟斤拷要小 */
            if((TP_ABS(tp_point.x[tmp_index] - tp_private.xpre) < 2) 
                            && (TP_ABS(tp_point.y[tmp_index] - tp_private.ypre) < 2))
            {     
                if( (TP_ABS(tp_point.x[tmp_index-2] - tp_private.xpre) < 2)
                            && (TP_ABS(tp_point.y[tmp_index-2] - tp_private.ypre) < 2)) 
                {
                    pre_action = EV_TP_PRESS_HOLD;   
                }
            }
        }
        
        tp_private.xpre = tp_point.x[tmp_index];/* 锟斤拷录xy锟斤拷锟斤拷锟斤拷息 */
        tp_private.ypre = tp_point.y[tmp_index];    
                
        *msg_send_start += once_count;/* 锟斤拷锟斤拷锟斤拷一锟轿的凤拷锟酵碉拷 */

        drv_tp_msg.msg_type = pre_action;
        tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);
        
        ret = EPDK_OK;
    }

    return ret;
}
/*
****************************************************************************************************
*
*             tp_catch_data_normal
*
*  Description:   锟斤拷通模式锟铰碉拷锟斤拷锟捷达拷锟斤拷锟斤拷
*
*  Parameters:
*
*  Return value:
*       EPDK_OK
*       EPDK_FAIL
****************************************************************************************************
*/
void  tp_catch_data_normal(void)
{
    __u32    keydown_valid, j;
    __s32    ret,data_ret;
    __u32    msg_send_start;
    ts_sample_t   ts_sample[4], ts_out;
    __u32 discard = 0;

	acount         = 0;
	data_index     = 0;
	msg_send_start = 100;
	keydown_valid  = 0; /* 锟斤拷锟斤拷锟角凤拷锟斤拷效锟侥讹拷锟斤拷, 0锟斤拷没锟叫帮拷锟斤拷锟斤拷锟斤拷, 1锟斤拷锟叫帮拷锟斤拷锟斤拷锟铰ｏ拷锟斤拷没锟斤拷锟缴匡拷 */

    //__wrn("tp_catch_data_normal begin...\n");
    
	pre_action = EV_TP_PRESS_HOLD;
    ret = EPDK_FAIL;
	data_ret = EPDK_FAIL;
    tp_flag = 2;
	__wrn("simon tp_catch_data_normal \n");
	__wrn("simon tp_flag = %d\n",tp_flag);
	while(tp_flag)  /* 锟斤拷tp锟斤拷锟绞憋拷锟斤拷锟斤拷锟轿拷吮锟斤拷锟斤拷锟斤拷贫锟斤拷锟斤拷锟斤拷锟绞憋拷锟斤拷锟杰筹拷锟街的达拷锟斤拷压锟斤拷锟斤拷锟姐导锟斤拷锟斤拷锟斤拷为锟缴匡拷 */
	{          
		if(tp_up_sem == 1)
		{__wrn("tp_up_sem continue \n");
			continue;
		}
        
	    tp_flag --;
	    //fecth sample data
	    eLIBs_memset(tp_private.crt_x, 0, sizeof(tp_private.crt_x));
        eLIBs_memset(tp_private.crt_y, 0, sizeof(tp_private.crt_y));
		__wrn("simon touchpanel_get_data\n");
		data_ret = touchpanel_get_data();
        if(EPDK_OK == data_ret)   //112358
        {
            __here__;
            tp_flag ++;
            if(tp_flag < 0xffff)
            {
				discard++;
            	if(discard > TP_FIRST_DELAY_FILTER)
	        	{   
#if 1
	                __wrn("tp_catch_data_normal x=%d \n",tp_private.crt_x[0]);
					__wrn("tp_catch_data_normal y=%d \n",tp_private.crt_y[0]);

	                ts_out.x = tp_private.crt_x[0];
	                ts_out.y = tp_private.crt_y[0];
#else
	                
	                for(j = 0; j < TP_ONE_TIME; j++)            
	                {
	                    __wrn("tp_private.crt_x[j]=%d\n", tp_private.crt_x[j]);
	                    __wrn("tp_private.crt_y[j]=%d\n", tp_private.crt_y[j]);
	                    ts_sample[j].x = tp_private.crt_x[j];
	                    ts_sample[j].y = tp_private.crt_y[j];      
	                }        
	                __here__;
	               // input: 4 points; output: 1 point 
	                tp_filter(ts_sample, &ts_out);
	                __wrn("tp_info.pertime=%d\n", tp_info.pertime);

#endif
	                ret = touchpanel_dealdata(ts_out.x, ts_out.y, &msg_send_start, tp_info.pertime);
					__wrn("&&&&&&&&&keydown_valid,,,1 = %d  ret = %d \n",keydown_valid,ret);

	                __here__;
	                if(!keydown_valid)
	                {
	                    keydown_valid = (ret == EPDK_OK);
						__wrn("&&&&&&&&&keydown_valid ,,,2= %d  ret = %d \n",keydown_valid,ret);
	                }           
	                __here__;
	            }// discard first sample point
			}
        }
        /* 锟斤拷时锟斤拷锟酵凤拷时锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟�,锟斤拷锟斤拷锟劫硷拷锟斤拷锟斤拷锟斤拷锟斤拷锟叫词憋拷锟斤拷锟绞�,要去锟斤拷 */
        //__here__;
        esKRNL_TimeDly(2);
       // __here__;
    }

    //__here__;
    __wrn("simon touchpanel_get_data over %d\n",keydown_valid);
    if(keydown_valid)
    {
        __u32 gesture = 0;
        __u32 speed   = 0;         
		tp_flag = 0;

        //__here__;
        gesture = tp_gesture_recognize(tp_point.x, tp_point.y, data_index, xy_first_point);/* direction */
		__msg("-- gesture = %d -- \n", gesture);
        //__here__;
        speed   = tp_flick_speed(tp_point.x, tp_point.y, data_index, gesture); /* speed */                                     
        //__here__;
		__msg("-- speed = %d -- \n", speed);

        drv_tp_msg.msg_type  = EV_TP_ACTION_UP;/* 抬锟斤拷 */
        drv_tp_msg.xpoint = tp_point.x[(data_index-1)&TP_DATA_BUFFER_MASK];
        drv_tp_msg.ypoint = tp_point.y[(data_index-1)&TP_DATA_BUFFER_MASK];
		__wrn("drv_tp_msg.xpoint  =%d data_index   =%d\n",drv_tp_msg.xpoint,data_index );
		__wrn("drv_tp_msg.ypoint =%d \n",drv_tp_msg.ypoint );
        drv_tp_msg.speed_dir = gesture;
        drv_tp_msg.speed_val = speed;

        //__here__;
        tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);
		__wrn(">>>>>>>>>>>>>>>>>>>>>>>>>drv_tp_msg.EV_TP_ACTION_UP \n");
		acount         = 0;
		data_index     = 0;
		keydown_valid = 0;
        //__wrn("normal:TP UP, num = %d,speed = %d,dir = %x\n\n", data_index, speed, gesture);
    }	
	if(tp_private.hInt)
	{
//			  __wrn("enable int...\n");
		ret = esPINS_EnbaleInt(tp_private.hInt); 
		if(EPDK_FAIL == ret)
		{
			__wrn("enable one pio int fail...\n");
		}
	}
    __wrn("tp_catch_data_normal end...\n");
 
}


//为锟剿简化猴拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷指锟斤拷
__bool tp_isr_task_normal(__s32 irq)
{
    __s32 ret;
   	OS_SEM_DATA    pdata;

    if(NULL == tp_private.tp_sem_data)
    {
        __wrn("sem is null...\n");
        return EPDK_FAIL;
    }

    if(NULL == tp_private.tp_sem_main)
    {
        __wrn("sem is null...\n");
        return EPDK_FAIL;
    }

    __msg(">>>>>>>>>>>>>>>>>.. ctp int come, tp_isr_task_normal...>>>>>>>>>>>>>>>>>> \n");

	//tp_flag = 1;
    esKRNL_SemQuery(tp_private.tp_sem_data, &pdata);
    __msg("pdata.OSCnt=%d\n", pdata.OSCnt);    
    if(0 == pdata.OSCnt)
    {
        //__wrn("tp_sem_data post...\n");
        esKRNL_SemPost(tp_private.tp_sem_data);
    }
    else
    {
        
    }

    esKRNL_SemQuery(tp_private.tp_sem_main, &pdata);
	__msg("tp_isr_task_normales pdata.OSCnt %d \n",pdata.OSCnt);
	if(0 == pdata.OSCnt)
	{   
		//eLIBs_printf("tp_isr_task_normal esKRNL_SemPost(tp_private.tp_sem_main) %d \n",__LINE__);
	    esKRNL_SemPost(tp_private.tp_sem_main);
	}   
      
    return EPDK_TRUE;
}


//为锟剿简化猴拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷指锟斤拷
__bool tp_isr_task_calibrate(__s32 irq)
{
   	OS_SEM_DATA    pdata;

    if(irq & TP_FTOUCH_IRQ)
    {
        tp_flag = 0x0f;
        esKRNL_SemAccept(tp_private.tp_sem_data);
        esKRNL_SemQuery(tp_private.tp_sem_calibrate, &pdata);
    	if(!pdata.OSCnt)
    	{
    	    esKRNL_SemPost(tp_private.tp_sem_calibrate);
    	}
    }
    if(irq & TP_LTOUCH_IRQ)
    {
        tp_flag = 0;
        tp_private.crt_enable = 1;
        esKRNL_SemQuery(tp_private.tp_sem_data, &pdata);
    	if(!pdata.OSCnt)
    	{
    	    esKRNL_SemPost(tp_private.tp_sem_data);
    	}
    }
    if(irq & TP_DATA_IRQ)
    {
        tp_private.crt_enable = 1;
        esKRNL_SemQuery(tp_private.tp_sem_data, &pdata);
    	if(!pdata.OSCnt)
    	{
    	    esKRNL_SemPost(tp_private.tp_sem_data);
    	}
    }
    else
    {
        return EPDK_FALSE;
    }

    return EPDK_TRUE;
}

static __s32 touchpanel_isr_task_pio(void *arg)
{
    __s32 ret;   

	__wrn("touchpanel_isr_task_pio...\n");

//eLIBs_printf("%s,%d>>>>>>>>>>LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL>>>>>>>>>>>>>>\n",__FILE__,__LINE__);
   // return 1;  

    if(NULL == tp_private.hInt)
    {
        __err("int pin hdl is null...\n");
        return EPDK_FAIL;
    }

    //__wrn("disable int...\n");
    ret = esPINS_DisbaleInt(tp_private.hInt); 
    if(EPDK_FAIL == ret)
    {
        //__wrn("disable one pio int fail...\n");
    }
    
    //__wrn("ctp int come...\n");

//    return 1;     
    
    return  tp_isr_task_p(0);
}

static __bool touchpanel_isr_task(void *arg)
{
    __s32 pending;

    esKSRV_Reset();
    esPINS_DisbaleInt(INTC_IRQNO_TP);
    //__wrn("***********touchpanel_isr_task**********\n");
    return EPDK_TRUE;
    
}

/*
****************************************************************************************************
*
*             touchpanel_main_task
*
*  Description:
*       touchpanel_main_task
*
*  Parameters:
*
*  Return value:
*       none
*
****************************************************************************************************
*/
static void  touchpanel_main_task(void *p_arg)
{
    __s32 ret;
    

    __u8 err;

    while(1)
    {
 	    __msg("touchpanel_main_task tp sem main ...1\n");
        esKRNL_SemPend(tp_private.tp_sem_main, 0, &err);
		__msg("touchpanel_main_task tp sem main ...2\n");
        if(esKRNL_TDelReq(OS_PRIO_SELF) == OS_TASK_DEL_REQ)
        {
            //杀锟竭筹拷;
            esKRNL_TDel(OS_PRIO_SELF);
        }
		tp_catch_data();
		esKRNL_TimeDly(1);
    }

}


static __s32 goodix_ts_version(void)
{
    __u8 buf[8]={0};

    buf[0] = 0x7d;

    buf[1] = 0x0f;   

    iic_read_bytes_end_cmd(buf, 2, buf+2, 3);

    __wrn("**************PID:%x, VID:%x%x****************\n", buf[2], buf[3], buf[4]);

    return 1;
}

static __s32 ctp_set_work_mode(__drv_tp_workmode_t mode)
{
    __u8 flag;
    __s32 ret;
    __u8 buf[8]={0};
    
    buf[0] = 0xf2;

    buf[1] = 0x0f;      

    __wrn("ctp_set_work_mode %d\n", mode);

    ret = iic_read_bytes_end_cmd(buf, 2, buf+2, 1);
    if(EPDK_FAIL == ret)
    {
        return EPDK_FAIL;
    }

    flag = buf[3]&(0x03<<6);

    __wrn("old workmode flag=0x%x\n", flag);

    switch(mode)
    {
        case DRV_TP_MODE_ACTIVE:
        {
            flag = 0;
            break;
        }
        case DRV_TP_MODE_LOWPOWER:
        {
            flag = 1;
            break;
        }
        case DRV_TP_MODE_AUTO:
        {
            flag = 2;
            break;
        }
        case DRV_TP_MODE_SLEEP:
        {
            flag = 3;
            break;
        }
    }

    __wrn("new workmode flag=0x%x\n", flag);

    buf[3] &= ~(0x03<<6);
    buf[3] |= (flag<<6);

    ret = iic_write_bytes_end_cmd(buf, 2, buf+2, 1);
    if(EPDK_FAIL == ret)
    {
        return EPDK_FAIL;
    }

    return EPDK_OK;
}




static void fw2buf(u8 *buf, const u32 *fw)
{
	u32 *u32_buf = (int *)buf;
	*u32_buf = *fw;
}


static void gsl_load_fw(void)
{
	__u8 reg = 0;
	__u32 source_line = 0;
	__u32 source_len;
	__s32 ret = 0;
	struct fw_data *ptr_fw;
	ptr_fw = GSLX680_FW;
	source_len = sizeof(GSLX680_FW)/sizeof(GSLX680_FW[0]);
	Funprintf("--here = %d --\n",source_len);
	for (source_line = 0; source_line<source_len; source_line++)
	{
		reg = (u8)ptr_fw[source_line].offset;
		ret = iic_write_16_32(&reg,1,ptr_fw[source_line].val);
		if(ret ==-1)
		{
			Funprintf("--touch iic write fail--\n");
		}
	}
}

static void clr_reg(void)
{
    __s32 ret = 0;
	u8 write_buf[4]	= {0};
	u8 reg = 0;

	write_buf[0] = 0x88;
	reg = 0xe0;
	ret = iic_write_bytes(&reg,1,&write_buf[0],1);
	esKRNL_TimeDly(2);
	
	write_buf[0] = 0x01;//0x03
	reg = 0x80;
	ret = iic_write_bytes(&reg,1,&write_buf[0],1);
	esKRNL_TimeDly(2);

	write_buf[0] = 0x04;
	reg = 0xe4;
	ret = iic_write_bytes(&reg,1,&write_buf[0],1);
	esKRNL_TimeDly(2);

	write_buf[0] = 0x00;
	reg = 0xe0;
	ret = iic_write_bytes(&reg,1,&write_buf[0],1);
	esKRNL_TimeDly(2);
}

static void startup_chip(void)
{
    __s32 ret  = 0;
	u8 reg = 0;
	u8 tmp = 0x00;
	
	reg = 0xe0;
	ret = iic_write_bytes(&reg,1,&tmp,1);
	esKRNL_TimeDly(1);
}


static void reset_chip(void)
{
	__s32 ret  = 0;

    u8 reg = 0;
	u8 tmp = 0x88;
	u8 buf[4] = {0x00};
	
	reg = 0xe0;
	ret = iic_write_bytes(&reg,1,&tmp,1);
	esKRNL_TimeDly(1);

	tmp = 0x04;
	reg = 0xe4;
	ret = iic_write_bytes(&reg,1,&tmp,1);
	esKRNL_TimeDly(1);

	reg = 0xbc;
	ret = iic_write_bytes(&reg,1,buf,sizeof(buf));
	esKRNL_TimeDly(1);
}

static __s32 ctp_init(void)
{
reset_begin:;
	eDbug("11 gt = %d  \n\n", esKRNL_TimeGet());
	ctp_reset_first_time();
	eDbug("12 gt = %d  \n\n", esKRNL_TimeGet());
    esKRNL_TimeDly(4);
	eDbug("21 gt = %d  \n\n", esKRNL_TimeGet());
	clr_reg();
	eDbug("22 gt = %d  \n\n", esKRNL_TimeGet());
	reset_chip();
	eDbug("23 gt = %d  \n\n", esKRNL_TimeGet());
	gsl_load_fw();	
	eDbug("24 gt = %d  \n\n", esKRNL_TimeGet());
	startup_chip();	
	eDbug("25 gt = %d  \n\n", esKRNL_TimeGet());
	reset_chip();	
	eDbug("26 gt = %d  \n\n", esKRNL_TimeGet());
	startup_chip();	
	eDbug("27 gt = %d  \n\n", esKRNL_TimeGet());
	return EPDK_TRUE;
}

static __s32 iic_write_bytes_end_cmd(__u8*  addr, __s32 addr_len, __u8 *data, __s32 data_len)
{
    __s32 ret;

    ret = iic_write_bytes(addr, addr_len, data, data_len);
    if(EPDK_FAIL == ret)
    {
        __wrn("iic_write_bytes fail...\n");
        return EPDK_FAIL;
    }

    ret = ctp_iic_end_cmd();
    if(EPDK_FAIL == ret)
    {
        __wrn("ctp_iic_end_cmd fail...\n");
        return EPDK_FAIL;
    }

    return EPDK_OK;
}

static __s32 iic_read_bytes_end_cmd(__u8*  addr, __s32 addr_len, __u8 *data, __s32 data_len)
{
    __s32 ret;

    ret = iic_read_bytes(addr, addr_len, data, data_len);
    if(EPDK_FAIL == ret)
    {
        __wrn("iic_read_bytes fail...\n");
        return EPDK_FAIL;
    }

    ret = ctp_iic_end_cmd();
    if(EPDK_FAIL == ret)
    {
        __wrn("ctp_iic_end_cmd fail...\n");
        return EPDK_FAIL;
    }

    return EPDK_OK;
}


#define  IIC_ADR       (0X40<<1)

static __s32 iic_write_16_32(__u8*  addr,__s32 addr_len, __u32 data)
{
    __s32 ret=EPDK_FAIL;
    __twi_dev_para_ex_t  siic;
    __u8 iic_addr[2];
    __u8 iic_data[4];
    iic_data[3] = data>>24;
    iic_data[2] = data>>16;
    iic_data[1] = data>>8;
    iic_data[0] = data;
    
    siic.slave_addr        = 0x80>>1;
    siic.slave_addr_flag   = TWI_SLAVE_ADDRESS_07BIT;
    siic.byte_addr         = addr;
    siic.byte_addr_width   = addr_len;
    siic.data              = iic_data;
    siic.byte_count        = 4;
	ret = eLIBs_fioctrl(tp_private.hIIC, TWI_WRITE_SPEC_RS,  0, (void *)&siic);
	return ret;
}


static __s32 iic_write_bytes(__u8*  addr, __s32 addr_len, __u8 *data, __s32 data_len)
{
    __s32 ret;
    __twi_dev_para_ex_t  piic;
    
    if(NULL == tp_private.hIIC)
  	{
  		__wrn("iic hdl is null...\n");
  		return EPDK_FAIL;
  	}

    eLIBs_memset(&piic, 0, sizeof(__twi_dev_para_ex_t));
    piic.slave_addr_flag = TWI_SLAVE_ADDRESS_07BIT;
    //piic.slave_addr      = g_iic_slave_addr[tp_private.type];
	piic.slave_addr      = 0x80>>1;
    piic.byte_addr_width = addr_len;
    piic.byte_addr       = addr;
    piic.data            = data;
    piic.byte_count      = data_len;

    #if TS_PRINT_IIC_DATA

    {
        __s32 i;

        __wrn("*******print iic write addr******\n");   
        for(i = 0 ; i < addr_len ; i++)
        {
            __inf("0x%.2x ", addr[i]);
            if(0 == ((i+1)%16))
            {
                __inf("\n");
            }
        }               

        __inf("\n");
        
        __wrn("*******print iic write data******\n");   
        for(i = 0 ; i < data_len ; i++)
        {
            __inf("0x%.2x ", data[i]);
            if(0 == ((i+1)%16))
            {
                __inf("\n");
            }
        }
        
        __inf("\n\n");
    }
    
    #endif

    ret = eLIBs_fioctrl(tp_private.hIIC, TWI_WRITE_SPEC_RS, 0, &piic);
	//eLIBs_printf("%s,%d>>>>>>>>>>addr = %d>>>>>ret=%d>\n",__FILE__,__LINE__,&addr,ret);
    return ret;
}

static __s32 iic_read_bytes(__u8*  addr, __s32 addr_len, __u8 *data, __s32 data_len)
{
    __s32 ret;
    __twi_dev_para_ex_t  piic;
    
    if(NULL == tp_private.hIIC)
  	{
  		__wrn("iic hdl is null...\n");
  		return EPDK_FAIL;
  	}

    eLIBs_memset(&piic, 0, sizeof(__twi_dev_para_ex_t));
    piic.slave_addr_flag = TWI_SLAVE_ADDRESS_07BIT;
    //piic.slave_addr      = g_iic_slave_addr[tp_private.type];
    piic.slave_addr      = 0x81>>1;
    piic.byte_addr_width = addr_len;
    piic.byte_addr       = addr;
    piic.data            = data;
    piic.byte_count      = data_len;

    #if TS_PRINT_IIC_DATA

    {
        __s32 i;

        __wrn("*******print iic read addr******\n");   
        for(i = 0 ; i < addr_len ; i++)
        {
            __inf("0x%.2x ", addr[i]);
            if(0 == ((i+1)%16))
            {
                __inf("\n");
            }
        }                               
        
        __inf("\n\n");
    }
    
    #endif

    ret = eLIBs_fioctrl(tp_private.hIIC, TWI_READ_SPEC_RS, 0, (void *)&piic);
	//eLIBs_printf("%s,%d>>>>>>>>>>addr = %x>>>>>ret=%d>\n",__FILE__,__LINE__,&addr,ret);
	
    #if TS_PRINT_IIC_DATA

    {
        __s32 i;                   
        
        __wrn("*******print iic read data******\n");   
        for(i = 0 ; i < data_len ; i++)
        {
            __inf("0x%.2x ", data[i]);
            if(0 == ((i+1)%16))
            {
                __inf("\n");
            }
        }
        
        __inf("\n\n");
    }
    
    #endif
    
    return ret;
}

static __s32 ctp_iic_pre_cmd(void)
{
    __s32 ret;
    __u8 cmd[]={0xff, 0x0f};

    ret = iic_write_bytes(cmd, sizeof(cmd), NULL, 0);
    if(EPDK_FAIL == ret)
    {
        __wrn("send end cmd fail...\n");
    }
    else
    {
        __wrn("send end cmd ok...\n");
    }

    return EPDK_OK;
}

static __s32 ctp_iic_end_cmd(void)
{
    __s32 ret;
    __u8 cmd[]={0x00, 0x80};

    ret = iic_write_bytes(cmd, sizeof(cmd), NULL, 0);
    if(EPDK_FAIL == ret)
    {
        __wrn("send end cmd fail...\n");
    }
    else
    {
      //  __wrn("send end cmd ok...\n");
    }
}

static __s32 ctp_reset_first_time(void)
{
	__s32 ret;
	
	if(NULL == tp_private.hReset)
	{
		__wrn("reset pin is null...\n");
		return EPDK_FAIL;
	}   

    ret = esPINS_SetPinIO(tp_private.hReset, EPDK_TRUE, NULL);
    if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}
	
	/*ret = esPINS_WritePinData(tp_private.hReset, 1, NULL);
	if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}    
	
    esKRNL_TimeDly(TS_FIRST_RESET_PERIOD);*/
	
	ret = esPINS_WritePinData(tp_private.hReset, 0, NULL);
	if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}
	
	esKRNL_TimeDly(TS_FIRST_RESET_PERIOD);

	ret = esPINS_WritePinData(tp_private.hReset, 1, NULL);
	if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}

	esKRNL_TimeDly(TS_FIRST_RESET_PERIOD);  
#if 0
	esKRNL_TimeDly(TS_FIRST_RESET_PERIOD);
	
	ret = esPINS_SetPinIO(tp_private.hReset, EPDK_FALSE, NULL);
    if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}

    ret = esPINS_SetPinPull(tp_private.hReset, 0, NULL);
    if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}

    esKRNL_TimeDly(TS_FIRST_RESET_PERIOD);
#endif
	__wrn("ctp_reset_first_time ok...\n");
	return EPDK_OK;
}


static __s32 ctp_reset(void)
{
	__s32 ret;
	
	if(NULL == tp_private.hReset)
	{
		__wrn("reset pin is null...\n");
		return EPDK_FAIL;
	}

    ret = esPINS_SetPinIO(tp_private.hReset, EPDK_TRUE, NULL);
    if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}
	
	ret = esPINS_WritePinData(tp_private.hReset, 0, NULL);
	if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}
	
	esKRNL_TimeDly(TS_RESET_PERIOD);
	
	ret = esPINS_WritePinData(tp_private.hReset, 1, NULL);
	if(EPDK_FAIL == ret)
	{
		__wrn("reset fail...\n");
		return EPDK_FAIL;
	}
	
	esKRNL_TimeDly(TS_RESET_PERIOD);
	
	__wrn("ctp_reset ok...\n");
	return EPDK_OK;
}

//;;0:positive 1: negative
static __s32 ctp_set_irq_mode(void)
{
    __s32 ret;
    __u8 buf[8]={0};

    buf[0] = 0xc0;

    buf[1] = 0x0f;  

    __wrn("try to set irq mode to %d\n", tp_private.irq_mode);

    ret = iic_read_bytes_end_cmd(buf, 2, buf+2, 1);
    if(EPDK_FAIL == ret)
    {
        __wrn("read Md_switch fail...\n");
        return EPDK_FAIL;
    }

    __wrn("Md_switch=%x\n", buf[2]);
    
    if(0 == tp_private.irq_mode)
    {
        buf[2] |= (0x1<<3);
    }
    else
    {
        buf[2] &= ~(0x1<<3);        
    }

    ret = iic_write_bytes_end_cmd(buf, 2, buf+2, 1);
    if(EPDK_FAIL == ret)
    {
        __wrn("write Md_switch fail...\n");
        return EPDK_FAIL;
    }

    __wrn("set irq mode to %d success\n", tp_private.irq_mode);
    
    return EPDK_OK;
}
static __hdle reqInterGpio(__u8 *name,__u8 mul_sel,__u8 port, __u8 pin)
{
	user_gpio_set_t  PinStat;
	__hdle			 hPin;
	
	eLIBs_strcpy(PinStat.gpio_name, name);
	PinStat.port	  = port;
	PinStat.port_num  = pin;
	PinStat.mul_sel   = mul_sel;	
	PinStat.pull	  = 0;
	PinStat.drv_level = 1;
	PinStat.data	  = 1;
	
    hPin = esPINS_PinGrpReq(&PinStat, 1);
    if (hPin == NULL)
    {
    __wrn(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>read cfg file fail:tp_para int...\n");
        return EPDK_FAIL;
    }
	return hPin;
}


//#define TP_TWO_POINT
__s32 touchpanel_init(void)//112358
{    
    __s32 ret;
	__u32 KeyValue=0;
    __hdle hdl;
	__s32 gt;
    user_gpio_set_t  gpio_set[1];  

    if(TABLE_SIZE(g_iic_slave_addr) != TABLE_SIZE(g_iic_init_data)
        ||TABLE_SIZE(g_iic_slave_addr) != TABLE_SIZE(g_iic_init_data_addr)
        )
    {
    	__wrn("cfg error...\n");
    	return EPDK_FAIL;
    }
    	
    if(EPDK_FAIL == esCFG_GetKeyValue("tp_para", "change_xy", (__s32 *)&sid, 1))
    {
        __wrn("get cfg fail, tp_para, change_xy\n");
        sid = 0;
    }     
    __wrn("sid=%d\n", sid);

    if(EPDK_FAIL == esCFG_GetKeyValue("tp_para", "revert_x", (__s32 *)&x_revert, 1))
    {
        __wrn("get cfg fail, tp_para, revert_x\n");
        x_revert = 0;
    }        
    __wrn("x_revert=%d\n", x_revert);

    if(EPDK_FAIL == esCFG_GetKeyValue("tp_para", "revert_y", (__s32 *)&y_revert, 1))
    {
        __wrn("get cfg fail, tp_para, revert_y\n");
        y_revert = 0;
    }        
    __wrn("y_revert=%d\n", y_revert);

    if(EPDK_FAIL == esCFG_GetKeyValue("tp_para", "type", (__s32 *)&tp_private.type, 1))
    {
        __wrn("get cfg fail, tp_para, type\n");
        tp_private.type = 0;
    } 
    __wrn("tp_private.type=%d\n", tp_private.type);

    if(EPDK_FAIL == esCFG_GetKeyValue("tp_para", "irq_mode", (__s32 *)&tp_private.irq_mode, 1))
    {
        __wrn("get cfg fail, tp_para, irq_mode\n");
        tp_private.irq_mode = 3;
    } 
    __wrn("tp_private.irq_mode=%d\n", tp_private.irq_mode);

    if(tp_private.type >= TABLE_SIZE(g_iic_slave_addr))
	{
		__wrn("type err...");
		return EPDK_FAIL;
	}

    if(EPDK_FAIL == esCFG_GetKeyValue("tp_para", "screen_max_x", (__s32 *)&tp_private.screen_max_x, 1))
    {
        __wrn("get cfg fail, tp_para, screen_max_x\n");
        tp_private.screen_max_x = 800;
    } 
    __wrn("tp_private.screen_max_x=%d\n", tp_private.screen_max_x);

    if(EPDK_FAIL == esCFG_GetKeyValue("tp_para", "screen_max_y", (__s32 *)&tp_private.screen_max_y, 1))
    {
        __wrn("get cfg fail, tp_para, screen_max_y\n");
        tp_private.screen_max_y = 480;
    } 
    __wrn("tp_private.screen_max_y=%d\n", tp_private.screen_max_y);

    tp_private.hIIC = eLIBs_fopen("b:\\BUS\\twi2", "r+");
    if(NULL == tp_private.hIIC)
	{
		__wrn("open twi2 fail...\n");
		return EPDK_FAIL;
	}
	KeyValue = eLIBs_fioctrl(tp_private.hIIC, TWI_SET_SCL_CLOCK, 0, (void *)TWI_SCLK_400KHZ); 	
	ret = esCFG_GetKeyValue("tp_para", "reset", (int *)gpio_set, sizeof(user_gpio_set_t)/4);
    if (EPDK_FAIL == ret)
    {
    	__wrn("read cfg file fail:tp_para reset...\n");
    	return EPDK_FAIL;
    }

    hdl = esPINS_PinGrpReq(gpio_set, 1);
    if (!hdl)
    {
        __wrn("request pin failed reset \n");
        return EPDK_FAIL;
    }
      		
	tp_private.hReset = hdl;
#if 1	
	ret = esCFG_GetKeyValue("tp_para", "int", (int *)gpio_set, sizeof(user_gpio_set_t)/4);
    if (EPDK_FAIL == ret)
    {
    	__wrn("read cfg file fail:tp_para int...\n");
    	return EPDK_FAIL;
    }
      
    hdl = esPINS_PinGrpReq(gpio_set, 1);
    if (!hdl)
    {
        __wrn("request pin failed int \n");
        return EPDK_FAIL;
    }
	tp_private.hInt = hdl;
    ret = esPINS_SetPinIO(tp_private.hInt, 6, NULL);
	esPINS_WritePinData(hdl, 0, "int");  	
#else

	tp_private.hInt = reqInterGpio("int", 6, 5, 4);

#endif    

    __msg("begin ctp_init.\n");
	gt = esKRNL_TimeGet();

    ret = ctp_init();   //112358 
    eDbug("end ctp_init. gt = %d ms\n", (esKRNL_TimeGet() - gt)*10);
    if(EPDK_FAIL == ret)
    {
        __wrn("ctp_init fail...\n");
        return EPDK_FAIL;
    }
    tp_info.pertime = TP_DEFAULT_MSG_PERTIME;  //锟斤拷锟�5锟轿诧拷锟斤拷锟斤拷锟斤拷一锟斤拷锟斤拷息
    tp_info.offset  = TP_DEFAULT_OFFSET;       //x锟斤拷锟斤拷y锟斤拷锟斤拷偏锟筋超锟斤拷7锟斤拷锟斤拷锟斤拷锟斤拷为锟斤拷一锟斤拷move锟斤拷锟斤拷

    tp_isr_task_p = tp_isr_task_normal; //锟叫断达拷锟斤拷

    tp_catch_data = tp_catch_data_normal;//锟斤拷取锟斤拷锟斤拷
    
    tp_private.tp_sem_main  = esKRNL_SemCreate(0);
    tp_private.tp_sem_data  = esKRNL_SemCreate(0);
    tp_private.main_tid = esKRNL_TCreate(touchpanel_main_task, 0, 0x800, KRNL_priolevel1);

    //enable TP
	//*(volatile unsigned long*)(0xf1C24800+0x00) |= (0x1<<0);         

    if(tp_private.hInt)
    {
        __wrn("install pio isr\n");
        ret = esPINS_RegIntHdler(tp_private.hInt, touchpanel_isr_task_pio, NULL);
        if(EPDK_FAIL == ret)
        {
           __wrn("install pio isr fail...\n");
        }

        __wrn("set irq mode\n");
        ret = esPINS_SetIntMode(tp_private.hInt, 0/*tp_private.irq_mode*/);                
        if(EPDK_FAIL == ret)
        {
            __wrn("set irq mode fail...\n");
        }      
		
        __wrn("enable one pio int\n");
        ret = esPINS_EnbaleInt(tp_private.hInt); 
        if(EPDK_FAIL == ret)
        {
            __wrn("enable one pio int fail...\n");
        }
    }    
    __wrn("ctp init finish\n");
    return EPDK_OK;
}

/*
****************************************************************************************************
*
*             touchpanel_exit
*
*  Description:
*       touchpanel_exit
*
*  Parameters:
*
*  Return value:
*       none
*
****************************************************************************************************
*/
__s32 touchpanel_exit(void)
{
    __u8  err;
	
	__wrn("touchpanel_exit   \n");

    if(tp_private.main_tid)
    {
        esKRNL_SemPost(tp_private.tp_sem_main);
        esKRNL_TDel(tp_private.main_tid);
        esKRNL_TimeDly(4);
    }

    

	if(tp_private.hIIC)
	{
		eLIBs_fclose(tp_private.hIIC);
		tp_private.hIIC = 0;
	}
	
	if(tp_private.hInt)
	{
        esPINS_DisbaleInt(tp_private.hInt);
        esPINS_UnregIntHdler(tp_private.hInt, NULL);
		esPINS_PinGrpRel(tp_private.hInt, 2);
		tp_private.hInt = NULL;
	}
	
	if(tp_private.hReset)
	{
		esPINS_PinGrpRel(tp_private.hReset, 2);
		tp_private.hReset = NULL;
	}

    esKRNL_SemDel(tp_private.tp_sem_main, OS_DEL_ALWAYS, &err);
    esKRNL_SemDel(tp_private.tp_sem_data, OS_DEL_ALWAYS, &err);

    __wrn("tp exit\n");

    return EPDK_OK;
}


/*  
*   通锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟叫断ｏ拷
*   xy_fp锟斤拷示锟斤拷锟铰的碉拷一锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟絒0]锟斤拷示x锟斤拷锟疥，[1]锟斤拷示y锟斤拷锟疥，锟皆碉拷一锟斤拷锟斤拷锟斤拷锟轿匡拷锟斤拷锟斤拷直锟斤拷锟斤拷水平锟斤拷锟斤拷锟叫断★拷
*   
*/
#define TP_FAST_FLICK_PIXEL  (12)
#define TP_SLOW_FLICK_PIXEL  (15) 
static __s32 tp_gesture_recognize(int *data_x, int *data_y, int count,int *xy_fp)
{
	int i;
	int delta;
	int max_x;
	int min_x;
	int max_y;
	int min_y;    
    // maybe fastest flick
	if(count < 3)
	{  
        return 0;//no direction,one point
	}
    // 1.fast flick
    if(count < 7)
	{
        max_x = xy_fp[0];
        min_x = xy_fp[0];
        max_y = xy_fp[1];
        min_y = xy_fp[1];
        
        for(i = 0; i < count; i++)
        {
            max_x = MAX(max_x, data_x[i]);
            min_x = MIN(min_x, data_x[i]);
            max_y = MAX(max_y, data_y[i]);
            min_y = MIN(min_y, data_y[i]);
        }
        //fast flick
        if((max_x-min_x)>(max_y-min_y))/* horizontal */
        {
            if(count > 2)
            {
                delta = data_x[count-1] - data_x[count-3];/* 锟斤拷锟斤拷3锟斤拷锟斤拷锟斤拷锟� */
            }
            else
            {
                delta = data_x[count-1] - data_x[count-2];/* 锟斤拷锟斤拷2锟斤拷锟斤拷锟斤拷锟� */
            }
            /*  */
            if(ABS(delta)>TP_FAST_FLICK_PIXEL)
            {
                return (delta > 0) ? RIGHTWARD : LEFTWARD;
            }
            else
            {
                return 0;
            }
        }
        else if((max_x-min_x)<(max_y-min_y))/* vertical */
        {
            if(count > 2)
            {
                delta = data_y[count-1] - data_y[count-3];/* 锟斤拷锟斤拷2锟斤拷锟斤拷锟斤拷锟� */
            }
            else
            {
                delta = data_y[count-1] - data_y[count-2];/* 锟斤拷锟斤拷2锟斤拷锟斤拷锟斤拷锟� */
            }
        
            if(ABS(delta)>TP_FAST_FLICK_PIXEL)
            {
                return (delta > 0) ? DOWNWARD : UPWARD;
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }                
	}
	
    /* equal or more than 7 sample data */
    max_x = xy_fp[0];
    min_x = xy_fp[0];
    max_y = xy_fp[1];
    min_y = xy_fp[1];

	if(count < 11)
	{	
    	for(i = count - 7; i < count; i++)
    	{
    		max_x = MAX(max_x,data_x[i]);
    		min_x = MIN(min_x,data_x[i]);
    		max_y = MAX(max_y,data_y[i]);
    		min_y = MIN(min_y,data_y[i]);
    	}
	}
	else
	{
	    __u32 index = 0;
        for(i = count - 11; i < count; i++)
        {   
            index = i&TP_DATA_BUFFER_MASK;         
            max_x = MAX(max_x,data_x[index]);
            min_x = MIN(min_x,data_x[index]);
            max_y = MAX(max_y,data_y[index]);
            min_y = MIN(min_y,data_y[index]);
        }
	}
    
	if((max_x-min_x)>(max_y-min_y))/* horizontal */
	{
	    __u32 last_1 = (count-1)&TP_DATA_BUFFER_MASK;
	    __u32 last_2 = (count-2)&TP_DATA_BUFFER_MASK;
	    __u32 last_6 = (count-6)&TP_DATA_BUFFER_MASK;
	    __u32 last_7 = (count-7)&TP_DATA_BUFFER_MASK; 
	    
	    __s32 delta0 = (data_x[last_2] + data_x[last_1]);/* 锟斤拷锟斤拷2锟斤拷锟斤拷锟斤拷锟� */
		__s32 delta1 = (data_x[last_7] + data_x[last_6]);/*  */
		if(TP_ABS(delta0-delta1)>TP_SLOW_FLICK_PIXEL)
		{
    		return ABS(delta0)>ABS(delta1) ? RIGHTWARD : LEFTWARD;
    	}
    	else
    	{
            return 0;
    	}
	}
	else if((max_x-min_x)<(max_y-min_y))/* vertical */
	{
	    __u32 last_1 = (count-1)&TP_DATA_BUFFER_MASK;
	    __u32 last_2 = (count-2)&TP_DATA_BUFFER_MASK;
	    __u32 last_6 = (count-6)&TP_DATA_BUFFER_MASK;
	    __u32 last_7 = (count-7)&TP_DATA_BUFFER_MASK;	
    
	    __s32 delta0 = (data_y[last_2] + data_y[last_1]);/* 锟斤拷锟斤拷3锟斤拷锟斤拷锟斤拷锟� */
		__s32 delta1 = (data_y[last_7] + data_y[last_6]);/*  */

		if(TP_ABS(delta0-delta1)>TP_SLOW_FLICK_PIXEL)
		{
    		return ABS(delta0)>ABS(delta1) ? DOWNWARD : UPWARD;
		}
		else
		{
            return 0;
		}
	}
	else
	{
        return 0;
	}
	
}

/*  
*  xy锟斤拷锟斤拷buffer锟斤拷锟斤拷效锟斤拷锟斤拷为锟斤拷小为count,
*  xy锟斤拷锟斤拷锟斤拷锟斤拷一锟斤拷锟斤拷锟斤拷锟斤拷莸锟斤拷锟斤拷锟轿猚ount-1锟斤拷
*  dir锟斤拷示锟剿讹拷锟侥凤拷锟斤拷
*/
static __u32 tp_flick_speed(int *data_x, int *data_y, int count, int dir)
{        
        __s32 delta_x,delta_y;
        __u32 speed = 0;
        __u32 flick = 0;
        
        /* 锟斤拷锟斤拷锟斤拷锟斤拷锟�,锟斤拷锟斤拷锟斤拷锟�2锟斤拷 */
        if(count < 2)
        { /* 一锟斤拷锟斤拷锟斤拷锟斤拷锟劫讹拷识锟斤拷 */
    	    __u32 j;
    	    ts_sample_t in4[4] = {0};
            for(j = 0; j < TP_ONE_TIME; j++)            
            {                      
               in4[j].x  = tp_private.crt_x[j];
               in4[j].y  = tp_private.crt_y[j];      
            }
            tp_fp_sort(in4);
            //linear_read(tp_private.calibrate_para, in4[2].x, in4[2].y, (int *)&(in4[2].x) , (int *)&(in4[2].y));
            //linear_read(tp_private.calibrate_para, in4[1].x, in4[1].y, (int *)&(in4[1].x) , (int *)&(in4[1].y));  
            delta_x = in4[2].x - in4[1].x;
            delta_y = in4[2].y - in4[1].y;
            
            if((delta_x > 25) && (delta_y > 25))
            {
                return 0;// 散锟斤拷
            }            
            
            if(delta_x > delta_y)/* horizontal */
            {               
                if(delta_x > 30)
                {
                    speed = 2;
                }
                else
                {
                    speed = 0;
                }
            }
            else
            {
                if(delta_y > 30)
                {
                    speed = 10;
                }
                else
                {
                    speed = 0;
                }
            }
            return speed;
            
        }
        else if(count < 3)
        {
            // 1. fast flick,sample data less than three                                      
            delta_x = TP_ABS(data_x[count-1] - data_x[count-2]);
            delta_y = TP_ABS(data_y[count-1] - data_y[count-2]);            
            flick = 1;
        }
        else if(count < 7)
        {
            // 2. fast flick,sample data less than eight. weight is heavy.             
            delta_x = TP_ABS(data_x[count-1] - data_x[count-3]);
            if(delta_x < TP_ABS(data_x[count-1] - data_x[count-2]))
            {
                delta_x = TP_ABS(data_x[count-1] - data_x[count-2]);
            }
            delta_y = TP_ABS(data_y[count-1] - data_y[count-3]); 
            if(delta_y < TP_ABS(data_y[count-1] - data_y[count-2]))
            {
                delta_y = TP_ABS(data_y[count-1] - data_y[count-2]);
            }
        }
        else
        {        
            __u32 last_1 = (count-1)&TP_DATA_BUFFER_MASK;
            __u32 last_2 = (count-2)&TP_DATA_BUFFER_MASK;    
            // 3. slow flick
            delta_x = TP_ABS(data_x[last_1] - data_x[last_2]);
            delta_y = TP_ABS(data_y[last_1] - data_y[last_2]);
        }
        
        if(dir == UPWARD || dir == DOWNWARD)// vertical 
        {       
            speed = delta_y;   
        }        
        else if(dir == RIGHTWARD || dir == LEFTWARD)// horizontical 
        {     
            speed = delta_x;    
        }
        else
        {
            if((delta_x > 25) && (delta_y > 25))
            {
                return 0;// 散锟斤拷
            }  

            // can't judge direction, may be fast flick 
            if((delta_x > 30) || (delta_y > 30))
            {
                if(flick == 1)
                {
                    speed = 75; // judge as quick flick
                }
                else
                {   
                    speed = 0;
                }                
            }
            else
            {
                speed = 0;
            }            
        }

        // go out
        if(speed > 150)
        {
            speed = 150;
        }
        if(speed < 31)
        {
            speed = 0;// ignore < 6
        }
        
        return (speed/5);              
}


/*
**********************************************************************************
*  dual point process
***********************************************************************************
*/

#define iter1(N) \
    try = root + (1 << (N)); \
    if (n >= try << (N))   \
    {   n -= try << (N);   \
        root |= 2 << (N); \
    }
    
/* 锟斤拷锟斤拷锟斤拷锟斤拷 */
static __u32 tp_isqrt (__u32 n)
{
    __u32 root = 0, try;
    iter1 (15);    iter1 (14);    iter1 (13);    iter1 (12);
    iter1 (11);    iter1 (10);    iter1 ( 9);    iter1 ( 8);
    iter1 ( 7);    iter1 ( 6);    iter1 ( 5);    iter1 ( 4);
    iter1 ( 3);    iter1 ( 2);    iter1 ( 1);    iter1 ( 0);

#undef iter1
    
    return root >> 1;
}

/* 锟皆诧拷值锟剿诧拷 */
static int tp_deltaxy_filter(__tp_delta_xy   *in_sample, __tp_delta_xy *out_sample)
{
    __u32 max_dx = 0,max_dy = 0;
    __u32 min_dx = 0x7ff,min_dy = 0x7ff;
    __u32 sum_dx = 0,sum_dy = 0;
    __u32 i;

    for(i= 0; i< 4;i++)
    {
        if(min_dx > in_sample[i].dx)
            min_dx = in_sample[i].dx;

        if(min_dy > in_sample[i].dy)
            min_dy = in_sample[i].dy;
            
        if(max_dx < in_sample[i].dx)
            max_dx = in_sample[i].dx;

        if(max_dy < in_sample[i].dy)
            max_dy = in_sample[i].dy;

        sum_dx += in_sample[i].dx;
        sum_dy += in_sample[i].dy;
    }

    sum_dx = sum_dx - min_dx - max_dx;
    sum_dy = sum_dy - min_dy - max_dy;

    out_sample->dx = sum_dx>>1;
    out_sample->dy = sum_dy>>1;

    return 0;
}



/* 锟斤拷锟斤拷模式锟铰的碉拷锟姐处锟斤拷 */
static __s32 tp_onepoint_deal(__u32 *msg_send_start, __u32 once_count)
{
    __u32 tmp_index;
    __s32 ret = EPDK_FAIL;

    /* 锟斤拷锟较层发锟斤拷锟斤拷息 */
    if(data_index == TP_START_POINT)     
    {   
        /* 锟斤拷录锟斤拷一锟斤拷xy锟斤拷锟斤拷锟斤拷息 */
        tp_private.xpre = drv_tp_msg.xpoint = tp_point.x[0];
        tp_private.ypre = drv_tp_msg.ypoint = tp_point.y[0];        
        drv_tp_msg.msg_type = EV_TP_PRESS_START;       
        drv_tp_msg.speed_dir = 0;
        drv_tp_msg.speed_val = 0;   
        tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg); 
        
        xy_first_point[0] = tp_point.x[0];
        xy_first_point[1] = tp_point.y[0];
        
        *msg_send_start = once_count + TP_START_POINT;  /* 锟斤拷锟斤拷锟斤拷一锟轿的凤拷锟酵碉拷 */
        ret = EPDK_OK;

        send_first = 1;/* 锟窖撅拷锟斤拷锟斤拷锟剿碉拷一锟姐，锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷夥拷锟� */
    }
    else if(data_index >= *msg_send_start)             
    {
        tmp_index = (acount + TP_DATA_BUFFER_SIZE - TP_START_POINT)&(TP_DATA_BUFFER_MASK);       
        drv_tp_msg.xpoint = tp_point.x[tmp_index];
        drv_tp_msg.ypoint = tp_point.y[tmp_index]; 
     //   eLIBs_printf("data_index =%d, acount =%d, tmp_index = %d\n",data_index,acount,tmp_index);
        if(pre_action != EV_TP_PRESS_MOVE)
        {
            /* x,y锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷值锟斤拷为锟斤拷move锟斤拷锟斤拷 */
            if((TP_ABS(tp_point.x[tmp_index] - tp_private.xpre) > tp_info.offset) || (TP_ABS(tp_point.y[tmp_index] - tp_private.ypre) > tp_info.offset))
            {
                pre_action = EV_TP_PRESS_MOVE;
            }
        }
        else if(pre_action == EV_TP_PRESS_MOVE)
        {
            /* 前锟斤拷3锟斤拷锟斤拷锟斤拷锟斤拷龋锟斤拷贫锟斤拷锟斤拷袒锟斤拷锟斤拷hold锟斤拷锟斤拷锟斤拷锟街碉拷锟斤拷锟叫★拷锟斤拷锟絤ove锟斤拷锟斤拷要小 */
            if((TP_ABS(tp_point.x[tmp_index] - tp_private.xpre) < 2) 
                            && (TP_ABS(tp_point.y[tmp_index] - tp_private.ypre) < 2))
            {     
                if( (TP_ABS(tp_point.x[tmp_index-2] - tp_private.xpre) < 2)
                            && (TP_ABS(tp_point.y[tmp_index-2] - tp_private.ypre) < 2)) 
                {
                    pre_action = EV_TP_PRESS_HOLD;   
                }
            }
        }
        
        tp_private.xpre = tp_point.x[tmp_index];/* 锟斤拷录xy锟斤拷锟斤拷锟斤拷息 */
        tp_private.ypre = tp_point.y[tmp_index];    
                
        *msg_send_start += once_count;/* 锟斤拷锟斤拷锟斤拷一锟轿的凤拷锟酵碉拷 */

        drv_tp_msg.msg_type = pre_action;
        tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);
        
        ret = EPDK_OK;
    }

    return ret;
}

/* 锟斤拷锟斤拷模式锟铰碉拷锟斤拷锟姐处锟斤拷 */
static __s32 tp_dualpoint_deal(__u32 *msg_send_start, __u32 once_count)
{
    __s32 ret = EPDK_FAIL;     
    __u32 tmp_index1 = (data_index -1)&TP_DATA_BUFFER_MASK;
    __u32 tmp_index2 = (data_index -2)&TP_DATA_BUFFER_MASK;

    if(tp_point.dist[tmp_index1] < 12)
    {
        __inf("*dual point: distant < 12 pixels*\n");
        return ret;
    }    
    
    dual_cnt++;

    /* 锟斤拷为锟斤拷tp锟斤拷锟斤拷目锟绞� */
    if(dual_fp == 1)     
    {   
        xy_first_point[2] = tp_point.dx[tmp_index1];
        xy_first_point[3] = tp_point.dy[tmp_index1];   
        xy_first_point[4] = tp_point.dist[tmp_index1];
        dual_fp = 0;/* 识锟斤拷锟斤拷锟姐开始锟斤拷xy锟斤拷锟斤拷 */
        /* 锟角凤拷锟窖撅拷锟斤拷锟斤拷start */
        if(!send_first)
        {
            /* 锟斤拷录锟斤拷一锟斤拷xy锟斤拷锟斤拷锟斤拷息 */
            tp_private.xpre = drv_tp_msg.xpoint = tp_point.x[tmp_index1];
            tp_private.ypre = drv_tp_msg.ypoint = tp_point.y[tmp_index1];        
            drv_tp_msg.msg_type = EV_TP_PRESS_START;       
            drv_tp_msg.speed_dir = 0;
            drv_tp_msg.speed_val = 0;   
            tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);    
            __inf("two points press start.\n");
            xy_first_point[0] = tp_point.x[tmp_index1];
            xy_first_point[1] = tp_point.y[tmp_index1];        
            
            send_first = 1;
        }        
    }
    else          
    {  
        /*  锟斤拷锟斤拷锟斤拷pinch in锟斤拷锟斤拷pinch out锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷pinch hold锟斤拷锟斤拷, 4锟斤拷pixel之锟斤拷锟斤拷为锟角讹拷锟斤拷  */
        if((tp_point.dist[tmp_index1] > tp_point.dist[tmp_index2])
                && (TP_ABS(tp_point.dist[tmp_index1] - tp_point.dist[tmp_index2]) > 3) )
        {
            //increase,pinch out
            pinch_cnt++;
        }     
        else if((tp_point.dist[tmp_index1] < tp_point.dist[tmp_index2])
                    && (TP_ABS(tp_point.dist[tmp_index1] - tp_point.dist[tmp_index2]) > 3) )
        {
            //decrease,pinch in
            pinch_cnt--;
        } 
        /* x,y 锟斤拷锟疥及锟斤拷锟斤拷4锟斤拷pixel之锟斤拷锟斤拷为锟斤拷pinch hold锟斤拷锟斤拷 */
        if((TP_ABS(tp_point.dist[tmp_index1] - tp_point.dist[tmp_index2]) < 4)
                    &&(TP_ABS(tp_point.x[tmp_index1] - tp_point.x[tmp_index2]) < 4)
                        &&(TP_ABS(tp_point.y[tmp_index1] - tp_point.y[tmp_index2]) < 4) )
        {
            // HOLD,effective only when send first pinch msg
            if(pinch_up)
            {
                hold_flag ++;
            }
            //pinch_cnt = 0;          
        }
        else
        {
            hold_flag = 0;// 锟斤拷锟斤拷4锟斤拷hold锟斤拷锟斤拷为锟斤拷hold
        }
        
        /* pinch锟斤拷锟杰伙拷hold住 */
        if( hold_flag > 4)
        {
            __inf("-3- pinch hold = %d \n", pinch_cnt);
            drv_tp_msg.xpoint = tp_point.x[tmp_index1];
            drv_tp_msg.ypoint = tp_point.y[tmp_index1]; 
            drv_tp_msg.speed_dir = 0;
            drv_tp_msg.speed_val = 0; 
            tp_private.xpre = drv_tp_msg.xpoint;/* 锟斤拷录xy锟斤拷锟斤拷锟斤拷息 */
            tp_private.ypre = drv_tp_msg.ypoint;  
            drv_tp_msg.msg_type = EV_TP_PINCH_HOLD;   
            tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);            
            
            hold_flag = 0;
            goto _out;
        }

        if(dual_cnt > 4)
        {       
           /*
             *  统锟斤拷锟斤拷锟捷的碉拷锟斤拷锟斤拷锟角递硷拷锟教度ｏ拷锟斤拷锟斤拷N(N>=9)锟斤拷锟姐，锟斤拷锟�
             *  锟斤拷锟斤拷锟侥硷拷锟斤拷锟斤拷为N1(N1>=5)锟斤拷锟斤拷为锟角放达拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷为锟斤拷锟斤拷小锟斤拷锟斤拷
             */
            if((dual_cnt > 8) &&(dual_cnt < 23)) 
            {                  
                __u32 i = 0;
                __s32 first4 = 0;
                __s32 last4  = 0;
                __s32 zoom_index = 0;
                __s32 tmp_x = 0;
                __s32 tmp_y = 0;
                for(i = 0 ; i < 9; i++)
                { 
                    if(tp_point.dist[(data_index - 1 - i)&TP_DATA_BUFFER_MASK] > 12)
                    {                            
                        if(i < 4) // 0,1,2,3,ignore 4.
                        {
                            first4 += tp_point.dist[(data_index - 1 - i)&TP_DATA_BUFFER_MASK];
                        }
                        else if(i > 4)// 5,6,7,8
                        {
                            last4 += tp_point.dist[(data_index - 1 - i)&TP_DATA_BUFFER_MASK];
                        }

                        if(i < 8)
                        {
                            tmp_x += tp_point.x[(data_index - 1 - i)&TP_DATA_BUFFER_MASK];
                            tmp_y += tp_point.y[(data_index - 1 - i)&TP_DATA_BUFFER_MASK];
                        }
                        
                    }                        
                    __inf("i. dist = %d \n", tp_point.dist[(data_index - 1 - i)&TP_DATA_BUFFER_MASK]);
                    __inf("i. x = %d, y = %d\n", tp_point.x[(data_index - 1 - i)&TP_DATA_BUFFER_MASK], 
                                                    tp_point.y[(data_index - 1 - i)&TP_DATA_BUFFER_MASK]);
                }   
                zoom_index = TP_ABS(last4 - first4)>>2;  
                tmp_x >>= 3;
                tmp_y >>= 3;          
                __inf("zoom_index = %d, last4- first4 = %d - %d  = %d \n",zoom_index, last4,first4,(last4-first4));
                __inf("tmp_x = %d, tmp_y = %d \n",tmp_x,tmp_y);

                drv_tp_msg.xpoint    = tmp_x;
                drv_tp_msg.ypoint    = tmp_y; 
                drv_tp_msg.speed_dir = 0;
                drv_tp_msg.speed_val = zoom_index;  /* 锟斤拷锟劫讹拷值锟斤拷锟矫ｏ拷锟脚达拷锟斤拷小锟侥憋拷锟斤拷系锟斤拷锟斤拷为pixel */
                tp_private.xpre      = drv_tp_msg.xpoint;/* 锟斤拷录xy锟斤拷锟斤拷锟斤拷息 */
                tp_private.ypre      = drv_tp_msg.ypoint;                              
                                
                //pinch in, -1,-2,-3,-4, 锟斤拷锟斤拷锟叫硷拷锟斤拷锟斤拷锟较�
                if(pinch_cnt < 0)
                {                                                                                 
                    __inf("-1-  pinch in  = %d, ZOOM IN  = %d \n", pinch_cnt, zoom_index);
                    drv_tp_msg.msg_type = EV_TP_PINCH_IN;   
                    tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);
                }
                else if(pinch_cnt > 1)// pinch out, 2,3,4,5 
                {
                    __inf("-2-  pinch out = %d, ZOOM OUT = %d \n", pinch_cnt, zoom_index);  
                    drv_tp_msg.msg_type = EV_TP_PINCH_OUT;  
                    tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);
                }                                
                
                sd_change += 2;
                pinch_cnt = 0;
                dual_cnt  = 0;
                
                dual_up   = 0;
                pinch_up  = 1;
            }
            else /* 5,6,7,8 points */
            {
                //do nothing
                //eLIBs_printf("5,6,7,8 points,do at key up\n");
                dual_up = 1;
                bak_index = data_index;/* 锟斤拷锟斤拷锟斤拷抬锟斤拷时锟斤拷 */
            }            
         }// end of if(dual_cnt > 4)         
     }    
     
_out:        
    ret = EPDK_OK;
    return ret;
}

/* 锟斤拷锟斤拷模式锟铰碉拷抬锟斤拷锟斤拷,count为锟斤拷锟桔碉拷锟斤拷锟斤拷锟斤拷锟� */
static __s32 tp_dualpoint_up(__u32 count, __tp_point_t *point)
{
    __s32 ret = EPDK_FAIL;
    __u32 i = 0;
    __u32 tmp_index1,tmp_index2;
    __s32 tmp_x = 0;
    __s32 tmp_y = 0;
    __s32 zoom_index = 0;

    if(count < 5)
    {
        return ret;
    }
    
    if((dual_up == 1) && (pinch_up == 0))
    {
        pinch_cnt = 0;
        for(i = count; i > 1; i--)
        {
            tmp_index1 = (bak_index - i)&TP_DATA_BUFFER_MASK;
            tmp_index2 = (bak_index - i + 1)&TP_DATA_BUFFER_MASK;
            if( tp_point.dist[tmp_index1] >  tp_point.dist[tmp_index2])
            {
                pinch_cnt--;
            }
            else
            {
                pinch_cnt++;
            }

            tmp_x += tp_point.x[(bak_index - i)&TP_DATA_BUFFER_MASK];
            tmp_y += tp_point.y[(bak_index - i)&TP_DATA_BUFFER_MASK];

            if(count >= 7)// 7,8
            {
                if(i < 5) // i = 2,3,4,okay
                {
                    zoom_index += tp_point.dist[(bak_index - i)&TP_DATA_BUFFER_MASK];
                }
                else if(i > count-3) // 7 point-7,6,5; 8 point-8,7,6
                {
                    zoom_index -= tp_point.dist[(bak_index - i)&TP_DATA_BUFFER_MASK];
                }
            }
            else if(count <= 6)
            {
                if(i < 4) // i = 2,3,okay
                {
                    zoom_index += tp_point.dist[(bak_index - i)&TP_DATA_BUFFER_MASK];
                }
                else if(i > count-2) // 5 point- 4,5; 6 point-5,6
                {
                    zoom_index -= tp_point.dist[(bak_index - i)&TP_DATA_BUFFER_MASK];
                }
            }            
            __inf("%d. dist = %d, x = %d, y = %d\n", i, tp_point.dist[(bak_index - i)&TP_DATA_BUFFER_MASK],
                                    tp_point.x[(bak_index - i)&TP_DATA_BUFFER_MASK], 
                                    tp_point.y[(bak_index - i)&TP_DATA_BUFFER_MASK]);            
        }
        zoom_index = TP_ABS(zoom_index);
        if(count >= 7)
        {
            zoom_index /= 3;
        }
        else
        {
            zoom_index >>=1;
        }
        tmp_x /= (count-1);
        tmp_y /= (count-1);
        __inf("zoom_index = %d, tmp_x = %d, tmp_y = %d \n",zoom_index,tmp_x,tmp_y);

        drv_tp_msg.xpoint = tmp_x;
        drv_tp_msg.ypoint = tmp_y; 
        drv_tp_msg.speed_dir = 0;
        drv_tp_msg.speed_val = zoom_index;  /* 锟斤拷锟劫讹拷值锟斤拷锟矫ｏ拷锟脚达拷锟斤拷小锟侥憋拷锟斤拷系锟斤拷锟斤拷为pixel */
        tp_private.xpre = drv_tp_msg.xpoint;/* 锟斤拷录xy锟斤拷锟斤拷锟斤拷息 */
        tp_private.ypre = drv_tp_msg.ypoint; 
        
        // 5 points
        if(count == 5)
        {            
            if(pinch_cnt > 1)
            {
                __inf("*up: 5. pinch out! %d \n", pinch_cnt);
                drv_tp_msg.msg_type = EV_TP_PINCH_OUT;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);                
            }
            else if(pinch_cnt < -1)
            {
                __inf("*up: 5. pinch in! %d \n", pinch_cnt);
                drv_tp_msg.msg_type = EV_TP_PINCH_IN;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);                    
            }
            
            ret = EPDK_OK;
            goto __out;
        }
        // 6 points
        if(count == 6)
        {          
            if(pinch_cnt > 1)
            {
                __inf("*up: 6. pinch out! %d \n", pinch_cnt);
                drv_tp_msg.msg_type = EV_TP_PINCH_OUT;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);                
            }
            else if(pinch_cnt < -1)
            {
                __inf("*up: 6. pinch in! %d \n", pinch_cnt);
                drv_tp_msg.msg_type = EV_TP_PINCH_IN;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);                
            }
            
            ret = EPDK_OK;
            goto __out;
        }
        // 7 points
        if(count == 7)
        {
            if(pinch_cnt > 1)
            {
                __inf("*up: 7. pinch out! %d \n", pinch_cnt);
                drv_tp_msg.msg_type = EV_TP_PINCH_OUT;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);                
            }
            else if(pinch_cnt < -1)
            {
                __inf("*up: 7. pinch in! %d \n", pinch_cnt);
                drv_tp_msg.msg_type = EV_TP_PINCH_IN;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);                
            }
            
            ret = EPDK_OK;
            goto __out;
        }
        // 8 points
        if(count == 8)
        {
            if(pinch_cnt > 2)
            {
                __inf("*up: 8. pinch out! %d \n", pinch_cnt);
                drv_tp_msg.msg_type = EV_TP_PINCH_OUT;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);                
            }
            else if(pinch_cnt < -2)
            {
                __inf("*up: 8. pinch in! %d \n", pinch_cnt);
                drv_tp_msg.msg_type = EV_TP_PINCH_IN;   
                tp_send_msg(touchpanel_drv.tp_input_dev, &drv_tp_msg);                
            }
            
            ret = EPDK_OK;
            goto __out;
        }
    }

__out:
    return ret;
}




