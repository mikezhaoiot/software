/*
**************************************************************************************************************
*											         ePDK
*						            the Easy Portable/Player Develop Kits
*									           desktop system
*
*						        	 (c) Copyright 2007-2010, ANDY, China
*											 All Rights Reserved
*
* File    	: movie_spsc.c
* By      	:
* Func		:
* Version	: v1.0
* ============================================================================================================
* 2011-05-05  Bayden.chen  create this file
**************************************************************************************************************
*/
#include "spsc_man.h"
#include "../common/common.h"
#include "spsc_prog/spsc_prog.h"

extern __bool process_state;

void *spsc_man_scene_create(movie_spsc_create_para_t *create_para)
{
	__gui_manwincreate_para_t create_info;
	movie_spsc_scene_t *sence_para;
	movie_spsc_uipara_t *ui_para;
	H_WIN hManWin;
	RECT lyr_rect;
	sence_para = (movie_spsc_scene_t *)esMEMS_Balloc(sizeof(movie_spsc_scene_t));
	if(!sence_para)
	{
		__msg("mem not enough...\n");
		return NULL;
	}
	eLIBs_memset(sence_para, 0, sizeof(movie_spsc_scene_t));
	sence_para->hparent  = create_para->hparent;
	sence_para->scene_id = create_para->scene_id;
	ui_para = movie_spsc_get_uipara(GUI_GetScnDir());
	if(NULL == ui_para)
	{
		esMEMS_Bfree(sence_para, sizeof(movie_spsc_scene_t));
		sence_para = NULL;
		__msg("movie_spsc_get_uipara fail...\n");
		return NULL;
	}
	lyr_rect.x		= ui_para->spsc_scene_lyr.x;
	lyr_rect.y		= ui_para->spsc_scene_lyr.y;
	lyr_rect.width	= ui_para->spsc_scene_lyr.w;
	lyr_rect.height = ui_para->spsc_scene_lyr.h;
	sence_para->hlyr = com_layer_create(&lyr_rect,ui_para->pipe,PIXEL_COLOR_ARGB8888, GUI_LYRWIN_STA_SUSPEND,"spsc_prog_layer");
	if(NULL == sence_para->hlyr)
	{
		esMEMS_Bfree(sence_para, sizeof(movie_spsc_scene_t));
		sence_para = NULL;
		return NULL;
	}
	eLIBs_memset(&create_info, 0, sizeof(__gui_manwincreate_para_t));
	create_info.name            = "spsc_man_win";
	create_info.hParent         = sence_para->hparent;
	create_info.ManWindowProc   = (__pGUI_WIN_CB)esKRNL_GetCallBack((__pCBK_t)spsc_man_scene_proc);
	create_info.attr            = (void *)sence_para;
	create_info.id				= sence_para->scene_id;
	create_info.hHosting        = NULL;
	hManWin = GUI_ManWinCreate(&create_info);
	if(!hManWin)
	{
		esMEMS_Bfree(sence_para, sizeof(movie_spsc_scene_t));
		sence_para = NULL;
		return NULL;
	}
	sence_para->spsc_manager = hManWin;
	GUI_LyrWinSetSta(sence_para->hlyr, GUI_LYRWIN_STA_ON);
	GUI_LyrWinSetTop(sence_para->hlyr);
	return sence_para;
}

static __s32 spsc_man_scene_proc(__gui_msg_t *msg)
{
	switch(msg->id)
	{
		case GUI_MSG_CREATE:
		{
			__s32 ret;
			movie_spsc_scene_t *sence_para;
			sence_para = GUI_WinGetAttr(msg->h_deswin);
			if(!sence_para)
			{
				__err("invalid para...\n");
				return EPDK_FAIL;
			}
			sence_para->spsc_manager = msg->h_deswin;
			ret = __spsc_prog_scene_create(sence_para);
			if(EPDK_FAIL == ret)
			{
				__err("__spsc_prog_scene_create fail...\n");
				return EPDK_FAIL;
			}
			movie_spsc_prog_scene_set_focus(sence_para->spsc_prog_scene);
			__movie_spsc_install_hide_timmer(sence_para);
			return EPDK_OK;
		}
		case GUI_MSG_DESTROY:
		{
			movie_spsc_scene_t *sence_para;
			Funprintf("__movie_spsc_proc GUI_MSG_DESTROY begin\n\n");
			sence_para = GUI_WinGetAttr(msg->h_deswin);

			if(!sence_para)
			{
				__err("invalid para...\n");
				return EPDK_FAIL;
			}
			__movie_spsc_uninstall_hide_timmer(sence_para);
			__spsc_prog_scene_delete(sence_para);
			return EPDK_OK;
		}
		case GUI_MSG_COMMAND:
		{
			__s32 ret;
			__s32 ret_id;
			movie_spsc_scene_t *sence_para;
			sence_para = GUI_WinGetAttr(msg->h_deswin);

			if(!sence_para)
			{
				__err("invalid para...\n");
				return EPDK_FAIL;
			}

			ret = -1;
			ret_id = -1;
			switch(LOWORD(msg->dwAddData1))
			{
				case movie_spsc_prog_scene_id:
				{
					__spsc_prog_scene_cmd_proc(sence_para, HIWORD(msg->dwAddData1), msg->dwAddData2);
					break;
				}

				default:
				{
					__msg("unknown scene id...\n");
					break;
				}
			}
			if(0 == ret)
			{
				__here__;
				return EPDK_OK;
			}
			else
			{
				if(-1 == ret_id)
				{
					__msg("unknown msg id...\n");
					return EPDK_OK;
				}
				movie_cmd2parent(msg->h_deswin, ret_id, 0, 0);
			}

			return EPDK_OK;
		}
		case GUI_MSG_KEY:
		{
			movie_spsc_scene_t *sence_para;
			__msg("__movie_spsc_proc GUI_MSG_KEY\n");
			sence_para = GUI_WinGetAttr(msg->h_deswin);
			if(!sence_para)
			{
				__err("invalid para...\n");
				return EPDK_FAIL;
			}
			__movie_spsc_reset_hide_timmer(sence_para);
			break;
		}
		case GUI_MSG_TOUCH:
		{
			movie_spsc_scene_t *sence_para;
			sence_para = GUI_WinGetAttr(msg->h_deswin);
			if(!sence_para)
			{
				__err("invalid para...\n");
				return EPDK_FAIL;
			}
			__movie_spsc_reset_hide_timmer(sence_para);
			break;
		}
		case GUI_MSG_TIMER:
		{
			movie_spsc_scene_t *sence_para;
			sence_para = GUI_WinGetAttr(msg->h_deswin);
			if(sence_para)
			{
				if(LOWORD(msg->dwAddData1) == sence_para->spsc_hide_timmer_id)
				{

				}
			}
			break;
		}
		case GUI_MSG_CLOSE:
		{
			__msg("__movie_spsc_proc GUI_MSG_CLOSE begin\n");
			movie_cmd2parent(msg->h_deswin, spsc_scene_msg_timeout, 0, 0);
			__msg("__movie_spsc_proc GUI_MSG_CLOSE end\n");
			return EPDK_OK;
		}
		default:
		{
			break;
		}
	}
	return GUI_ManWinDefaultProc(msg);
}

static __s32 __movie_spsc_install_hide_timmer(movie_spsc_scene_t *scene_para)
{
	if(!scene_para)
	{
		__err("invalid para...\n");
		return EPDK_FAIL;
	}
	scene_para->spsc_hide_timmer_id = 0x13;
	if(!GUI_IsTimerInstalled(scene_para->spsc_manager, scene_para->spsc_hide_timmer_id))
	{
		GUI_SetTimer(scene_para->spsc_manager, scene_para->spsc_hide_timmer_id,1000, NULL);//10��
	}
	else
	{
		__msg("timmer already install...\n");
		return EPDK_FAIL;
	}

	return EPDK_OK;
}

static __s32 __movie_spsc_reset_hide_timmer(movie_spsc_scene_t *scene_para)
{
	if(!scene_para)
	{
		__err("invalid para...\n");
		return EPDK_FAIL;
	}
	if(GUI_IsTimerInstalled(scene_para->spsc_manager, scene_para->spsc_hide_timmer_id))
	{
		GUI_ResetTimer(scene_para->spsc_manager, scene_para->spsc_hide_timmer_id, 500, NULL);
	}
	else
	{
		__msg("timmer already install...\n");
		return EPDK_FAIL;
	}

	return EPDK_OK;
}

static __s32 __movie_spsc_uninstall_hide_timmer(movie_spsc_scene_t *scene_para)
{
	if(!scene_para)
	{
		__err("invalid para...\n");
		return EPDK_FAIL;
	}

	if(GUI_IsTimerInstalled(scene_para->spsc_manager, scene_para->spsc_hide_timmer_id))
	{
		GUI_KillTimer(scene_para->spsc_manager, scene_para->spsc_hide_timmer_id);
	}

	return EPDK_OK;
}
static __s32 __spsc_prog_scene_create(movie_spsc_scene_t *scene_para)
{	
	movie_spsc_prog_create_para_t create_para;
	if(!scene_para)
	{
		__err("invalid para...\n");
		return EPDK_FAIL;
	}
	eLIBs_memset(&create_para, 0, sizeof(movie_spsc_prog_create_para_t));
	create_para.hparent  = scene_para->spsc_manager;
	create_para.scene_id = movie_spsc_prog_scene_id;
	create_para.hlyr	  = scene_para->hlyr;
	scene_para->spsc_prog_scene = movie_spsc_prog_scene_create(&create_para);
	if(!scene_para->spsc_prog_scene)
	{
		__msg("moive_spsc_prog_frm_create fail...\n");
		return EPDK_FAIL;
	}
	movie_spsc_prog_scene_set_focus(scene_para->spsc_prog_scene);
	return EPDK_OK;
}

__s32 __spsc_prog_scene_delete(movie_spsc_scene_t *scene_para)
{
	if(!scene_para)
	{
		__err("invalid para...\n");
		return EPDK_FAIL;
	}

	if(scene_para->spsc_prog_scene)
	{
		__msg("before movie_spsc_prog_scene_delete\n");
		movie_spsc_prog_scene_delete(scene_para->spsc_prog_scene);
		scene_para->spsc_prog_scene = NULL;
		__msg("after spsc_prog_frm_delete\n");
	}

	return EPDK_OK;
}
static __s32 __spsc_delete_breakpoint_info(movie_spsc_scene_t *sence_para, __s32 index)
{
	__s32 ret;
	char filename[RAT_MAX_FULL_PATH_LEN] = {0};
	__cedar_tag_inf_t tag_inf;

	if(!sence_para)
	{
		__err("invalid para...\n");
		return EPDK_FAIL;
	}

	ret = robin_npl_index2file(index, filename);

	if(-1 == ret)
	{
		__msg("robin_npl_index2file fail...\n");
		return -1;
	}

	if(!fifo_db_has_exist(NAME_MOVIE_BKPOINT))
	{
		return -1;
	}

	ret = get_item_content_from_fifo_db(NAME_MOVIE_BKPOINT, filename, &tag_inf);

	if(-1 == ret)
	{
		return 0;
	}

	if(delete_item_from_fifo_db(NAME_MOVIE_BKPOINT, filename))
	{
		return -1;
	}

	return 0;
}


static __s32 __spsc_play_file(movie_spsc_scene_t *sence_para, __s32 index)
{
	__s32 ret;
	char filename[RAT_MAX_FULL_PATH_LEN] = {0};
	__cedar_tag_inf_t tag_inf;
	ret = robin_npl_index2file(index, filename);

	if(-1 == ret)
	{
		__msg("robin_npl_index2file fail...\n");
		return EPDK_FAIL;
	}

	robin_set_cmd_stop();//��ֹͣ���ŵ�ǰ��
	__msg("robin_play_file, index=%d, filename=%s\n", index, filename);
	//robin_clear_feedback_msgQ();//��մ�����Ϣ��Ϣ����
	ret = robin_play_file(filename, NULL);

	if(EPDK_FAIL == ret)
	{
		return EPDK_FAIL;
	}

	ret = robin_set_cmd_play();
	__here__;
	return ret;
}

static __s32 __spsc_play_next(movie_spsc_scene_t *sence_para)
{
	__s32 ret;
	__s32 index;
	__s32 total;
	index = robin_npl_get_cur();

	if(-1 == index)
	{
		__msg("robin_npl_get_cur fail...\n");
		return EPDK_FAIL;
	}

	__spsc_delete_breakpoint_info(sence_para, index);
	total = robin_npl_get_total_count();

	if(-1 == total)
	{
		__msg("robin_npl_get_total_count fail...\n");
		return EPDK_FAIL;
	}

	index++;

	if(index >= total)
	{
		index = 0;
	}

	robin_npl_set_cur(index);
	robin_set_cmd_stop();
	app_root_play_app_sounds(SHORT_KEY_WAVE_FILE_NEXT);
	ret = __spsc_play_file(sence_para, index);

	if(EPDK_OK == ret)
	{
		movie_cmd2parent(sence_para->spsc_manager, spsc_scene_msg_save_breakpoint_info, 0, 0);
	}

	return ret;
}

static __s32 __spsc_play_prev(movie_spsc_scene_t *sence_para)
{
	__s32 ret;
	__s32 index;
	__s32 total;
	index = robin_npl_get_cur();
	if(-1 == index)
	{
		__msg("robin_npl_get_cur fail...\n");
		return EPDK_FAIL;
	}

	__spsc_delete_breakpoint_info(sence_para, index);
	total = robin_npl_get_total_count();
	if(-1 == total)
	{
		__msg("robin_npl_get_total_count fail...\n");
		return EPDK_FAIL;
	}
	index--;
	if(index < 0)
	{
		index = total - 1;
	}
	if(index < 0)
	{
		__msg("total movie count = 0\n");
		index = 0;
	}
	robin_npl_set_cur(index);
	robin_set_cmd_stop();
	app_root_play_app_sounds(SHORT_KEY_WAVE_FILE_PREV);
	ret = __spsc_play_file(sence_para, index);
	if(EPDK_OK == ret)
	{
		movie_cmd2parent(sence_para->spsc_manager, spsc_scene_msg_save_breakpoint_info, 0, 0);
	}
	return ret;
}

static __s32 __spsc_prog_scene_cmd_proc(movie_spsc_scene_t *sence_para, __s32 msg_id, __s32 dwAddData2)
{
	switch(msg_id)
	{
		case movie_spsc_prog_scene_msg_timeset:
		{
			__msg("movie_spsc_prog_scene_msg_timeset, time=%d\n", dwAddData2);
			{
				__cedar_status_t fsm_sta;
				fsm_sta = robin_get_fsm_status();
				if(CEDAR_STAT_PAUSE == fsm_sta)
				{
					robin_set_cmd_play();
				}
			}
			robin_set_cmd_jump(dwAddData2);
			sence_para->btime_set_mode = 0;
			return EPDK_OK;
		}
		case movie_spsc_prog_scene_msg_key_clicked:
		{
			__movie_spsc_reset_hide_timmer(sence_para);
			return EPDK_OK;
		}
		case movie_spsc_prog_scene_msg_pre:
		{		
			if(1 == dwAddData2)
			{
				__cedar_status_t cedar_sta;
				cedar_sta = robin_get_fsm_status();
				if(CEDAR_STAT_PLAY == cedar_sta)
				{
					robin_set_cmd_rr();
				}
			}
			else
			{
				MOVIE_ROBIN_PEND;
				__spsc_play_prev(sence_para);				
				MOVIE_ROBIN_POST;
			}
			return EPDK_OK;
		}
		case movie_spsc_prog_scene_msg_playpause:
		{
			if(dwAddData2)
			{		
				robin_set_cmd_play();
			}
			else
			{				
				robin_set_cmd_pause();
			}

			return EPDK_OK;
		}
		case movie_spsc_prog_scene_msg_escape:
		{
			
			movie_cmd2parent(sence_para->spsc_manager, movie_scene_msg_timeout, 0, 0);
			movie_cmd2parent(sence_para->spsc_manager, movie_scene_msg_exit, 0, 0);
			return EPDK_OK;
		}
		case movie_spsc_prog_scene_msg_next:
		{
			if(1 == dwAddData2)
			{
				__cedar_status_t cedar_sta;
				cedar_sta = robin_get_fsm_status();
				if(CEDAR_STAT_PLAY == cedar_sta)
				{
					robin_set_cmd_ff();
				}
			}
			else
			{
				MOVIE_ROBIN_PEND;
				__spsc_play_next(sence_para);				
				MOVIE_ROBIN_POST;
			}
			return EPDK_OK;
		}
		case movie_spsc_prog_scene_msg_timeout:
		{
			movie_cmd2parent(sence_para->spsc_manager, movie_scene_msg_timeout, 0, 0);
			break;
		}
		default:
		{
			break;
		}
	}

	return EPDK_FAIL;
}
__s32 movie_spsc_scene_delete(void *handle)
{
	movie_spsc_scene_t *scene_para;
	scene_para = (movie_spsc_scene_t *)handle;
	__msg("before movie_spsc_manwin_delete\n");

	if(NULL == handle)
	{
		__err("invalid para..\n");
		return EPDK_FAIL;
	}

	if(!scene_para->spsc_manager)
	{
		__err("invalid para...\n");
		return EPDK_FAIL;
	}

	GUI_ManWinDelete(scene_para->spsc_manager);
	scene_para->spsc_manager = NULL;

	if(!scene_para->hlyr)
	{
		__err("invalid para...\n");
		return EPDK_FAIL;
	}
	GUI_LyrWinDelete(scene_para->hlyr);
	scene_para->hlyr = NULL;
	eLIBs_memset(scene_para, 0, sizeof(movie_spsc_scene_t));//Ԥ���ٴ��ͷţ��ᱨ��
	esMEMS_Bfree(scene_para, sizeof(movie_spsc_scene_t));
	__msg("after movie_spsc_manwin_delete\n");
	return EPDK_OK;
}



__s32 movie_spsc_scene_LyMove(void *handle,__s32 Move_X,__s32 Move_Y)

{
	movie_spsc_scene_t *scene_para;
	scene_para = (movie_spsc_scene_t *)handle;
	if(NULL == handle)
	{
		Funprintf("--here--\n");
		__wrn("--handle is NULL--\n");
		return EPDK_FAIL;
	}
	if(!scene_para->spsc_manager)
	{
		__wrn("--scene_para->spsc_manager is NULL--\n");
		return EPDK_FAIL;
	}
	if(!scene_para->hlyr)
	{
		__wrn("--scene_para->hlyr is NULL--\n");
		return EPDK_FAIL;
	}
	GUI_LyrMove(scene_para->hlyr,Move_X,Move_Y);
}

