/*
**************************************************************************************************************
*											         ePDK
*						            the Easy Portable/Player Develop Kits
*									           desktop system
*
* File    	: 	music_player.h
*
* By      	: 	Libaiao
* Func	:
* Version	: 	v1.0
* ============================================================================================================
* 2010-5-3 15:24:52  Libaiao  create this file, implements the fundemental interface;
**************************************************************************************************************
*/
#include "music_player.h"
#include "player_face.h"

extern exp_play_mode_t *exp_play_mode;
extern u8 Music_Option;

static __u8 music_key_count = 0;
static __u8 check_focus_timeout = 0;	/*����������ֵ*/
static __u8 music_rr_flag = 0;

__u8 MusicList_TouchMove_Flag = 0;		/*listbar������Ŀ��ʾ��־λ*/
__u8 music_exit = 0;



H_WIN music_player_win_create(H_WIN h_parent, music_player_ctrl_t *para)
{
	__gui_framewincreate_para_t framewin_para;
	music_player_ctrl_t *music_player_ctrl;
	FB fb;
	GUI_LyrWinGetFB(para->music_layer, &fb);
	music_player_ctrl = (music_player_ctrl_t *)esMEMS_Balloc(sizeof(music_player_ctrl_t));
	eLIBs_memset((void *)music_player_ctrl, 0, sizeof(music_player_ctrl_t));
	music_player_ctrl->digit_timmer_id = 0x16;
	music_player_ctrl->font = para->font;
	music_player_ctrl->music_layer = para->music_layer;
	music_player_ctrl->media_type = para->media_type;		
	music_player_ctrl->root_type = para->root_type;						
	music_player_ctrl->visiable = para->visiable;				
	music_player_ctrl->explorer_play_music = para->explorer_play_music;
	music_player_ctrl->music_file_name = para->music_file_name;
	eLIBs_memset(&framewin_para, 0, sizeof(__gui_framewincreate_para_t));
	framewin_para.name 		= "music List window",
	framewin_para.dwExStyle = WS_EX_NONE;
	framewin_para.dwStyle 	= WS_NONE | WS_VISIBLE;
	framewin_para.spCaption = NULL;
	framewin_para.hOwner	= NULL;
	framewin_para.id        = MUSIC_LIST_WIN_ID;
	framewin_para.hHosting 	= h_parent;
	framewin_para.FrameWinProc = (__pGUI_WIN_CB)esKRNL_GetCallBack((__pCBK_t)music_player_win_cb);
	framewin_para.rect.x 		= 0;
	framewin_para.rect.y 		= 0;
	framewin_para.rect.width 	= fb.size.width;
	framewin_para.rect.height 	= fb.size.height;
	framewin_para.BkColor.alpha =  0;
	framewin_para.BkColor.red 	= 0;
	framewin_para.BkColor.green = 255;
	framewin_para.BkColor.blue 	= 0;
	framewin_para.attr = (void *)music_player_ctrl;
	framewin_para.hLayer = music_player_ctrl->music_layer;			
	return (GUI_FrmWinCreate(&framewin_para));						
}

static __s32 music_player_win_cb(__gui_msg_t *msg)
{
	__s32 ret = EPDK_OK;
	music_player_ctrl_t *this;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	switch(msg->id)
	{
		case GUI_MSG_CREATE:
			music_player_scene_create(msg->h_deswin);   									
			return EPDK_OK;

		case GUI_MSG_PAINT:
			music_player_win_on_paint(msg->h_deswin);
			return EPDK_OK;

		case GUI_MSG_CLOSE:
			GUI_FrmWinDelete(msg->h_deswin);
			return EPDK_OK;

		case GUI_MSG_DESTROY:
			music_player_win_on_destroy(msg);
			return EPDK_OK;

		case GUI_MSG_COMMAND:
			music_player_win_on_command(msg);
			break;
		case GUI_MSG_KEY:
		{
			if(this->visiable)		
			{
				MusicList_TouchMove_Flag = 0;		
				MusicPlayer_KeyProcess(msg);			
			}
			break;
		}
		case GUI_MSG_TOUCH:
		{
			return music_player_on_touch(msg);
		}
		case GUI_MSG_TIMER:
		{
			if(MusicFocusTimerId == msg->dwAddData1)		/*ˢ�½�����Ŀ:500ms*/
			{
				music_player_focus_timer(this);
				if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(this->music_layer) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(this->music_layer)))
				{
					Funprintf("--lyr fail--\n");
					return EPDK_FAIL;
				}	
				GUI_LyrWinSel(this->music_layer);
			}
			else if(MusicTimerId == msg->dwAddData1)	
			{
				__here__;
				music_player_win_on_timer(msg);
			}
			else if(this->digit_timmer_id == msg->dwAddData1)
			{
				__here__;
				music_player_set_play_index(this, this->ndigit_song_num);
				__here__;
				MusicPlayer_DigitDelete(msg->h_deswin);
			}		
			break;
		}
		case MSG_APP_BACK_HOME:
		{
			robin_set_cmd_pause();
			MusicPlayer_NotifyMessage(msg->h_deswin, GUI_MSG_COMMAND, SWITCH_TO_MMENU, 0);
			return EPDK_OK;
		}

		default:
			ret = GUI_FrmWinDefaultProc(msg);
			return ret;
	}

	return GUI_FrmWinDefaultProc(msg);
}

static __s32 music_player_scene_create(H_WIN  music_frame_win)
{
	__u32 song_total;
	music_player_ctrl_t *this;
	music_list_para_t list_para;
	__bool ret;
	char *filename =NULL;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(music_frame_win);
	this->h_framewin = music_frame_win;										
	list_para.framewin = this->h_framewin;
	list_para.layer = this->music_layer;
	list_para.visiable = this->visiable;
	list_para.root_type = this->root_type;
	list_para.media_type = this->media_type;
	list_para.font = this->font;
	list_para.explorer_play_music = this->explorer_play_music;
	list_para.music_file_name = this->music_file_name;
	music_rr_flag = 1;			/*��ֹ��������룬ֱ�Ӳ�����һ��*/
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(list_para.layer) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(list_para.layer)))
	{
		Funprintf("--lyr fail--\n");
		return EPDK_FAIL;
	}
	GUI_LyrWinSel(this->music_layer);
	if(list_para.visiable == EPDK_TRUE)
	{		
		this->list_ctrl = music_list_init(&list_para);
		if(NULL == this->list_ctrl)
		{
			return EPDK_FAIL;
		}
	}
	else
	{
		this->list_ctrl = NULL;
		GUI_LyrWinSetSta(this->music_layer, GUI_LYRWIN_STA_SUSPEND);
	}
	music_player_get_last_para(this);
	if(this->list_ctrl != NULL)
	{
		filename = this->play_file_info.filename;
		ret = MusicGetListItemFileFullPath(this->list_ctrl->rat_handle, this->list_ctrl->play_index, filename);		
		if(EPDK_FAIL == ret)
		{
			return EPDK_FAIL;
		}
		rat_set_file_for_play(this->list_ctrl->rat_handle, filename);
		this->play_index = this->list_ctrl->play_index;
	}
	else
	{
		music_list_ctrl_t list_ctrl;
		filename = this->play_file_info.filename;
		music_list_bg_init(&list_ctrl, &list_para);
		ret = MusicGetListItemFileFullPath(list_ctrl.rat_handle, list_ctrl.play_index, filename);

		if(EPDK_FAIL == ret)
		{
			return EPDK_FAIL;
		}

		rat_set_file_for_play(list_ctrl.rat_handle, filename);
		this->play_index = list_ctrl.play_index;
	}
	music_player_device_init(this);
	if(this->visiable)
	{
		ret = GUI_SetTimer(music_frame_win, MusicFocusTimerId, MUSIC_SYSTIMER_INTERVAL, NULL);	
		if(!ret)
		{
			__wrn("creat timer for system time failed\n");
		}
	}
	music_list_show(this->list_ctrl);
	if(this->list_ctrl != NULL)
	{
		music_list_get_item_scene(this->list_ctrl, &(this->list_ctrl->listbar_play_scene));
	}

	ret = MusicPlayer_PlayFile(this, filename, 0);
	GUI_SetTimer(music_frame_win, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	return EPDK_OK;
}

static __s32 music_player_win_on_paint(H_WIN  music_frame_win)
{
	__s32 ret = 0;
	music_player_ctrl_t *player_ctrl;
	char *filename =NULL;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(music_frame_win);
	filename = player_ctrl->play_file_info.filename;
	if(GUI_LyrWinGetSta(player_ctrl->music_layer) == GUI_LYRWIN_STA_SUSPEND)
	{
		return EPDK_FAIL;
	}
	if(player_ctrl->visiable)
	{
		GUI_LyrWinSetTop(player_ctrl->music_layer);
		gscene_hbar_set_state(HBAR_ST_SHOW);
		MusicSetTransColor();
	}
	music_player_get_last_para(player_ctrl);
	if(player_ctrl->list_ctrl != NULL)
	{
		music_list_get_item_scene(player_ctrl->list_ctrl, &(player_ctrl->list_ctrl->listbar_play_scene));
	}
	if(player_ctrl->list_ctrl != NULL)
	{
		ret = MusicGetListItemFileFullPath(player_ctrl->list_ctrl->rat_handle, player_ctrl->list_ctrl->play_index, filename);
		if(EPDK_FAIL == ret)
		{
			return EPDK_FAIL;
		}
	}
	return EPDK_OK;
}

static __s32  music_player_win_on_destroy(__gui_msg_t *msg)
{
	music_player_ctrl_t *this;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	if(this == NULL)
	{
		return EPDK_FAIL;
	}
	if(NULL == this->h_framewin)
	{
		return EPDK_FAIL;
	}
	if(GUI_IsTimerInstalled(this->h_framewin, MusicFocusTimerId))
	{
		GUI_KillTimer(this->h_framewin, MusicFocusTimerId);
	}
	music_player_save_last_para(this);
	if(this->list_ctrl)
	{
		music_list_delete(this->list_ctrl);
	}
	else
	{
		dsk_reg_save_cur_play_info(REG_APP_MUSIC, this->play_index, this->play_file_info.filename, this->root_type);
	}
	__here__;
	music_save_breakpoint_info(this->play_index);
	music_list_save_last_para(this->list_ctrl);
	MusicPlayer_DigitDelete(msg->h_deswin);
	music_player_device_uninit(this);
	music_free_icon_res();
	eLIBs_memset(this, 0, sizeof(music_player_ctrl_t));
	esMEMS_Bfree(this, sizeof(music_player_ctrl_t));
	return EPDK_OK;
}


__s32 music_player_win_on_command(__gui_msg_t *msg)
{
	switch(msg->dwAddData1)
	{
		case MUSICPLAYER_BACKGROUND:
		{
			music_player_scene_delete(msg->h_deswin);
			MusicPlayer_NotifyMessage(msg->h_deswin, GUI_MSG_COMMAND, SWITCH_TO_MMENU, MUSICPLAYER_BACKGROUND);
			break;
		}
		default:
			break;
	}
	return EPDK_OK;
}

static __s32 MusicPlayer_KeyProcess(__gui_msg_t *msg)
{
	music_list_ctrl_t *ListCtrl;
	music_player_ctrl_t *This;
	This = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	if((KEY_DOWN_ACTION == msg->dwAddData2) || (KEY_REPEAT_ACTION == msg->dwAddData2))
	{
		switch(msg->dwAddData1)
		{
			case GUI_MSG_KEY_ENTER:
                {
                    music_explorer_on_enter_key(msg);
                    break;
                }
			case GUI_MSG_KEY_REPEATE:
                {
                    music_player_set_play_mode(This);
                    break;
                }
			case GUI_MSG_KEY_LONGLEFT:
			{
				__cedar_status_t sta;
				sta = robin_get_fsm_status();
				if(CEDAR_STAT_PLAY == sta)
				{
					robin_set_cmd_rr();
					music_rr_flag = 1;
				}
				break;
			}
			case GUI_MSG_KEY_RIGHT:
			case GUI_MSG_KEY_DOWN:
			{				
				robin_set_cmd_pause();
				break;
			}
			case GUI_MSG_KEY_LEFT:
			case GUI_MSG_KEY_UP:
			{				
				robin_set_cmd_pause();
				break;
			}
			case GUI_MSG_KEY_LONGESCAPE:
			case GUI_MSG_KEY_NUMSWITCH:
			{
//			    SEND_MSG(DSK_MSG_NUM_SWITCH,NULL,GUI_WinGetHandFromName("beetles"),1,0,0);
//              MusicPlayer_DigitCreate(msg);
			    break;
			}
			default:
				break;
		}
	}
	else if(KEY_UP_ACTION == msg->dwAddData2)
	{
		switch(msg->dwAddData1)
		{
            case GUI_MSG_KEY_ESCAPE:
            {
				if(Music_Option)
				{				
                	MusicPlayer_NotifyMessage(msg->h_deswin, 0, SWITCH_TO_EXPLORER, 0);
				}
				else
				{
                	MusicPlayer_NotifyMessage(msg->h_deswin, 0, SWITCH_TO_MMENU, 0);
				}
                break;
            }
			case GUI_MSG_KEY_RIGHT:
			case GUI_MSG_KEY_DOWN:
			{			
				music_explorer_on_next_key(msg);
				check_focus_timeout = 0;
				
			}
			break;
			case GUI_MSG_KEY_LEFT:
			case GUI_MSG_KEY_UP:
			{
				music_explorer_on_previous_key(msg);
				check_focus_timeout = 0;
			}
			break;
			case GUI_MSG_KEY_PLAY_PAUSE:
			case GUI_MSG_KEY_LONGPLAY_PAUSE:
			{
				__cedar_status_t sta;
				sta = robin_get_fsm_status();

				if(robin_get_fsm_status() == CEDAR_STAT_PLAY)
				{
					DrawMusicPlayStatusButton(MUSIC_PAUSE);
					robin_set_cmd_pause();
					app_root_play_app_sounds(SHORT_KEY_WAVE_FILE_PAUSE);
				}
				else
				{
					DrawMusicPlayStatusButton(MUSIC_PLAY);
					app_root_play_app_sounds(SHORT_KEY_WAVE_FILE_PLAY);
					robin_set_cmd_play();
				}

				break;
			}
			case GUI_MSG_KEY_LONGLEFT:
			case GUI_MSG_KEY_LONGRIGHT:
			{
				__cedar_status_t sta;
				sta = robin_get_fsm_status();
				if(CEDAR_STAT_RR == sta || CEDAR_STAT_FF == sta)
				{
					robin_set_cmd_play();
				}

				break;
			}
			case GUI_MSG_KEY_NEXT:
			{
				music_player_set_play_next(This);
				break;
			}

			case GUI_MSG_KEY_PREV:
			{
				music_player_set_play_previous(This);
				break;
			}
			case GUI_MSG_KEY_MENU:
			{
				robin_set_cmd_pause();
				if(robin_get_fsm_status() != CEDAR_STAT_PLAY)			
				{
					MusicPlayer_NotifyMessage(msg->h_deswin, GUI_MSG_COMMAND, SWITCH_TO_MMENU, 0);
				}
				else
				{
					SEND_MSG(GUI_MSG_COMMAND,msg->h_deswin,msg->h_deswin,MUSICPLAYER_BACKGROUND,0,0);					
				}
				break;
			}	
			case GUI_MSG_KEY_NUM0:
			case GUI_MSG_KEY_NUM1:
			case GUI_MSG_KEY_NUM2:
			case GUI_MSG_KEY_NUM3:
			case GUI_MSG_KEY_NUM4:
			case GUI_MSG_KEY_NUM5:
			case GUI_MSG_KEY_NUM6:
			case GUI_MSG_KEY_NUM7:
			case GUI_MSG_KEY_NUM8:
			case GUI_MSG_KEY_NUM9:
			{
				MusicPlayer_DigitCreate(msg);
				break;
			}

		}
	}
	return EPDK_OK;
}

static __s32 music_player_on_touch( __gui_msg_t *msg )
{
	__s32 speed = 0, direct = 0;
	__u16 x = 0, y = 0;
	__s32 get_item_id;
	music_player_ctrl_t *player_ctrl = NULL;
	music_palyer_ui_t   *player_ui   = NULL;
	player_ui   = music_get_player_ui_param();
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	x      = LOSWORD(msg->dwAddData2);
	y      = HISWORD(msg->dwAddData2);
	speed  = LOSWORD(msg->dwReserved);
	direct = HISWORD(msg->dwReserved);
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(player_ctrl->music_layer) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(player_ctrl->music_layer)))
	{
		Funprintf("--lyr fail--\n");
		return EPDK_FAIL;
	}	
	GUI_LyrWinSel(player_ctrl->music_layer);
	switch(msg->dwAddData1)
	{
		case GUI_MSG_TOUCH_DOWN:
		{

			break;
		}
		case GUI_MSG_TOUCH_UP:
		{
			if(player_ctrl->menu_mode == MUSIC_SET_PLAYER_MODE)
			{
				music_player_on_setting(player_ctrl,msg);
				DrawMusicPlayerContrlButtonByID(player_ctrl,player_ctrl->menu_id, UNFOCUSED);
				return EPDK_OK;
			}
			break;
		}
		case GUI_MSG_TOUCH_MOVE:
		{

			break;
		}
		default:
			break;
	}
   	if(msg->dwAddData1 == GUI_MSG_TOUCH_DOWN)
	{		
		if((x>=player_ui->play_mode_btn_rect.x&&x<=player_ui->play_mode_btn_rect.x+player_ui->play_mode_btn_rect.width)
		   ||(x>=player_ui->EQ_mode_btn_rect.x&&x<=player_ui->EQ_mode_btn_rect.x+player_ui->EQ_mode_btn_rect.width))
		{
			if(y>=player_ui->play_mode_btn_rect.y&&y<=player_ui->play_mode_btn_rect.y+player_ui->play_mode_btn_rect.height)
			{
				music_explorer_on_menu_key(msg);
			}
		}
		else
		{
			player_ctrl->AutoExitMenuCnt = 0;		
			player_ctrl->menu_mode = MUSIC_EXPLORER_MODE;
			ClearMusicPlayerContrlButtonBG();
			DrawMusicHeadbar(player_ctrl);	
			SPCTRM_Clear(0);		
			SPCTRM_Update((H_WIN)(player_ctrl->h_framewin));
		}	
		if(player_ctrl->menu_mode == MUSIC_EXPLORER_MODE)
		{	
			if(x>=player_ui->play_status_rect.x&&x<=player_ui->play_status_rect.x+player_ui->play_status_rect.width
				&&y>=player_ui->play_status_rect.y&&y<=player_ui->play_status_rect.y+player_ui->play_status_rect.height)
			{
				Funprintf("--here--\n");
				if(robin_get_fsm_status() == CEDAR_STAT_PLAY)
				{
					DrawMusicPlayStatusButton(MUSIC_PAUSE);
					dsk_amplifier_onoff(BEETLES_SPEAK_OFF);
					robin_set_cmd_pause();
				}
				else
				{
					DrawMusicPlayStatusButton(MUSIC_PLAY);
					robin_set_cmd_play();
				}
				return EPDK_OK;
			}
		}
		else
		{	
			Funprintf("--here--\n");
			get_item_id = music_point_to_item_id(x,y);
			if(get_item_id > 2)
			{
				return EPDK_OK;
			}		
			DrawMusicPlayerContrlButtonByID(player_ctrl,player_ctrl->menu_id, UNFOCUSED);
			player_ctrl->menu_id = get_item_id;
			player_ctrl->AutoExitMenuCnt = 0;
			DrawMusicPlayerContrlButtonByID(player_ctrl,player_ctrl->menu_id, FOCUSED);	
			return EPDK_OK;
		}
	} 


	if(player_ctrl->menu_mode == MUSIC_EXPLORER_MODE)
	{	
		if((x >= player_ui->process_bar_body_rect.x-60) &&(x<= player_ui->process_bar_point_tail_rect.x+50)
			&&(y>=player_ui->process_bar_body_rect.y-20) && (y<=player_ui->process_bar_body_rect.y+50))
		{
			Funprintf("--here--\n");
//			MusicPlayer_Rewind_Touch(msg,msg->dwAddData1,x,y);
			return EPDK_OK;
		}
	}
    if( music_player_music_list_touch(msg,msg->dwAddData1,x,y,direct,speed) == EPDK_OK )
    {

		Funprintf("--here--\n");
    	return EPDK_OK;
    }
	return EPDK_OK;
}

static __s32 music_player_win_on_timer(__gui_msg_t *msg)
{
	music_player_ctrl_t *this;
	__u32 total_time = 0, cur_time = 0;
	__cedar_status_t play_status;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	
	if((this->setting_status == CEDAR_STAT_FF) || (this->setting_status == CEDAR_STAT_RR))
	{
		play_status = robin_get_fsm_status();
		if((play_status == CEDAR_STAT_FF)|| (play_status == CEDAR_STAT_RR))
		{
			robin_set_cmd_play();
		}
		if(play_status == CEDAR_STAT_STOP)
		{
			total_time = robin_get_total_time();
			if(this->visiable)
			{
				DrawMusicProgressBar(total_time, total_time);
			}
			if(this->setting_status == CEDAR_STAT_RR)
			{
				robin_set_cmd_play();
			}
			this->setting_status = CEDAR_STAT_PLAY;
			return EPDK_OK;
		}
		this->setting_status = CEDAR_STAT_PLAY;
		return EPDK_OK;
	}
	else
	{
		MusicPlayer_CheckPlayStatus(this);	
	}
	if(this->visiable)
	{
		if(this->list_ctrl != NULL)
		{
			if(this->list_ctrl->total == 0)
			{
				return EPDK_FAIL;
			}
		}
		else
		{
			return EPDK_FAIL;
		}
		if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(this->music_layer) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(this->music_layer)))
		{
			Funprintf("--lyr fail--\n");
			return EPDK_FAIL;
		}	
		GUI_LyrWinSel(this->music_layer);
		if((this->RefreshPlayTimeCnt++ >= MUSIC_REFRESH_PLAYTIME_CNT)&&(CEDAR_STAT_PAUSE != robin_get_fsm_status()))
		{	
			com_memdev_create_ex(this->music_layer,MEMDEV_X,MEMDEV_Y,MEMDEV_W,MEMDEV_H);			
			this->RefreshPlayTimeCnt = 0;
			total_time = robin_get_total_time();
			cur_time   = robin_get_cur_time();
			if(cur_time > total_time)
			{
				cur_time = total_time;
			}
			DrawMusicPlayingTime(cur_time);
			DrawMusicTotalTime(total_time);
			DrawMusicProgressBar(total_time, cur_time);	
			com_memdev_delete();
		}
		if(this->menu_mode == MUSIC_EXPLORER_MODE)
		{
			if(robin_get_fsm_status() == CEDAR_STAT_PLAY)
			{
				SPCTRM_Update((H_WIN)(this->h_framewin));
			}
			MusicPlayer_EnterKeyPlay(msg);
		}
		else
		{
			this->AutoExitMenuCnt++;
			if(this->AutoExitMenuCnt > C_AUTO_EXIT_MENU_TIME)
			{
				this->menu_mode = MUSIC_EXPLORER_MODE;
				this->AutoExitMenuCnt = 0;
				ClearMusicPlayerContrlButtonBG();
//				DrawMusicHeadbar(this);
				SPCTRM_Clear(0);		
				SPCTRM_Update((H_WIN)(this->h_framewin));
			}
		}
	}
	return EPDK_OK;
}

static __s32 music_player_set_play_index(music_player_ctrl_t *this, __s32 index)
{
	__s32 ret;
	__s32 total_count;
	music_list_ctrl_t *ListCtrl;
	char *filename;
	__listbar_scene_t scene;
	total_count = robin_npl_get_total_count();
	__wrn("total_count=%d\n", total_count);
	__wrn("index=%d\n", index);
	index--;
	if(index < 0 || index >= total_count)
	{
		return EPDK_FAIL;
	}
	ret = robin_npl_index2file(index, this->play_file_info.filename);
	if(EPDK_FAIL == ret)
	{
		return EPDK_FAIL;
	}

	__wrn("this->play_file_info.filename=%s\n", this->play_file_info.filename);
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	robin_set_cmd_stop();
	ListCtrl = this->list_ctrl;
	filename = this->play_file_info.filename;
	ListCtrl->play_index = index;
	{
		LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
		__wrn("ListCtrl->play_index=%d\n", ListCtrl->play_index);

		if(ListCtrl->play_index != scene.focus_id)
		{
			music_list_set_focus_item(ListCtrl, ListCtrl->play_index);
		}
	}
	music_listbar_on_index((void *)ListCtrl, ListCtrl->play_index);
	LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
	ListCtrl->play_index = scene.focus_id;
	__wrn("scene.focus_id=%d\n", scene.focus_id);
	__wrn("ListCtrl->play_index=%d\n", ListCtrl->play_index);
	get_music_list_focus_item_full_filename(ListCtrl, filename);	
	MusicPlayer_PlayFile(this, filename, 0);
	return EPDK_OK;
}

__s32 MusicPlayer_NotifyMessage(H_WIN hwin, __s32 id, __s32 data1, __s32 data2)
{
	__gui_msg_t msg;
	H_WIN hDstWin;
	H_WIN hManagerWin;
	hManagerWin = GUI_WinGetParent(hwin);
	hDstWin = GUI_WinGetParent(hManagerWin);
	msg.h_deswin = hDstWin;
	msg.h_srcwin = hwin;
	msg.id = GUI_MSG_COMMAND;
	msg.dwAddData1 = MAKELONG(GUI_WinGetItemId(hManagerWin), id);
	msg.dwAddData2 = data1;
	msg.dwReserved = data2;
	GUI_SendNotifyMessage(&msg);
	return EPDK_OK;
}

static __s32 music_player_music_list_touch( __gui_msg_t *msg, __u32 keyState, __s32 x, __s32 y, __s32 direct, __s32 speed )
{
	music_player_ctrl_t *player_ctrl = NULL;
	music_list_ctrl_t *ListCtrl = NULL;
	__listbar_scene_t scene;
	char *filename = player_ctrl->play_file_info.filename;
	__s32 ret = EPDK_FAIL;
    music_ui_t *ui_param;
	ui_param = music_get_ui_param();
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	ListCtrl = player_ctrl->list_ctrl;
    if(keyState == GUI_MSG_TOUCH_DOWN )
    {
    	if(EPDK_TRUE == player_ctrl->list_ctrl->isTouchMusic_flag)
    	{
    		Funprintf("--music list flag fail--\n\n");
			return EPDK_FAIL;
    	}
    	player_ctrl->isTouchMusicListMove = EPDK_FALSE;
    	if( x > ui_param->list_ctrl.listbar_rect.x && y > ui_param->list_ctrl.listbar_rect.y &&
    		(x < ui_param->list_ctrl.listbar_rect.x+ui_param->list_ctrl.listbar_rect.width)  &&
    		(y < ui_param->list_ctrl.listbar_rect.y +ui_param->list_ctrl.listbar_rect.height))
    	{
			if( ListCtrl->OnTouchDown((void *)ListCtrl, x, y, direct, speed) == EPDK_OK )
			{
    			Funprintf("--down here--\n");
				player_ctrl->isTouchMusicList = EPDK_TRUE;
				GUI_WinSetCaptureWin(msg->h_deswin);
				ret = EPDK_OK;
			}
    	}
    }
    else if( keyState == GUI_MSG_TOUCH_UP )
    {
    	if( GUI_WinGetCaptureWin() ==msg->h_deswin && player_ctrl->isTouchMusicList )
    	{    		
    		if(EPDK_TRUE == player_ctrl->isTouchMusicListMove)
    		{
    			MusicList_TouchMove_Flag = EPDK_TRUE;
    		}
    		else
    		{
				MusicList_TouchMove_Flag = EPDK_FALSE;
    		}
    		if(player_ctrl->isTouchMusicListMove == EPDK_FALSE )
    		{
    			Funprintf("--here--\n");
    			music_explorer_on_enter_key(msg);
    		}	
    		ListCtrl->OnTouchUp((void *)ListCtrl, x, y, direct, speed);
    		GUI_WinReleaseCapture();
    		player_ctrl->isTouchMusicListMove = EPDK_FALSE;
    		player_ctrl->isTouchMusicList = EPDK_FALSE;		
    		ret = EPDK_OK;
    	}
    }
    else if( keyState == GUI_MSG_TOUCH_MOVE )
    {
    	if(player_ctrl->isTouchMusicList )
    	{
    		MusicList_TouchMove_Flag = EPDK_TRUE;
			player_ctrl->list_ctrl->isTouchMusic_flag = EPDK_TRUE;
    		player_ctrl->isTouchMusicListMove = EPDK_TRUE;
    		ret = ListCtrl->OnTouchMove((void *)ListCtrl, x, y, direct, speed);
    	}
    }
    if( ret == EPDK_OK )
    {
    	player_ctrl->CheckFocusItemCnt = 0;
    }
	return ret;
}

static __s32 music_explorer_on_enter_key(__gui_msg_t *msg)
{
	__s32 ret = 0;
	music_player_ctrl_t *This;
	music_list_ctrl_t *ListCtrl;
	char *filename;
	__u32 index;
	char cur_playing_file[RAT_MAX_FULL_PATH_LEN];
	eLIBs_memset(cur_playing_file, 0, sizeof(cur_playing_file));
	This = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	if(This->hdigit_layer)
	{
		__s32 ndigit_song_num = This->ndigit_song_num;
		MusicPlayer_DigitDelete(msg->h_deswin);
		music_player_set_play_index(This, ndigit_song_num);
		return EPDK_OK;
	}
	ListCtrl = This->list_ctrl;
	filename = This->play_file_info.filename;
	index = robin_npl_get_cur();
	music_delete_breakpoint_info(index);
	ret = get_music_list_focus_item_full_filename(ListCtrl, filename);
	if(ret != EPDK_FAIL)
	{
		ListCtrl->play_index = ret;
	}
	else
	{
		ListCtrl->play_index = 0;
		return EPDK_FAIL;
	}
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(This->music_layer) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(This->music_layer)))
	{
		Funprintf("--lyr fail--\n");
		return EPDK_FAIL;
	}
	ret = robin_get_fsm_cur_file(cur_playing_file, sizeof(cur_playing_file));
	if(EPDK_OK == ret && (0 == eLIBs_stricmp(filename, cur_playing_file)))
	{
		return EPDK_OK;
	}
	music_list_set_focus_item(ListCtrl, ListCtrl->play_index);	
	ret = MusicPlayer_PlayFile(This, filename, 0);
	return EPDK_OK;
}


void DrawMusicPlayingTimeState(__gui_msg_t *msg,__u32 cur_time)
{
	GUI_MEMDEV_Handle	draw_mem;  
	__u32 total_time = 0;
	draw_mem = GUI_MEMDEV_Create(MEMDEV_X, MEMDEV_Y,MEMDEV_W,MEMDEV_H);
	GUI_MEMDEV_Select(draw_mem);
	total_time = robin_get_total_time();
	if(cur_time > total_time)
	{
		cur_time = total_time;
	}			
	DrawMusicPlayingTime(cur_time);
	DrawMusicTotalTime(total_time);
	DrawMusicProgressBar(total_time, cur_time); 		
	GUI_MEMDEV_CopyToLCD(draw_mem); 
	GUI_MEMDEV_Select( NULL );			
	GUI_MEMDEV_Delete(draw_mem);
	draw_mem = NULL;
}

static __s32 MusicPlayer_Rewind_Touch( __gui_msg_t *msg, __u32 keyState, __u16 x, __u16 y )
{
	__u32 total_time = 0, cur_time = 0;
	__u16 width = 0;
	void *pic_buf = NULL;
	GUI_RECT rect;
	__s32 tmp_x,tmp_y;
	music_player_ctrl_t *player_ctrl;
	music_palyer_ui_t *player_ui;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	player_ui  = music_get_player_ui_param();
	total_time = robin_get_total_time();
	cur_time   = robin_get_cur_time();
	if((total_time == 0)||(cur_time == 0))
	{		
		tmp_x = player_ui->process_bar_body_rect.x;
		tmp_y = player_ui->process_bar_body_rect.y;
		pic_buf = music_get_icon_res(ID_MUSIC_PROCESS_BAR_BODY_ICON);
		GUI_BMP_Draw(pic_buf, tmp_x, tmp_y);
		return EPDK_OK; 					
	}
	rect.x0=player_ui->process_bar_body_rect.x;
	rect.y0=player_ui->process_bar_body_rect.y;
	rect.x1=player_ui->process_bar_body_rect.x+player_ui->process_bar_body_rect.width;
	rect.y1=player_ui->process_bar_body_rect.y+player_ui->process_bar_body_rect.height;
    if( keyState == GUI_MSG_TOUCH_MOVE || keyState == GUI_MSG_TOUCH_DOWN || keyState == GUI_MSG_TOUCH_LONGDOWN)
    {	
		total_time = robin_get_total_time();
		width = rect.x1 - rect.x0;
		if( x > rect.x1)
		{
			x = rect.x1;
		}
		else if( x < rect.x0 )
		{
			x = rect.x0;
		}
		cur_time = (x - rect.x0)*total_time/width;
        player_ctrl->curTouchPlayingBarTime = cur_time;
		total_time = robin_get_total_time();
		cur_time = player_ctrl->curTouchPlayingBarTime;
		player_ctrl->RefreshPlayTimeCnt = 0;
		DrawMusicPlayingTimeState(msg,cur_time);
		player_ctrl->isTouchMusicListMove = EPDK_TRUE;
    }
	else if(keyState == GUI_MSG_TOUCH_UP)
	{
		player_ctrl->RefreshPlayTimeCnt = 0;
		if(player_ctrl->isTouchMusicListMove)
		{
			player_ctrl->isTouchMusicListMove = EPDK_FALSE;				
			robin_set_cmd_jump(player_ctrl->curTouchPlayingBarTime);
		}
	}
}
static __s32 music_point_to_item_id( __s32 x, __s32 y)
{
	__s32 index = SET_INVALID;
	music_palyer_ui_t *player_ui;
	player_ui = music_get_player_ui_param();
	if(y>=player_ui->play_mode_btn_rect.y&&y<=(player_ui->play_mode_btn_rect.y+player_ui->play_mode_btn_rect.height))
	{
		if(x>=player_ui->play_mode_btn_rect.x&&x<=player_ui->play_mode_btn_rect.x+player_ui->play_mode_btn_rect.width)
		{
			index = SET_PLAY_MODE;
		}
		else if(x>=player_ui->EQ_mode_btn_rect.x&&x<=player_ui->EQ_mode_btn_rect.x+player_ui->EQ_mode_btn_rect.width)
		{
			index = SET_EQ_MODE;
		}
	}
	return index;	
}


static MusicPlayer_EnterKeyPlay(__gui_msg_t *msg)
{
	__listbar_scene_t scene;
	char *filename=NULL;
	music_player_ctrl_t *this;	
	if(check_focus_timeout<=8)
	{
		check_focus_timeout++;
	}
	if(check_focus_timeout!=8)
	{
		return EPDK_FAIL;
	}
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	if(this == NULL)	
	{
		return EPDK_FAIL;
	}
	if(!this->visiable)
	{
		return EPDK_FAIL;
	}
	if(this->list_ctrl == NULL)
	{
		return EPDK_FAIL;
	}
	if(EPDK_TRUE == dsk_amplifier_is_on())
	{
		dsk_amplifier_onoff(BEETLES_SPEAK_OFF);
	}
	LISTBAR_GetScene(this->list_ctrl->listbar_handle, &scene);
	if(this->list_ctrl->play_index != scene.focus_id)
	{
		__s32 ret = 0;
		music_list_ctrl_t *ListCtrl;
		ListCtrl = this->list_ctrl;
		filename = this->play_file_info.filename;		
		ret = get_music_list_focus_item_full_filename(ListCtrl, filename);	
		if(ret != EPDK_FAIL)
		{
			ListCtrl->play_index = ret;
		}	
		MusicPlayer_PlayFile(this, filename, 0);
		return EPDK_OK;
	}			
	return EPDK_OK;
}

static __s32 music_explorer_on_next_key(__gui_msg_t *msg)
{
	music_player_ctrl_t *player_ctrl = NULL;
	music_list_ctrl_t *ListCtrl = NULL;
	char *filename = NULL;
	__listbar_scene_t scene;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	if(player_ctrl == NULL)
	{
		return EPDK_FAIL;
	}

	ListCtrl = player_ctrl->list_ctrl;

	if(ListCtrl == NULL)
	{
		return EPDK_FAIL;
	}

	filename = player_ctrl->play_file_info.filename;
	LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
	ListCtrl->OnNextKey((void *)ListCtrl);				
	LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
	player_ctrl->CheckFocusItemCnt = 0;		
	return EPDK_OK;
}

static __s32 music_explorer_on_previous_key(__gui_msg_t *msg)
{
	music_player_ctrl_t *player_ctrl;
	music_list_ctrl_t *ListCtrl;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	if(player_ctrl == NULL)
	{
		return EPDK_FAIL;
	}

	ListCtrl = player_ctrl->list_ctrl;

	if(ListCtrl == NULL)
	{
		return EPDK_FAIL;
	}
	ListCtrl->OnPreviousKey((void *)ListCtrl);			
	player_ctrl->CheckFocusItemCnt = 0;					
	return EPDK_OK;
}

static __s32 music_explorer_on_menu_key(__gui_msg_t *msg)
{
	music_player_ctrl_t *this;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	
	if(this->menu_mode == MUSIC_EXPLORER_MODE)
	{
		music_palyer_ui_t *player_ui;
		player_ui = music_get_player_ui_param();
		com_memdev_create_ex(this->music_layer,player_ui->contrl_BG_rect.x, player_ui->contrl_BG_rect.y, player_ui->contrl_BG_rect.width, player_ui->contrl_BG_rect.height);	
		this->menu_mode = MUSIC_SET_PLAYER_MODE;
		GUI_UC_SetEncodeUTF8();				
		ClearMusicPlayerContrlButtonBG();
		DrawMusicPlayerContrlButton(this);
		com_memdev_delete();
		DrawMusicPlayerContrlButtonByID(this, this->menu_id, FOCUSED);
	}
	else
	{
		
	}
	return EPDK_OK;
}

static __s32 music_save_breakpoint(music_player_ctrl_t *This)
{
	music_save_breakpoint_info(This->play_index);
	music_list_save_last_para(This->list_ctrl);			
	dsk_reg_flush(REG_APP_MUSIC);
	return EPDK_OK;
}
static __s32 music_delete_breakpoint_info(__s32 index)
{
	__s32 ret;
	char filename[RAT_MAX_FULL_PATH_LEN] = {0};
	__cedar_tag_inf_t tag_inf;
	ret = robin_npl_index2file(index, filename);
	if(-1 == ret)
	{
		__msg("robin_npl_index2file fail...\n");
		return -1;
	}
	if(!fifo_db_has_exist(NAME_MUSIC_BKPOINT))
	{
		return -1;
	}
	ret = get_item_content_from_fifo_db(NAME_MUSIC_BKPOINT, filename, &tag_inf);
	if(-1 == ret)
	{
		return 0;
	}
	if(delete_item_from_fifo_db(NAME_MUSIC_BKPOINT, filename))
	{
		return -1;
	}
	return 0;
}

static __s32 music_player_set_play_pause_onview(music_player_ctrl_t *this)
{
	if(robin_get_fsm_status() == CEDAR_STAT_PLAY)
	{
		robin_set_cmd_pause();
		DrawMusicPlayStatusButton(MUSIC_PAUSE);
	}
	else
	{
		robin_set_cmd_play();
		DrawMusicPlayStatusButton(MUSIC_PLAY);
	}
	return EPDK_OK;
}

static __s32 music_digit_layer_draw(__gui_msg_t *msg)
{
	music_player_ctrl_t *player_ctrl;
	__s32 total_song_num;
	char text[256];
	__s32 i;
	__s32 j;
	RECT rect;
	GUI_RECT gui_rect;
	__s32 X = 0, Y = 0;
	void *pic_buf = NULL;
	H_LYR	*phLyr;
	GUI_MEMDEV_Handle	draw_mem;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	phLyr = &player_ctrl->hdigit_layer;
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(*phLyr) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(*phLyr)))
	{
		Funprintf("--lyr fail--\n");
		return EPDK_FAIL;
	}
	GUI_LyrWinSel(*phLyr);
	GUI_SetDrawMode(GUI_DRAWMODE_TRANS);
	draw_mem = GUI_MEMDEV_Create(0,0,240,120);
	if(draw_mem)
	{
		__log("MEMDVE SUCCESS\n");
		GUI_MEMDEV_Select(draw_mem);
	}
	if(NULL == player_ctrl)
	{
		__wrn("invalid para...\n");
		return EPDK_FAIL;
	}

	if(NULL == *phLyr)
	{
		__wrn("digit layer is null...\n");
		return EPDK_FAIL;
	}
	total_song_num = robin_npl_get_total_count();
	eLIBs_memset(text, 0, sizeof(text));
	eLIBs_int2str_dec(player_ctrl->ndigit_song_num, text);
	pic_buf = music_get_icon_res(NULL);
	if(pic_buf != NULL)
	{
		GUI_BMP_Draw(pic_buf, 0, 0);
	}
	if(msg->dwAddData1 != GUI_MSG_KEY_NUMLOCK)
	{
		i = eLIBs_strlen(text);
		X = (W_NumLock_Bg - (i * W_Num)) / 2;
		Y = H_NumLock_Bg - H_NumLock_Num + (H_NumLock_Num - H_Num) / 2;
		for(i = 0; i < 6; i++)
		{
			if(text[i] == 0)
			{
				break;
			}

			pic_buf = music_get_icon_res(ID_MUSIC_NUM0 + (text[i] - '0'));

			if(pic_buf != NULL)
			{
				GUI_BMP_Draw(pic_buf, X, Y);
			}
			X += W_Num;
		}
	}
	if(draw_mem)
	{
		GUI_MEMDEV_CopyToLCD(draw_mem); 
		GUI_MEMDEV_Select( NULL );			
		GUI_MEMDEV_Delete(draw_mem);
		draw_mem = NULL;
	}
	GUI_LyrWinSetTop(*phLyr);
	return EPDK_OK;
}

void MusicPlayer_DigitCreate(__gui_msg_t *msg)
{
	music_player_ctrl_t *This;
	H_LYR	*phLyr;
	This = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	phLyr = &This->hdigit_layer;
	if(NULL == *phLyr)
	{
		RECT rect;
		__s32 width, height;
		__s32 scn_width, scn_height;
		dsk_display_get_size(&scn_width, &scn_height);
		width = W_NumLock_Bg;
		height = H_NumLock_Bg;
		rect.x = (scn_width - width);
		rect.y = scn_height - height;
		rect.width = width;
		rect.height = height;
		*phLyr = com_layer_create(&rect, 1, PIXEL_COLOR_ARGB8888, GUI_LYRWIN_STA_ON, "");
		if(NULL == *phLyr)
		{
			__wrn("digit layer create fail...\n");
		}
		else
		{
			__wrn("digit layer create ok...\n");
		}
	}
	if(!GUI_IsTimerInstalled(msg->h_deswin, This->digit_timmer_id))
	{
		__wrn("create timmer...\n");
		This->ndigit_song_num = 0;
		GUI_SetTimer(msg->h_deswin, This->digit_timmer_id, TIMEOUT_ID_TIMER_DIGIT, NULL);
	}
	else
	{
		__wrn("reset timmer...\n");
		GUI_ResetTimer(msg->h_deswin, This->digit_timmer_id, TIMEOUT_ID_TIMER_DIGIT, NULL);
	}
    if((msg->dwAddData1 >= GUI_MSG_KEY_NUM0)&&(msg->dwAddData1 <= GUI_MSG_KEY_NUM9))
	{
		__s32 cur_val;
		cur_val = msg->dwAddData1 - GUI_MSG_KEY_NUM0;
        This->ndigit_song_num *= 10;
        This->ndigit_song_num += cur_val;
        This->ndigit_song_num %= 1000000;
	}
    else
    {
        This->ndigit_song_num = 0;
    }

	music_digit_layer_draw(msg);
}

__s32 MusicPlayer_DigitDelete(H_WIN music_frame_win)
{
	music_player_ctrl_t *this;
	__wrn("music_player_delete_digit_layer begin...\n");
	this = (music_player_ctrl_t *)GUI_WinGetAttr(music_frame_win);
	if(NULL == this)
	{
		return EPDK_FAIL;
	}

	if(this->hdigit_layer)
	{
		GUI_LyrWinDelete(this->hdigit_layer);
		this->hdigit_layer = NULL;
	}
	if(this->digit_timmer_id)
	{
		if(GUI_IsTimerInstalled(music_frame_win, this->digit_timmer_id))
		{
			GUI_KillTimer(music_frame_win, this->digit_timmer_id);
		}
	}
	__wrn("music_player_delete_digit_layer end...\n");
	/*��λ���ּ���־λ*/
	SEND_MSG(DSK_MSG_NUM_SWITCH,NULL,GUI_WinGetHandFromName("beetles"),0,0,0); 
	return EPDK_OK;
}

static __s32 MusicPlayer_CheckPlayStatus(music_player_ctrl_t *this)
{
	__cedar_status_t  status;
	__s32 index;	
	__u32 index2;
	char *filename;
	music_list_ctrl_t *ListCtrl = NULL;
	__listbar_scene_t scene;
	status = robin_get_fsm_status();
	if(status == CEDAR_STAT_STOP)
	{
		if(this->menu_mode == MUSIC_EXPLORER_MODE)
		{
			SPCTRM_Clear(0);		
		}
//		DrawMusicPlayStatusButton(MUSIC_PAUSE);
		if(this->play_mode == RAT_PLAY_MODE_ONLY_ONCE)
		{
			return EPDK_OK;
		}
		if(music_rr_flag)
		{			
			index = robin_npl_get_cur();
		}
		else
		{
			index2 = robin_npl_get_cur();
			music_delete_breakpoint_info(index2);//ɾ����һ�׶ϵ���Ϣ
			index = robin_npl_get_next();
		}
		if(index != -1)
		{
			if(this->list_ctrl != NULL)
			{
				ListCtrl = this->list_ctrl;
				ListCtrl->play_index = index;
			}
			else
			{
				this->play_index = index;
			}
			filename = this->play_file_info.filename;			
			robin_npl_index2file(index, filename);	
			MusicPlayer_PlayFile(this, filename, 0);
			if(this->play_mode == RAT_PLAY_MODE_RANDOM && ListCtrl != NULL)
			{
				LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
				music_list_set_focus_item(ListCtrl, index);
				LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
				ListCtrl->play_index = scene.focus_id;
				return EPDK_OK;
			}
			if(this->visiable)		
			{
				if((this->play_mode == RAT_PLAY_MODE_ROTATE_ALL)|| (this->play_mode == RAT_PLAY_MODE_SEQUENCE))
				{
					LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
					if(ListCtrl->play_index != scene.focus_id + 1)
					{
						music_list_set_focus_item(ListCtrl, ListCtrl->play_index);
					}
					else
					{
						MusicList_TouchMove_Flag = 0;
						ListCtrl->OnNextKey((void *)ListCtrl);	
					}
					LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
					ListCtrl->play_index = scene.focus_id;
				}
			}
		}
	}
	else if(status == CEDAR_STAT_PLAY)
	{
		music_rr_flag = 0;
	}
	else if(status == CEDAR_STAT_RR)
	{
		music_rr_flag = 1;
	}
	return EPDK_OK;
}


__s32 music_player_get_last_para(music_player_ctrl_t *This)
{
	__s32 ret = 0;
	reg_music_para_t *music_last_para = NULL;
	reg_system_para_t *system_last_para = NULL;
	music_last_para = dsk_reg_get_para_by_app(REG_APP_MUSIC);
	system_last_para = dsk_reg_get_para_by_app(REG_APP_SYSTEM);
	This->EQ_mode = music_last_para->EQ_mode;
	This->play_mode = music_last_para->play_mode;
	switch(This->play_mode)
	{
		case RAT_PLAY_MODE_SEQUENCE:
			break;

		case RAT_PLAY_MODE_ROTATE_ONE:
			break;

		case RAT_PLAY_MODE_ROTATE_ALL:
			break;

		case RAT_PLAY_MODE_ONLY_ONCE:
			break;

		case RAT_PLAY_MODE_RANDOM:
			break;

		default:
			This->play_mode = RAT_PLAY_MODE_SEQUENCE;
			break;
	}

	switch(This->EQ_mode)
	{
		case MUSIC_EQ_NORMAL:
			break;

		case MUSIC_EQ_ROCK:
			break;

		case MUSIC_EQ_CLASSIC:
			break;

		case MUSIC_EQ_JAZZ:
			break;

		case MUSIC_EQ_POP:
			break;

		default:
			This->EQ_mode = MUSIC_EQ_NORMAL;
			break;
	}
	return EPDK_OK;
}

//����ע�����Ϣֱ�Ӳ����ṹ��
__s32 music_player_save_last_para(music_player_ctrl_t *This)
{
	__s32 ret = 0;
	reg_music_para_t *music_last_para;
	reg_system_para_t *system_last_para = NULL;
	system_last_para = dsk_reg_get_para_by_app(REG_APP_SYSTEM);
	music_last_para = dsk_reg_get_para_by_app(REG_APP_MUSIC);
	music_last_para->EQ_mode = This->EQ_mode;
	music_last_para->play_mode = This->play_mode;
	return EPDK_OK;
}

static __s32 music_player_set_play_mode(music_player_ctrl_t *this)
{
	switch(this->play_mode)
	{
		case RAT_PLAY_MODE_ROTATE_ONE:
			this->play_mode = RAT_PLAY_MODE_SEQUENCE;
			break;
		case RAT_PLAY_MODE_SEQUENCE:
			this->play_mode = RAT_PLAY_MODE_RANDOM;
			break;
		case RAT_PLAY_MODE_RANDOM:
			this->play_mode = RAT_PLAY_MODE_ROTATE_ONE;
			break;
		default:
			break;
	}
	robin_set_play_mode(this->play_mode);
	return EPDK_OK;
}

static __s32 music_player_set_EQ_mode(music_player_ctrl_t *this)
{
	__cedar_audio_eq_t eq_mode;

	switch(this->EQ_mode)
	{
		case MUSIC_EQ_NORMAL:
			this->EQ_mode = MUSIC_EQ_POP;
			eq_mode = CEDAR_AUD_EQ_TYPE_POP;
			break;
		case MUSIC_EQ_POP:
			this->EQ_mode = MUSIC_EQ_ROCK;
			eq_mode = CEDAR_AUD_EQ_TYPE_ROCK;
			break;
		case MUSIC_EQ_ROCK:
			this->EQ_mode = MUSIC_EQ_NORMAL;
			eq_mode = CEDAR_AUD_EQ_TYPE_NORMAL;
			break;
		default:
		{
			this->EQ_mode = MUSIC_EQ_NORMAL;
			eq_mode = CEDAR_AUD_EQ_TYPE_NORMAL;
			break;
		}
	}

	DrawMusicEQModeStatus(this);
	robin_set_eq_mode(eq_mode);
	return EPDK_OK;
}
char *music_player_set_play_random(music_player_ctrl_t *this)
{
	__s32 index;
	char *filename = NULL;
	music_list_ctrl_t *ListCtrl = NULL;
	__listbar_scene_t scene;

	if(this->play_mode == RAT_PLAY_MODE_RANDOM && this->list_ctrl != NULL)
	{
		index = robin_npl_get_next();
		if(index != -1)
		{
			if(this->list_ctrl != NULL)
			{
				ListCtrl = this->list_ctrl;
				ListCtrl->play_index = index;
			}
			else
			{
				this->play_index = index;
			}
			filename = this->play_file_info.filename;
			robin_npl_index2file(index, filename);
			LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
			__msg("\n\nlistbar get scene focusid = %d, start id = %d\n", scene.focus_id, scene.start_id);
			music_list_set_focus_item(ListCtrl, index);
			LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
			__msg("\n\nlistbar get scene focusid = %d, start id = %d\n", scene.focus_id, scene.start_id);
			ListCtrl->play_index = scene.focus_id;
		}
	}

	return filename;
}

static __s32 music_player_set_play_previous(music_player_ctrl_t *this)
{
	__s32 ret;
	music_list_ctrl_t *ListCtrl;
	char *filename;
	__listbar_scene_t scene;
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	robin_set_cmd_stop();
	filename = music_player_set_play_random(this);
	if(filename == NULL)
	{
		ListCtrl = this->list_ctrl;
		filename = this->play_file_info.filename;
		LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
		if(ListCtrl->play_index != scene.focus_id)
		{
			music_list_set_focus_item(ListCtrl, ListCtrl->play_index);
		}
		ListCtrl->OnPreviousKey((void *)ListCtrl);					
		LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
		ListCtrl->play_index = scene.focus_id;
		ret = get_music_list_focus_item_full_filename(ListCtrl, filename);
		if(EPDK_FAIL == ret)
		{
			return EPDK_FAIL;
		}
	}
	robin_set_cmd_stop();
	app_root_play_app_sounds(SHORT_KEY_WAVE_FILE_PREV_SONG);
	ret = MusicPlayer_PlayFile(this, filename, 0);
	return EPDK_OK;
}
static __s32 music_player_set_play_next(music_player_ctrl_t *this)
{
	__s32 ret;
	music_list_ctrl_t *ListCtrl;
	char *filename;
	__listbar_scene_t scene;
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	robin_set_cmd_stop();
	filename = music_player_set_play_random(this);
	if(filename == NULL)
	{
		ListCtrl = this->list_ctrl;
		filename = this->play_file_info.filename;
		LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
		if(ListCtrl->play_index != scene.focus_id)
		{
			music_list_set_focus_item(ListCtrl, ListCtrl->play_index);
		}
		ListCtrl->OnNextKey((void *)ListCtrl);					
		LISTBAR_GetScene(ListCtrl->listbar_handle, &scene);
		ListCtrl->play_index = scene.focus_id;
		ret = get_music_list_focus_item_full_filename(ListCtrl, filename);
		if(EPDK_FAIL == ret)
		{
			return EPDK_FAIL;
		}
	}
	MusicPlayer_PlayFile(this, filename, 0);
	return EPDK_OK;
}
static __s32 music_player_set_play_pause(music_player_ctrl_t *this, music_btn_status_e status)
{
	DrawMusicPlayPauseButton(status);

	if(robin_get_fsm_status() == CEDAR_STAT_PLAY)
	{
		robin_set_cmd_pause();
		DrawMusicPlayStatusButton(MUSIC_PAUSE);
	}
	else
	{
		robin_set_cmd_play();
		DrawMusicPlayStatusButton(MUSIC_PLAY);
	}

	return EPDK_OK;
}
static __s32 music_player_on_setting(music_player_ctrl_t *this)
{
	switch(this->menu_id)
	{
		case SET_PLAY_MODE:
			music_player_set_play_mode(this);
			break;

		case SET_EQ_MODE:
			music_player_set_EQ_mode(this);
			break;
	}
	return EPDK_OK;
}
__s32 music_player_win_check_focus_on_timer(music_player_ctrl_t *this)
{
	__listbar_scene_t scene;
	if(this == NULL || this->list_ctrl == NULL || this->visiable == NULL)
	{
		return EPDK_FAIL;
	}
	LISTBAR_GetScene(this->list_ctrl->listbar_handle, &scene);
	if(this->list_ctrl->play_index != scene.focus_id)
	{
		MusicList_TouchMove_Flag = 0;
		music_list_set_focus_item(this->list_ctrl, this->list_ctrl->play_index);
	}
	return EPDK_OK;
}


__s32 music_player_focus_timer(music_player_ctrl_t *this)
{
	if(!this->visiable)
	{
		return EPDK_FAIL;
	}
	this->CheckFocusItemCnt++;
	if(this->CheckFocusItemCnt > MUSIC_CHECK_FOCUS_TIMER_CNT)		/*6s*/
	{
		this->CheckFocusItemCnt = 0;
		music_player_win_check_focus_on_timer(this);
	}
	return EPDK_OK;
}





__s32 music_player_scene_delete(H_WIN  music_frame_win)
{
	__s32 ret = 0;
	music_player_ctrl_t *this;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(music_frame_win);
	if(!this->visiable)
	{
		return EPDK_FAIL;
	}
	this->visiable = EPDK_FALSE;
	if(GUI_IsTimerInstalled(music_frame_win, MusicFocusTimerId))
	{
		GUI_KillTimer(music_frame_win, MusicFocusTimerId);
	}
	music_player_save_last_para(this);
	music_list_long_string_stop(this->list_ctrl);
	music_free_icon_res();
	return EPDK_OK;
}

__s32  musicplayer_rat_get_search_path(__s32 root_type, char *search_path)
{
	__s32 ret = 0;
	char s_root_type[50];
	char disk_name[RAT_MAX_PARTITION][4];
	eLIBs_memset(s_root_type, 0, sizeof(s_root_type));
	eLIBs_memset(disk_name, 0, sizeof(disk_name));
	switch(root_type)
	{
		case RAT_LOCAL:
			eLIBs_strcpy(s_root_type, RAT_LOCAL_DISK);
			break;

		case RAT_TF:
			eLIBs_strcpy(s_root_type, RAT_SD_CARD);
			break;

		case RAT_USB:
			eLIBs_strcpy(s_root_type, RAT_USB_DISK);
			break;

		default:
			eLIBs_strcpy(s_root_type, RAT_SD_CARD);
			break;
	}
	ret = rat_get_partition_name(s_root_type, disk_name);
	eLIBs_strcpy(search_path, disk_name[0]);
	return ret;
}
static __s32 music_get_audio_file_info(music_player_ctrl_t *this, char *filename)
{
	robin_audio_info_t audio_file_info;
	eLIBs_memset(&audio_file_info, 0, sizeof(robin_audio_info_t));
	/*��ȡ��Ƶ��Ϣ�����������*/
	//Ret = robin_get_audio_info(filename, &audio_file_info);
	eLIBs_strcpy(this->play_file_info.artist, audio_file_info.artist);
	eLIBs_strcpy(this->play_file_info.album, audio_file_info.album);
	this->play_file_info.bitrate = audio_file_info.bps;
	this->play_file_info.filesize = eLIBs_GetFileSize(filename);
	this->play_file_info.artist_charset = audio_file_info.artist_charset ;
	this->play_file_info.album_charset = audio_file_info.album_charset ;
	return EPDK_OK;
}

__s32 music_load_breakpoint_info(__s32 index, __cedar_tag_inf_t *tag_inf)
{
	__s32 ret;
	char filename[RAT_MAX_FULL_PATH_LEN] = {0};
	ret = robin_npl_index2file(index, filename);
	if(-1 == ret)
	{
		__msg("robin_npl_index2file fail...\n");
		return -1;
	}
	__here__;

	if(!fifo_db_has_exist(NAME_MUSIC_BKPOINT))
	{
		return -1;
	}
	__here__;
	if(get_item_content_from_fifo_db(NAME_MUSIC_BKPOINT, filename, tag_inf))
	{
		return -1;
	}
	__here__;
	return 0;
}

__s32 music_save_breakpoint_info(__s32 index)
{
	__cedar_tag_inf_t tag_inf;
	char filename[RAT_MAX_FULL_PATH_LEN] = {0};
	__s32 ret;

	/*get the tag*/
	if(EPDK_FALSE == robin_is_open())
	{
		__here__;
		return EPDK_FAIL;
	}

	__here__;
	ret = robin_get_tag(&tag_inf);

	if(0 != ret)
	{
		__msg("robin_get_tag fail...\n");
		return -1;
	}

	__here__;
	ret = robin_npl_index2file(index, filename);

	if(-1 == ret)
	{
		__msg("robin_npl_index2file fail...\n");
		return -1;
	}

	__msg("begin save breakpoint, index = %d, filename=%s\n", index, filename);

	if(!fifo_db_has_exist(NAME_MUSIC_BKPOINT))
	{
		ret = create_fifo_db(NAME_MUSIC_BKPOINT, 4, sizeof(__cedar_tag_inf_t));

		if(0 != ret)
		{
			__msg("create_fifo_db fail...\n");
			return -1;
		}
	}

	__here__;
	ret = add_item_to_fifo_db(NAME_MUSIC_BKPOINT, filename, &tag_inf);
	__msg("add_item_to_fifo_db, ret=%d\n", ret);
	return ret;
}


static __s32 MusicPlayer_PlayFile(music_player_ctrl_t *this, char *filename, __bool breakplay)
{
	__u32 total_time = 0, cur_time = 0;
	__s32 ret = 0;
	if(this  == NULL)
	{
		return EPDK_FAIL;
	}
	music_rr_flag = 0;
	if(this->list_ctrl != NULL)
	{
		if((eLIBs_strlen(filename) == 0) || (this->list_ctrl->total == 0))
		{
			if(this->visiable)
			{
				DrawMusicPlayingTime(0);
				CleanMusicTotalTime();
				DrawMusicTotalTime(0);
				DrawMusicProgressBar(0, 0);	
				eLIBs_memset(&(this->play_file_info), 0, sizeof(audio_file_info_t));
//				DrawMusicPlayStatusButton(MUSIC_PLAY);
				if(this->menu_mode == MUSIC_EXPLORER_MODE)
				{
					SPCTRM_Clear((__u32)0x000f);		
				}
			}
			return EPDK_FAIL;
		}
	}
	this->CheckFocusItemCnt = 0;		
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	if(this->list_ctrl != NULL)
	{
		music_list_get_item_scene(this->list_ctrl, &(this->list_ctrl->listbar_play_scene));
		robin_npl_set_cur(this->list_ctrl->play_index);
		this->play_index = this->list_ctrl->play_index;
		__wrn("this->play_index=%d\n", this->play_index);
	}
	else
	{
		robin_npl_set_cur(this->play_index);
		__wrn("this->play_index=%d\n", this->play_index);
	}
	if(1 == breakplay)
	{
		char cur_playing_file[RAT_MAX_FULL_PATH_LEN];
		__cedar_tag_inf_t tag_info;
		__cedar_status_t cedar_status;
		eLIBs_memset(cur_playing_file, 0, sizeof(cur_playing_file));
		ret = robin_get_fsm_cur_file(cur_playing_file, sizeof(cur_playing_file));
		cedar_status = robin_get_fsm_status();
		if((CEDAR_STAT_PLAY == cedar_status|| CEDAR_STAT_FF == cedar_status|| CEDAR_STAT_RR == cedar_status|| CEDAR_STAT_JUMP == cedar_status)
		    && EPDK_OK == ret&& 0 == eLIBs_stricmp(filename, cur_playing_file))
		{
			__wrn("cur music is playing, not need replay...\n");
		}
		else
		{
			ret = music_load_breakpoint_info(this->play_index, &tag_info);
			if(EPDK_OK == ret)
			{
				ret = robin_play_file(filename, &tag_info);
			}
			else
			{
				ret = robin_play_file(filename, NULL);
			}
			if(ret == EPDK_OK)
			{
				__msg("index: %d\n", this->play_index);
			}
		}
	}
	else
	{
		ret = robin_play_file(filename, NULL);
	}
	if(this->visiable)
	{
		music_get_audio_file_info(this, filename);
		total_time = robin_get_total_time();
		cur_time = robin_get_cur_time();
		if(cur_time > total_time)
		{
			cur_time = total_time;
		}
		if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(this->music_layer) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(this->music_layer)))
		{
			Funprintf("--lyr fail--\n");
			return EPDK_FAIL;
		}
		GUI_LyrWinSel(this->music_layer);
		DrawMusicPlayingTime(cur_time);
		CleanMusicTotalTime();
		DrawMusicTotalTime(total_time);
		DrawMusicProgressBar(0, 0);
	
		DrawMusicHeadbar(this);
		DrawMusicPlayStatusButton(MUSIC_PLAY);

	}
	if(this->visiable)
	{
		if(this->menu_mode == MUSIC_EXPLORER_MODE)
		{
			ClearMusicPlayerContrlButtonBG();
			GUI_ClearRect(450,90,450+300,90+153+30);
			SPCTRM_Clear(0);
			SPCTRM_Update((H_WIN)(this->h_framewin));
		}
	}
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	return EPDK_OK;
}


__s32 music_player_restore(H_WIN  music_frame_win, __s32 root_type)
{
	music_player_ctrl_t *this;
	music_list_para_t list_para;
	__s32 ret = 0;
	char  filename[RAT_MAX_FULL_PATH_LEN];
	char  search_path[RAT_MAX_FULL_PATH_LEN];
	eLIBs_memset(filename, 0, sizeof(filename));
	if(music_frame_win == NULL)
	{
		return EPDK_FAIL;
	}
	this = (music_player_ctrl_t *)GUI_WinGetAttr(music_frame_win);
	this->visiable = EPDK_TRUE;
	ret = GUI_LyrWinSetTop(this->music_layer);
	if(ret != EPDK_OK)
	{
		return EPDK_FAIL;
	}
	if(GUI_LYRWIN_STA_ON != GUI_LyrWinGetSta(this->music_layer) && (GUI_LYRWIN_STA_SLEEP!= GUI_LyrWinGetSta(this->music_layer)))
	{
		Funprintf("--lyr fail--\n");
		return EPDK_FAIL;
	}
	GUI_LyrWinSel(this->music_layer);
	GUI_SetBkColor(0x0);
	GUI_ClearRect(0, 0, 320, 50);
	this->visiable = EPDK_TRUE;
	if(this->list_ctrl != NULL)
	{
		this->list_ctrl->visiable = EPDK_TRUE;
	}
	music_player_get_last_para(this);
	if(this->list_ctrl != NULL)				
	{
		music_list_delete(this->list_ctrl);
		this->list_ctrl = NULL;
	}
	musicplayer_rat_get_search_path(root_type, search_path);
	if(robin_get_fsm_cur_file(filename, sizeof(filename)) != -1)
	{
		if(this->list_ctrl->rat_handle != NULL)
		{
			this->list_ctrl->rat_handle = rat_open_ex(root_type, RAT_MEDIA_TYPE_AUDIO, 0);
			if(EPDK_FAIL == rat_set_file_for_play(this->list_ctrl->rat_handle, filename))
			{
				return EPDK_FAIL;
			}
		}
		else
		{
			return EPDK_FAIL;
		}
	}
	else
	{
		return EPDK_FAIL;
	}
	this->root_type 	 = root_type;
	list_para.framewin 	 = this->h_framewin;
	list_para.layer 	 = this->music_layer;
	list_para.visiable 	 = this->visiable;
	list_para.root_type  = this->root_type;
	list_para.media_type = this->media_type;
	list_para.font 		 = this->font;
	//��ֵ�����ڴ���listʱ����Ƿ���ļ�����ָ���̨����
	list_para.explorer_play_music = this->explorer_play_music;
	list_para.music_file_name 	  = this->music_file_name;
	this->list_ctrl 			  = music_list_init(&list_para);
	if(this->list_ctrl != NULL)
	{
		music_list_show(this->list_ctrl);
	}
	else
	{
		return EPDK_FAIL;
	}
	MusicSetTransColor();
	DrawMusicHeadbar(this);
	music_restore_play_file_info(this);
	if(!GUI_IsTimerInstalled(this->h_framewin, MusicFocusTimerId))
	{
		GUI_SetTimer(this->h_framewin, MusicFocusTimerId, MUSIC_SYSTIMER_INTERVAL, NULL);				
	}
	return EPDK_OK;
}

__s32 music_restore_play_file_info(music_player_ctrl_t *this)
{
	__s32 ret;
	__u32 total_time = 0, cur_time = 0;
	char *filename;

	if(this == NULL)
	{
		return EPDK_FAIL;
	}

	filename = this->play_file_info.filename;
	cur_time = robin_get_cur_time();
	ret = MusicGetListItemFileFullPath(this->list_ctrl->rat_handle, this->list_ctrl->play_index, filename);

	if(EPDK_FAIL == ret)
	{
		return EPDK_FAIL;
	}

	cur_time = robin_get_cur_time();
	music_get_audio_file_info(this, filename);
	total_time = robin_get_total_time();
	cur_time = robin_get_cur_time();

	if(cur_time > total_time)
	{
		cur_time = total_time;
	}

	DrawMusicPlayingTime(cur_time);
	CleanMusicTotalTime();
	DrawMusicTotalTime(total_time);
	DrawMusicProgressBar(total_time, cur_time);					

	if(robin_get_fsm_status() == CEDAR_STAT_PLAY)
	{
		DrawMusicPlayStatusButton(MUSIC_PLAY);
	}
	else
	{
		DrawMusicPlayStatusButton(MUSIC_PAUSE);
	}
	if(this->menu_mode == MUSIC_EXPLORER_MODE)
	{
		ClearMusicPlayerContrlButtonBG();
		DrawMusicHeadbar(this);
		SPCTRM_Clear(0);		
		SPCTRM_Update((H_WIN)(this->h_framewin));
	}
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	return EPDK_OK;
}


static __s32 music_player_device_init(music_player_ctrl_t *this)
{
	robin_open(ROBIN_MODE_AUDIO_MIN, NULL);	
	robin_enable_spectrum();
	robin_set_eq_mode(this->EQ_mode);
	robin_set_ff_rr_speed(MUSIC_FF_SPEED);
	robin_set_play_mode(this->play_mode);
	return EPDK_OK;
}


static __s32 music_player_device_uninit(music_player_ctrl_t *player_ctrl)
{
	if(NULL == player_ctrl || NULL == player_ctrl->h_framewin)
	{
		return EPDK_FAIL;
	}
	if(GUI_IsTimerInstalled(player_ctrl->h_framewin, MusicTimerId))
	{
		GUI_KillTimer(player_ctrl->h_framewin, MusicTimerId);
	}
	if(EPDK_FALSE == robin_is_open())
	{
		__here__;
		return EPDK_FALSE;
	}
	robin_set_cmd_stop();
	robin_close();
	return EPDK_OK;
}

