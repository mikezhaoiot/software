/*
*********************************************************************************************************
*											        ePDK
*						            the Easy Portable/Player Develop Kits
*									           ir key driver
*
*						        (c) Copyright 2006-2007, Steven.ZGJ China
*											All	Rights Reserved
*
* File    : rocker_main.c
* By      : Jerry
* Version : V1.00
*********************************************************************************************************
*/
#include "drv_matrix_key_i.h"
#include "drv_rocker_i.h"
#include "epdk.h"

static __s32 i = 0;
static __s32 pw_pin = 0;

__s32 g_getEchoLevel = 0;


__s32 data_filter(__s32 *input, __s32  *output , int arr_len)
{
	__s32 tmp, i, j, half, rec, k = 0;
	__s32 *data;
	data = input;
	i = arr_len;

	for(i = 0; i < arr_len - 1; i++)
		for(j = 0; j < arr_len - i - 1; j++)
		{
			if(data[j] > data[j + 1])
			{
				// ��С��������
				tmp = data[j];
				data[j] = data[j + 1];
				data[j + 1] = tmp;
			}
		}

	half = arr_len / 2;

	for(i = 0; i < arr_len; i++)
	{
		if(data[half] > data[i])
		{
			rec = data[half] - data[i];
		}
		else
		{
			rec = data[i] - data[half];
		}

		if(rec < 30)	// ���ֵ
		{
			output[k] = data[i];
			k++;
		}
	}

	return k;
}

const __u16 gc_adKeyPadX1_tab[] =
{
	KPAD_SUBMENU,
	KPAD_MENU,	
	KPAD_MOVIE,
	KPAD_MUSIC,
	KPAD_FM,
	KPAD_RECORD,
	KPAD_PHOTO, 
	KPAD_ENTER,
	KPAD_LEFT,
	KPAD_RIGHT,
};
const __u16 gc_adKeyPadX2_tab[] =
{
	KPAD_NUM1,
	KPAD_NUM2,
	KPAD_NUM3,
	KPAD_NUM4,
	KPAD_NUM5,
	KPAD_NUM6,
	KPAD_NUM7,
	KPAD_NUM8,
	KPAD_NUM9,
	KPAD_NUM0,
};

#define KB_AD_STEP   140
const S_KEYPAD_AD gc_sKeypadAD_type4[] =
{
	{0, 	KB_AD_STEP},
	{338-KB_AD_STEP,	338+KB_AD_STEP},
	{683-KB_AD_STEP,	683+KB_AD_STEP},
	{1016-KB_AD_STEP,	1016+KB_AD_STEP},
	{1365-KB_AD_STEP,	1365+KB_AD_STEP},
	{1696-KB_AD_STEP,	1696+KB_AD_STEP},
	{2027-KB_AD_STEP,	2027+KB_AD_STEP},
	{2374-KB_AD_STEP,	2374+KB_AD_STEP},
	{2721-KB_AD_STEP,	2721+KB_AD_STEP},
	{3066-KB_AD_STEP,	3066+KB_AD_STEP},	
	{3439-KB_AD_STEP,	3439+KB_AD_STEP},	
	{3778-KB_AD_STEP,	3778+KB_AD_STEP},		
};

__s32 get_x1_channe1_keypad(__s32 ad_data)
{
	__s16 idx, valueKeyIdx = -1;
	for(idx =0; idx <__SIZEOF(gc_sKeypadAD_type4); idx++)
	{
		if(gc_sKeypadAD_type4[idx].min <= ad_data && ad_data <= gc_sKeypadAD_type4[idx].max)
		{
			valueKeyIdx = idx;
			break;
		}
	}	

	if((0 <= valueKeyIdx) && (valueKeyIdx < __SIZEOF(gc_sKeypadAD_type4)))
	{
		return gc_adKeyPadX1_tab[valueKeyIdx];	// ע: ����˱����а�����ȱ���뽫������ӦKPADֵ��0x00��
	}

	return 0;
}

__s32 get_x2_channe1_keypad(__s32 ad_data)
{
	__s16 idx, valueKeyIdx = -1;
	for(idx =0; idx <__SIZEOF(gc_sKeypadAD_type4); idx++)
	{
		if(gc_sKeypadAD_type4[idx].min <= ad_data && ad_data <= gc_sKeypadAD_type4[idx].max)
		{
			valueKeyIdx = idx;
			break;
		}
	}	
	if((0 <= valueKeyIdx) && (valueKeyIdx < __SIZEOF(gc_sKeypadAD_type4)))
	{
		return gc_adKeyPadX2_tab[valueKeyIdx];
	}

	return 0;
}



static __u32		 s_adChannel = RK_CHANNEL_BEGIN +1;
__u32  rocker_scan_tp(void)


__s32 rocker_init(void)
{
	if(RK_CHANNEL_BEGIN+1 >= RK_CHANNEL_RD)	return EPDK_FAIL;
	RK_Init();
	RK_SetFifoDepth(RK_FIFO_DEPTH_08);
	RK_SetSampleRate(RK_SAMPLE_RATE_16K);
	RK_EnableInt(RK_DATA_IRQ);
	RK_SelectChannel(s_adChannel);
	RK_ClearIntPending(RK_QueryIntPending());
	RK_ClearFifo();
	return EPDK_OK;
}
/*
****************************************************************************************************
*
*             rocker_exit
*
*  Description:
*       rocker_exit
*
*  Parameters:
*
*  Return value:
*       none
*
****************************************************************************************************
*/
__s32 rocker_exit(void)
{

	RK_Exit();
	return EPDK_OK;
}
